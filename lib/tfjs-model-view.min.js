!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("tfjs-model-view",[],t):"object"==typeof exports?exports["tfjs-model-view"]=t():e["tfjs-model-view"]=t()}("undefined"!=typeof self?self:this,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(r(1)),o=i(r(2)),a=i(r(4));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=Object.assign({},a.default,r),u=i.onRendererInitialized,s=void 0;i.predictCallback=function(e){s&&(s.update(t,e),s.render())},i.hookCallback=function(e){s&&(s.updateValues(e),s.render())},(0,n.default)(t,i).then((function(e){s=new o.default(i,e),u&&u(s)}))},e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=(n=i(regeneratorRuntime.mark((function e(t,r){var n,a,s,c,l;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return s=function e(t,r){var o,s=this,c=t.name,l=t.input,f=t.inputs,d=t.shape,p=t.sourceLayer,h=p||{},y=h.getWeights,v=h.setCallHook,g=h.activation,b={previousColumn:[],name:c,shape:d,weights:{},getWeights:u,mapPosition:Object.keys(n.layerMap).length};if(n.layerMap[c]=b,n.layerArr.unshift(b),g){var m=g.getClassName();b.activation={name:m}}return v&&p.setCallHook((o=i(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(b.getWeights(),b.activations=[],r=0;r<t.length;r++)b.activations.push(t[r].dataSync());a.hookCallback(b);case 4:case"end":return e.stop()}}),e,s)}))),function(e){return o.apply(this,arguments)})),y&&(b.getWeights=i(regeneratorRuntime.mark((function e(){var t,r,n,o,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,p.getWeights();case 2:t=e.sent,r=0;case 4:if(!(r<t.length)){e.next=16;break}return n=t[r],o=n.rankType,a=n.name,b.hasWeights=!0,e.t0=a,e.next=11,t[r].dataSync();case 11:e.t1=e.sent,b.weights[o]={name:e.t0,values:e.t1};case 13:r++,e.next=4;break;case 16:case"end":return e.stop()}}),e,s)}))),b.getWeights()),f?f.forEach((function(t){e(t,b.previousColumn)})):e(l,b.previousColumn),r&&r.push(b),b},n={layerMap:{},layerArr:[]},a=o({predictCallback:u,hookCallback:u},r),c=t.predict,t.predict=function(){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];var o=c.apply(t,r);return t.outputData=o.dataSync(),a.predictCallback(r),o},e.next=7,s(t.layers[t.layers.length-1].output);case 7:return n.model=e.sent,r.printStats&&(l=n.layerArr,console.log(new Array(10).join("-")),l.forEach((function(e){console.log("Layer: "+e.name)}))),e.abrupt("return",n);case 10:case"end":return e.stop()}}),e,this)}))),function(e,t){return n.apply(this,arguments)});function i(e){return function(){var t=e.apply(this,arguments);return new Promise((function(e,r){return function n(o,a){try{var i=t[o](a),u=i.value}catch(e){return void r(e)}if(!i.done)return Promise.resolve(u).then((function(e){n("next",e)}),(function(e){n("throw",e)}));e(u)}("next")}))}}function u(){}t.default=a,e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,o=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],n=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(n=(i=u.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){o=!0,a=e}finally{try{!n&&u.return&&u.return()}finally{if(o)throw a}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=r(3);var u=function(e){function t(e,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r)),o=document.createElement("canvas"),a=e.onBeginRender,i=e.onEndRender;return Object.assign(n,{canvas:o,onBeginRender:a,onEndRender:i}),o.setAttribute("width",n.width),o.setAttribute("height",n.height),n.renderContext=o.getContext("2d"),n.renderElement=o,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"render",value:function(){var e=this;window.requestAnimationFrame((function(){var t=e.onBeginRender,r=e.onEndRender;e.renderContext.clearRect(0,0,e.width,e.height),t&&t(e),e.layers.forEach((function(t){var r=t.radius,n=t.nodes,a=o(t.domain,2),i=a[0],u=a[1],s=t.previousColumn,c=t.renderLinks,l=t.renderNode,f=t.weights,d=o(t.color,3),p=d[0],h=d[1],y=d[2],v=t.nodeStroke,g=f[2],b=void 0;c&&(b=s.reduce((function(e,t){return e.concat(t.nodes)}),[])),n.forEach((function(t,n){var o=t.x,a=t.y,s=t.value;c&&b.forEach((function(r,o){e.renderContext.beginPath();var a=g&&g.values,i=a?g.values[n*o]:.5;e.renderContext.strokeStyle=a?i>0?"rgb(0, 0, 255, "+i+")":"rgb(255, 0, 0, "+Math.abs(i)+")":"rgba(0,0,0,.5)",e.renderContext.moveTo(r.x+r.radius/2,r.y),e.renderContext.lineTo(t.x-t.radius/2,t.y),e.renderContext.stroke()})),e.renderContext.strokeStyle="rgb("+p+", "+h+", "+y+")";var f=s/(u+i);isNaN(f)?e.renderContext.fillStyle="#FFF":e.renderContext.fillStyle="rgba("+p+", "+h+", "+y+", "+f+")",e.renderContext.beginPath(),e.renderContext.arc(o,a,r/2,0,2*Math.PI),r>3&&v&&e.renderContext.stroke(),e.renderContext.fill(),l&&l(e.renderContext,t,n)}))})),r&&r(e)}))}}]),t}(((n=i)&&n.__esModule?n:{default:n}).default);t.default=u,e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],n=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(n=(i=u.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){o=!0,a=e}finally{try{!n&&u.return&&u.return()}finally{if(o)throw a}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();var a=[[6,57,143],[0,107,92],[216,139,0],[180,0,85],[106,2,143],[216,109,0],[2,105,134],[0,142,103],[201,0,39],[139,11,215],[171,141,0]],i=function(){function e(t,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=t.xPadding,u=t.yPadding,s=t.xOffset,c=t.layer,l=void 0===c?{}:c,f=r.layerArr,d=2*(u||1),p=(i||0)+(s||0);!function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;t.column=r,t.previousColumn.forEach((function(t){e(t,r+1)}))}(f[f.length-1]),f.forEach((function(e,r){var i=e.name,u=e.shape,s=e.previousColumn;o.outputLayer=e;var c=l[i]||{},f=Object.assign({},t,c),h=f.radius,y=f.nodePadding,v=f.layerPadding,g=f.groupPadding,b=f.domain,m=void 0===b?[0,1]:b,x=f.renderLinks,w=f.renderNode,j=f.nodeStroke,k=f.reshape,C=f.color||(r<a.length?a[r]:[0,0,0]),O=Object.assign([1,1,1],u.slice(1)),P=n(O,3),_=P[0],E=P[1],S=P[2],M=_*E*S;if(k){var R=Object.assign([1,1,1],k),A=n(R,3),L=A[0],T=A[1],W=A[2];if(L*T*W!==M)throw new Error("Unable to reshape from ["+_+", "+E+", "+S+"] to ["+L+", "+T+", "+W+"]");_=L,E=T,S=W}p+=v;for(var N=h+y,V=v+E*N,I=[],F=0,H=0;H<_;H++)for(var B=0;B<E;B++)for(var z=0;z<S;z++){var D=h+H*N+z*_*N+z*g;I.push({x:p+B*N,y:D,radius:h}),F=D}F+=g+h,d=Math.max(d,F),Object.assign(e,{name:i,x:p,layerWidth:V,layerHeight:F,radius:h,nodes:I,domain:m,renderLinks:x,renderNode:w,nodeStroke:j,color:C,previousLayers:s.map((function(e){return e.name}))}),p+=V})),p+=i||0,f.forEach((function(e){var t=Math.floor((d-e.layerHeight)/2);e.nodes.forEach((function(e){return e.y+=t}))})),Object.assign(this,{width:p,height:d}),this.layers=f,this.layersMap=f.reduce((function(e,t){return e[t.name]=t,e}),{})}return o(e,[{key:"update",value:function(e,t){var r=this;t&&e.inputs.forEach((function(e,n){var o=r.layersMap[e.name];r.updateLayerValues(o,t[n].dataSync())})),this.updateLayerValues(this.outputLayer,e.outputData)}},{key:"updateLayerValues",value:function(e,t){for(var r=0;r<e.nodes.length;r++)e.nodes[r].value=t[r]}},{key:"updateValues",value:function(e){var t=this,r=this.layersMap[e.name];r.weights=e.weights,r.previousColumn.forEach((function(r,n){t.updateLayerValues(r,e.activations[n])}))}}]),e}();t.default=i,e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={renderer:"canvas",radius:6,nodePadding:2,layerPadding:20,groupPadding:1,xPadding:10,yPadding:10,renderLinks:!1,plotActivations:!1,nodeStroke:!0,onRendererInitialized:function(e){document.body.appendChild(e.canvas)}},e.exports=t.default}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,