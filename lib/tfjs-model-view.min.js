!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("tfjs-model-view",[],n):"object"==typeof exports?exports["tfjs-model-view"]=n():t["tfjs-model-view"]=n()}("undefined"!=typeof self?self:this,function(){return function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=131)}([function(t,n,e){var r=e(2),i=e(18),o=e(11),u=e(12),a=e(19),c=function(t,n,e){var f,s,l,h,d=t&c.F,p=t&c.G,v=t&c.S,g=t&c.P,y=t&c.B,b=p?r:v?r[n]||(r[n]={}):(r[n]||{}).prototype,_=p?i:i[n]||(i[n]={}),m=_.prototype||(_.prototype={});for(f in p&&(e=n),e)l=((s=!d&&b&&void 0!==b[f])?b:e)[f],h=y&&s?a(l,r):g&&"function"==typeof l?a(Function.call,l):l,b&&u(b,f,l,t&c.U),_[f]!=l&&o(_,f,h),g&&m[f]!=l&&(m[f]=l)};r.core=i,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,n,e){var r=e(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(51)("wks"),i=e(33),o=e(2).Symbol,u="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=r},function(t,n,e){var r=e(21),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,n,e){t.exports=!e(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(1),i=e(94),o=e(23),u=Object.defineProperty;n.f=e(7)?Object.defineProperty:function(t,n,e){if(r(t),n=o(n,!0),r(e),i)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(24);t.exports=function(t){return Object(r(t))}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(8),i=e(32);t.exports=e(7)?function(t,n,e){return r.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(2),i=e(11),o=e(14),u=e(33)("src"),a=Function.toString,c=(""+a).split("toString");e(18).inspectSource=function(t){return a.call(t)},(t.exports=function(t,n,e,a){var f="function"==typeof e;f&&(o(e,"name")||i(e,"name",n)),t[n]!==e&&(f&&(o(e,u)||i(e,u,t[n]?""+t[n]:c.join(String(n)))),t===r?t[n]=e:a?t[n]?t[n]=e:i(t,n,e):(delete t[n],i(t,n,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||a.call(this)})},function(t,n,e){var r=e(0),i=e(3),o=e(24),u=/"/g,a=function(t,n,e,r){var i=String(o(t)),a="<"+n;return""!==e&&(a+=" "+e+'="'+String(r).replace(u,"&quot;")+'"'),a+">"+i+"</"+n+">"};t.exports=function(t,n){var e={};e[t]=n(a),r(r.P+r.F*i(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",e)}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(47),i=e(24);t.exports=function(t){return r(i(t))}},function(t,n,e){var r=e(48),i=e(32),o=e(15),u=e(23),a=e(14),c=e(94),f=Object.getOwnPropertyDescriptor;n.f=e(7)?f:function(t,n){if(t=o(t),n=u(n,!0),c)try{return f(t,n)}catch(t){}if(a(t,n))return i(!r.f.call(t,n),t[n])}},function(t,n,e){var r=e(14),i=e(9),o=e(68)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n){var e=t.exports={version:"2.6.3"};"number"==typeof __e&&(__e=e)},function(t,n,e){var r=e(10);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,i){return t.call(n,e,r,i)}}return function(){return t.apply(n,arguments)}}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){"use strict";var r=e(3);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){var r=e(4);t.exports=function(t,n){if(!r(t))return t;var e,i;if(n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;if("function"==typeof(e=t.valueOf)&&!r(i=e.call(t)))return i;if(!n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){var r=e(0),i=e(18),o=e(3);t.exports=function(t,n){var e=(i.Object||{})[t]||Object[t],u={};u[t]=n(e),r(r.S+r.F*o(function(){e(1)}),"Object",u)}},function(t,n,e){var r=e(19),i=e(47),o=e(9),u=e(6),a=e(84);t.exports=function(t,n){var e=1==t,c=2==t,f=3==t,s=4==t,l=6==t,h=5==t||l,d=n||a;return function(n,a,p){for(var v,g,y=o(n),b=i(y),_=r(a,p,3),m=u(b.length),x=0,w=e?d(n,m):c?d(n,0):void 0;m>x;x++)if((h||x in b)&&(g=_(v=b[x],x,y),t))if(e)w[x]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return x;case 2:w.push(v)}else if(s)return!1;return l?-1:f||s?s:w}}},function(t,n,e){"use strict";if(e(7)){var r=e(30),i=e(2),o=e(3),u=e(0),a=e(62),c=e(92),f=e(19),s=e(39),l=e(32),h=e(11),d=e(41),p=e(21),v=e(6),g=e(122),y=e(35),b=e(23),_=e(14),m=e(43),x=e(4),w=e(9),M=e(81),S=e(36),E=e(17),k=e(37).f,A=e(83),N=e(33),T=e(5),P=e(26),O=e(52),C=e(50),R=e(86),I=e(45),F=e(57),j=e(38),L=e(85),z=e(111),D=e(8),U=e(16),B=D.f,q=U.f,Y=i.RangeError,W=i.TypeError,G=i.Uint8Array,V=Array.prototype,H=c.ArrayBuffer,X=c.DataView,$=P(0),Z=P(2),J=P(3),Q=P(4),K=P(5),tt=P(6),nt=O(!0),et=O(!1),rt=R.values,it=R.keys,ot=R.entries,ut=V.lastIndexOf,at=V.reduce,ct=V.reduceRight,ft=V.join,st=V.sort,lt=V.slice,ht=V.toString,dt=V.toLocaleString,pt=T("iterator"),vt=T("toStringTag"),gt=N("typed_constructor"),yt=N("def_constructor"),bt=a.CONSTR,_t=a.TYPED,mt=a.VIEW,xt=P(1,function(t,n){return kt(C(t,t[yt]),n)}),wt=o(function(){return 1===new G(new Uint16Array([1]).buffer)[0]}),Mt=!!G&&!!G.prototype.set&&o(function(){new G(1).set({})}),St=function(t,n){var e=p(t);if(e<0||e%n)throw Y("Wrong offset!");return e},Et=function(t){if(x(t)&&_t in t)return t;throw W(t+" is not a typed array!")},kt=function(t,n){if(!(x(t)&&gt in t))throw W("It is not a typed array constructor!");return new t(n)},At=function(t,n){return Nt(C(t,t[yt]),n)},Nt=function(t,n){for(var e=0,r=n.length,i=kt(t,r);r>e;)i[e]=n[e++];return i},Tt=function(t,n,e){B(t,n,{get:function(){return this._d[e]}})},Pt=function(t){var n,e,r,i,o,u,a=w(t),c=arguments.length,s=c>1?arguments[1]:void 0,l=void 0!==s,h=A(a);if(null!=h&&!M(h)){for(u=h.call(a),r=[],n=0;!(o=u.next()).done;n++)r.push(o.value);a=r}for(l&&c>2&&(s=f(s,arguments[2],2)),n=0,e=v(a.length),i=kt(this,e);e>n;n++)i[n]=l?s(a[n],n):a[n];return i},Ot=function(){for(var t=0,n=arguments.length,e=kt(this,n);n>t;)e[t]=arguments[t++];return e},Ct=!!G&&o(function(){dt.call(new G(1))}),Rt=function(){return dt.apply(Ct?lt.call(Et(this)):Et(this),arguments)},It={copyWithin:function(t,n){return z.call(Et(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Q(Et(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return L.apply(Et(this),arguments)},filter:function(t){return At(this,Z(Et(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return K(Et(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Et(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){$(Et(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return et(Et(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Et(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ft.apply(Et(this),arguments)},lastIndexOf:function(t){return ut.apply(Et(this),arguments)},map:function(t){return xt(Et(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return at.apply(Et(this),arguments)},reduceRight:function(t){return ct.apply(Et(this),arguments)},reverse:function(){for(var t,n=Et(this).length,e=Math.floor(n/2),r=0;r<e;)t=this[r],this[r++]=this[--n],this[n]=t;return this},some:function(t){return J(Et(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return st.call(Et(this),t)},subarray:function(t,n){var e=Et(this),r=e.length,i=y(t,r);return new(C(e,e[yt]))(e.buffer,e.byteOffset+i*e.BYTES_PER_ELEMENT,v((void 0===n?r:y(n,r))-i))}},Ft=function(t,n){return At(this,lt.call(Et(this),t,n))},jt=function(t){Et(this);var n=St(arguments[1],1),e=this.length,r=w(t),i=v(r.length),o=0;if(i+n>e)throw Y("Wrong length!");for(;o<i;)this[n+o]=r[o++]},Lt={entries:function(){return ot.call(Et(this))},keys:function(){return it.call(Et(this))},values:function(){return rt.call(Et(this))}},zt=function(t,n){return x(t)&&t[_t]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},Dt=function(t,n){return zt(t,n=b(n,!0))?l(2,t[n]):q(t,n)},Ut=function(t,n,e){return!(zt(t,n=b(n,!0))&&x(e)&&_(e,"value"))||_(e,"get")||_(e,"set")||e.configurable||_(e,"writable")&&!e.writable||_(e,"enumerable")&&!e.enumerable?B(t,n,e):(t[n]=e.value,t)};bt||(U.f=Dt,D.f=Ut),u(u.S+u.F*!bt,"Object",{getOwnPropertyDescriptor:Dt,defineProperty:Ut}),o(function(){ht.call({})})&&(ht=dt=function(){return ft.call(this)});var Bt=d({},It);d(Bt,Lt),h(Bt,pt,Lt.values),d(Bt,{slice:Ft,set:jt,constructor:function(){},toString:ht,toLocaleString:Rt}),Tt(Bt,"buffer","b"),Tt(Bt,"byteOffset","o"),Tt(Bt,"byteLength","l"),Tt(Bt,"length","e"),B(Bt,vt,{get:function(){return this[_t]}}),t.exports=function(t,n,e,c){var f=t+((c=!!c)?"Clamped":"")+"Array",l="get"+t,d="set"+t,p=i[f],y=p||{},b=p&&E(p),_=!p||!a.ABV,w={},M=p&&p.prototype,A=function(t,e){B(t,e,{get:function(){return function(t,e){var r=t._d;return r.v[l](e*n+r.o,wt)}(this,e)},set:function(t){return function(t,e,r){var i=t._d;c&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),i.v[d](e*n+i.o,r,wt)}(this,e,t)},enumerable:!0})};_?(p=e(function(t,e,r,i){s(t,p,f,"_d");var o,u,a,c,l=0,d=0;if(x(e)){if(!(e instanceof H||"ArrayBuffer"==(c=m(e))||"SharedArrayBuffer"==c))return _t in e?Nt(p,e):Pt.call(p,e);o=e,d=St(r,n);var y=e.byteLength;if(void 0===i){if(y%n)throw Y("Wrong length!");if((u=y-d)<0)throw Y("Wrong length!")}else if((u=v(i)*n)+d>y)throw Y("Wrong length!");a=u/n}else a=g(e),o=new H(u=a*n);for(h(t,"_d",{b:o,o:d,l:u,e:a,v:new X(o)});l<a;)A(t,l++)}),M=p.prototype=S(Bt),h(M,"constructor",p)):o(function(){p(1)})&&o(function(){new p(-1)})&&F(function(t){new p,new p(null),new p(1.5),new p(t)},!0)||(p=e(function(t,e,r,i){var o;return s(t,p,f),x(e)?e instanceof H||"ArrayBuffer"==(o=m(e))||"SharedArrayBuffer"==o?void 0!==i?new y(e,St(r,n),i):void 0!==r?new y(e,St(r,n)):new y(e):_t in e?Nt(p,e):Pt.call(p,e):new y(g(e))}),$(b!==Function.prototype?k(y).concat(k(b)):k(y),function(t){t in p||h(p,t,y[t])}),p.prototype=M,r||(M.constructor=p));var N=M[pt],T=!!N&&("values"==N.name||null==N.name),P=Lt.values;h(p,gt,!0),h(M,_t,f),h(M,mt,!0),h(M,yt,p),(c?new p(1)[vt]==f:vt in M)||B(M,vt,{get:function(){return f}}),w[f]=p,u(u.G+u.W+u.F*(p!=y),w),u(u.S,f,{BYTES_PER_ELEMENT:n}),u(u.S+u.F*o(function(){y.of.call(p,1)}),f,{from:Pt,of:Ot}),"BYTES_PER_ELEMENT"in M||h(M,"BYTES_PER_ELEMENT",n),u(u.P,f,It),j(f),u(u.P+u.F*Mt,f,{set:jt}),u(u.P+u.F*!T,f,Lt),r||M.toString==ht||(M.toString=ht),u(u.P+u.F*o(function(){new p(1).slice()}),f,{slice:Ft}),u(u.P+u.F*(o(function(){return[1,2].toLocaleString()!=new p([1,2]).toLocaleString()})||!o(function(){M.toLocaleString.call([1,2])})),f,{toLocaleString:Rt}),I[f]=T?N:P,r||T||h(M,pt,P)}}else t.exports=function(){}},function(t,n,e){var r=e(117),i=e(0),o=e(51)("metadata"),u=o.store||(o.store=new(e(120))),a=function(t,n,e){var i=u.get(t);if(!i){if(!e)return;u.set(t,i=new r)}var o=i.get(n);if(!o){if(!e)return;i.set(n,o=new r)}return o};t.exports={store:u,map:a,has:function(t,n,e){var r=a(n,e,!1);return void 0!==r&&r.has(t)},get:function(t,n,e){var r=a(n,e,!1);return void 0===r?void 0:r.get(t)},set:function(t,n,e,r){a(e,r,!0).set(t,n)},keys:function(t,n){var e=a(t,n,!1),r=[];return e&&e.forEach(function(t,n){r.push(n)}),r},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){i(i.S,"Reflect",t)}}},function(t,n,e){var r=e(33)("meta"),i=e(4),o=e(14),u=e(8).f,a=0,c=Object.isExtensible||function(){return!0},f=!e(3)(function(){return c(Object.preventExtensions({}))}),s=function(t){u(t,r,{value:{i:"O"+ ++a,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,n){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!c(t))return"F";if(!n)return"E";s(t)}return t[r].i},getWeak:function(t,n){if(!o(t,r)){if(!c(t))return!0;if(!n)return!1;s(t)}return t[r].w},onFreeze:function(t){return f&&l.NEED&&c(t)&&!o(t,r)&&s(t),t}}},function(t,n){t.exports=!1},function(t,n,e){var r=e(5)("unscopables"),i=Array.prototype;null==i[r]&&e(11)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n,e){var r=e(96),i=e(69);t.exports=Object.keys||function(t){return r(t,i)}},function(t,n,e){var r=e(21),i=Math.max,o=Math.min;t.exports=function(t,n){return(t=r(t))<0?i(t+n,0):o(t,n)}},function(t,n,e){var r=e(1),i=e(97),o=e(69),u=e(68)("IE_PROTO"),a=function(){},c=function(){var t,n=e(66)("iframe"),r=o.length;for(n.style.display="none",e(70).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[o[r]];return c()};t.exports=Object.create||function(t,n){var e;return null!==t?(a.prototype=r(t),e=new a,a.prototype=null,e[u]=t):e=c(),void 0===n?e:i(e,n)}},function(t,n,e){var r=e(96),i=e(69).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,n,e){"use strict";var r=e(2),i=e(8),o=e(7),u=e(5)("species");t.exports=function(t){var n=r[t];o&&n&&!n[u]&&i.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(19),i=e(109),o=e(81),u=e(1),a=e(6),c=e(83),f={},s={};(n=t.exports=function(t,n,e,l,h){var d,p,v,g,y=h?function(){return t}:c(t),b=r(e,l,n?2:1),_=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(o(y)){for(d=a(t.length);d>_;_++)if((g=n?b(u(p=t[_])[0],p[1]):b(t[_]))===f||g===s)return g}else for(v=y.call(t);!(p=v.next()).done;)if((g=i(v,b,p.value,n))===f||g===s)return g}).BREAK=f,n.RETURN=s},function(t,n,e){var r=e(12);t.exports=function(t,n,e){for(var i in n)r(t,i,n[i],e);return t}},function(t,n,e){var r=e(8).f,i=e(14),o=e(5)("toStringTag");t.exports=function(t,n,e){t&&!i(t=e?t:t.prototype,o)&&r(t,o,{configurable:!0,value:n})}},function(t,n,e){var r=e(20),i=e(5)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?e:o?r(n):"Object"==(u=r(n))&&"function"==typeof n.callee?"Arguments":u}},function(t,n,e){var r=e(0),i=e(24),o=e(3),u=e(72),a="["+u+"]",c=RegExp("^"+a+a+"*"),f=RegExp(a+a+"*$"),s=function(t,n,e){var i={},a=o(function(){return!!u[t]()||"​"!="​"[t]()}),c=i[t]=a?n(l):u[t];e&&(i[e]=c),r(r.P+r.F*a,"String",i)},l=s.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(c,"")),2&n&&(t=t.replace(f,"")),t};t.exports=s},function(t,n){t.exports={}},function(t,n,e){var r=e(4);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(20);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){"use strict";var r=e(1);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){var r=e(1),i=e(10),o=e(5)("species");t.exports=function(t,n){var e,u=r(t).constructor;return void 0===u||null==(e=r(u)[o])?n:i(e)}},function(t,n,e){var r=e(18),i=e(2),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(30)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n,e){var r=e(15),i=e(6),o=e(35);t.exports=function(t){return function(n,e,u){var a,c=r(n),f=i(c.length),s=o(u,f);if(t&&e!=e){for(;f>s;)if((a=c[s++])!=a)return!0}else for(;f>s;s++)if((t||s in c)&&c[s]===e)return t||s||0;return!t&&-1}}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(20);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){var r=e(21),i=e(24);t.exports=function(t){return function(n,e){var o,u,a=String(i(n)),c=r(e),f=a.length;return c<0||c>=f?t?"":void 0:(o=a.charCodeAt(c))<55296||o>56319||c+1===f||(u=a.charCodeAt(c+1))<56320||u>57343?t?a.charAt(c):o:t?a.slice(c,c+2):u-56320+(o-55296<<10)+65536}}},function(t,n,e){var r=e(4),i=e(20),o=e(5)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},function(t,n,e){var r=e(5)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var e=!1;try{var o=[7],u=o[r]();u.next=function(){return{done:e=!0}},o[r]=function(){return u},t(o)}catch(t){}return e}},function(t,n,e){"use strict";var r=e(43),i=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var o=e.call(t,n);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,n)}},function(t,n,e){"use strict";e(113);var r=e(12),i=e(11),o=e(3),u=e(24),a=e(5),c=e(87),f=a("species"),s=!o(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,n,e){var h=a(t),d=!o(function(){var n={};return n[h]=function(){return 7},7!=""[t](n)}),p=d?!o(function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[f]=function(){return e}),e[h](""),!n}):void 0;if(!d||!p||"replace"===t&&!s||"split"===t&&!l){var v=/./[h],g=e(u,h,""[t],function(t,n,e,r,i){return n.exec===c?d&&!i?{done:!0,value:v.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),y=g[0],b=g[1];r(String.prototype,t,y),i(RegExp.prototype,h,2==n?function(t,n){return b.call(t,this,n)}:function(t){return b.call(t,this)})}}},function(t,n,e){var r=e(2).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){"use strict";var r=e(2),i=e(0),o=e(12),u=e(41),a=e(29),c=e(40),f=e(39),s=e(4),l=e(3),h=e(57),d=e(42),p=e(73);t.exports=function(t,n,e,v,g,y){var b=r[t],_=b,m=g?"set":"add",x=_&&_.prototype,w={},M=function(t){var n=x[t];o(x,t,"delete"==t?function(t){return!(y&&!s(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(y&&!s(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!s(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof _&&(y||x.forEach&&!l(function(){(new _).entries().next()}))){var S=new _,E=S[m](y?{}:-0,1)!=S,k=l(function(){S.has(1)}),A=h(function(t){new _(t)}),N=!y&&l(function(){for(var t=new _,n=5;n--;)t[m](n,n);return!t.has(-0)});A||((_=n(function(n,e){f(n,_,t);var r=p(new b,n,_);return null!=e&&c(e,g,r[m],r),r})).prototype=x,x.constructor=_),(k||N)&&(M("delete"),M("has"),g&&M("get")),(N||E)&&M(m),y&&x.clear&&delete x.clear}else _=v.getConstructor(n,t,g,m),u(_.prototype,e),a.NEED=!0;return d(_,t),w[t]=_,i(i.G+i.W+i.F*(_!=b),w),y||v.setStrong(_,t,g),_}},function(t,n,e){for(var r,i=e(2),o=e(11),u=e(33),a=u("typed_array"),c=u("view"),f=!(!i.ArrayBuffer||!i.DataView),s=f,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=i[h[l++]])?(o(r.prototype,a,!0),o(r.prototype,c,!0)):s=!1;t.exports={ABV:f,CONSTR:s,TYPED:a,VIEW:c}},function(t,n,e){"use strict";t.exports=e(30)||!e(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete e(2)[t]})},function(t,n,e){"use strict";var r=e(0);t.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,n=new Array(t);t--;)n[t]=arguments[t];return new this(n)}})}},function(t,n,e){"use strict";var r=e(0),i=e(10),o=e(19),u=e(40);t.exports=function(t){r(r.S,t,{from:function(t){var n,e,r,a,c=arguments[1];return i(this),(n=void 0!==c)&&i(c),null==t?new this:(e=[],n?(r=0,a=o(c,arguments[2],2),u(t,!1,function(t){e.push(a(t,r++))})):u(t,!1,e.push,e),new this(e))}})}},function(t,n,e){var r=e(4),i=e(2).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n,e){var r=e(2),i=e(18),o=e(30),u=e(95),a=e(8).f;t.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||a(n,t,{value:u.f(t)})}},function(t,n,e){var r=e(51)("keys"),i=e(33);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(2).document;t.exports=r&&r.documentElement},function(t,n,e){var r=e(4),i=e(1),o=function(t,n){if(i(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(19)(Function.call,e(16).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return o(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:o}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,e){var r=e(4),i=e(71).set;t.exports=function(t,n,e){var o,u=n.constructor;return u!==e&&"function"==typeof u&&(o=u.prototype)!==e.prototype&&r(o)&&i&&i(t,o),t}},function(t,n,e){"use strict";var r=e(21),i=e(24);t.exports=function(t){var n=String(i(this)),e="",o=r(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(n+=n))1&o&&(e+=n);return e}},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n){var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},function(t,n,e){"use strict";var r=e(30),i=e(0),o=e(12),u=e(11),a=e(45),c=e(78),f=e(42),s=e(17),l=e(5)("iterator"),h=!([].keys&&"next"in[].keys()),d=function(){return this};t.exports=function(t,n,e,p,v,g,y){c(e,n,p);var b,_,m,x=function(t){if(!h&&t in E)return E[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},w=n+" Iterator",M="values"==v,S=!1,E=t.prototype,k=E[l]||E["@@iterator"]||v&&E[v],A=k||x(v),N=v?M?x("entries"):A:void 0,T="Array"==n&&E.entries||k;if(T&&(m=s(T.call(new t)))!==Object.prototype&&m.next&&(f(m,w,!0),r||"function"==typeof m[l]||u(m,l,d)),M&&k&&"values"!==k.name&&(S=!0,A=function(){return k.call(this)}),r&&!y||!h&&!S&&E[l]||u(E,l,A),a[n]=A,a[w]=d,v)if(b={values:M?A:x("values"),keys:g?A:x("keys"),entries:N},y)for(_ in b)_ in E||o(E,_,b[_]);else i(i.P+i.F*(h||S),n,b);return b}},function(t,n,e){"use strict";var r=e(36),i=e(32),o=e(42),u={};e(11)(u,e(5)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(u,{next:i(1,e)}),o(t,n+" Iterator")}},function(t,n,e){var r=e(56),i=e(24);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(i(t))}},function(t,n,e){var r=e(5)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){var r=e(45),i=e(5)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,n,e){"use strict";var r=e(8),i=e(32);t.exports=function(t,n,e){n in t?r.f(t,n,i(0,e)):t[n]=e}},function(t,n,e){var r=e(43),i=e(5)("iterator"),o=e(45);t.exports=e(18).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,n,e){var r=e(223);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){"use strict";var r=e(9),i=e(35),o=e(6);t.exports=function(t){for(var n=r(this),e=o(n.length),u=arguments.length,a=i(u>1?arguments[1]:void 0,e),c=u>2?arguments[2]:void 0,f=void 0===c?e:i(c,e);f>a;)n[a++]=t;return n}},function(t,n,e){"use strict";var r=e(31),i=e(112),o=e(45),u=e(15);t.exports=e(77)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,i(1)):i(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,n,e){"use strict";var r,i,o=e(49),u=RegExp.prototype.exec,a=String.prototype.replace,c=u,f=(r=/a/,i=/b*/g,u.call(r,"a"),u.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),s=void 0!==/()??/.exec("")[1];(f||s)&&(c=function(t){var n,e,r,i,c=this;return s&&(e=new RegExp("^"+c.source+"$(?!\\s)",o.call(c))),f&&(n=c.lastIndex),r=u.call(c,t),f&&r&&(c.lastIndex=c.global?r.index+r[0].length:n),s&&r&&r.length>1&&a.call(r[0],e,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)}),r}),t.exports=c},function(t,n,e){"use strict";var r=e(55)(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){var r,i,o,u=e(19),a=e(102),c=e(70),f=e(66),s=e(2),l=s.process,h=s.setImmediate,d=s.clearImmediate,p=s.MessageChannel,v=s.Dispatch,g=0,y={},b=function(){var t=+this;if(y.hasOwnProperty(t)){var n=y[t];delete y[t],n()}},_=function(t){b.call(t.data)};h&&d||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return y[++g]=function(){a("function"==typeof t?t:Function(t),n)},r(g),g},d=function(t){delete y[t]},"process"==e(20)(l)?r=function(t){l.nextTick(u(b,t,1))}:v&&v.now?r=function(t){v.now(u(b,t,1))}:p?(o=(i=new p).port2,i.port1.onmessage=_,r=u(o.postMessage,o,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(r=function(t){s.postMessage(t+"","*")},s.addEventListener("message",_,!1)):r="onreadystatechange"in f("script")?function(t){c.appendChild(f("script")).onreadystatechange=function(){c.removeChild(this),b.call(t)}}:function(t){setTimeout(u(b,t,1),0)}),t.exports={set:h,clear:d}},function(t,n,e){var r=e(2),i=e(89).set,o=r.MutationObserver||r.WebKitMutationObserver,u=r.process,a=r.Promise,c="process"==e(20)(u);t.exports=function(){var t,n,e,f=function(){var r,i;for(c&&(r=u.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(c)e=function(){u.nextTick(f)};else if(!o||r.navigator&&r.navigator.standalone)if(a&&a.resolve){var s=a.resolve(void 0);e=function(){s.then(f)}}else e=function(){i.call(r,f)};else{var l=!0,h=document.createTextNode("");new o(f).observe(h,{characterData:!0}),e=function(){h.data=l=!l}}return function(r){var i={fn:r,next:void 0};n&&(n.next=i),t||(t=i,e()),n=i}}},function(t,n,e){"use strict";var r=e(10);function i(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r}),this.resolve=r(n),this.reject=r(e)}t.exports.f=function(t){return new i(t)}},function(t,n,e){"use strict";var r=e(2),i=e(7),o=e(30),u=e(62),a=e(11),c=e(41),f=e(3),s=e(39),l=e(21),h=e(6),d=e(122),p=e(37).f,v=e(8).f,g=e(85),y=e(42),b="prototype",_="Wrong index!",m=r.ArrayBuffer,x=r.DataView,w=r.Math,M=r.RangeError,S=r.Infinity,E=m,k=w.abs,A=w.pow,N=w.floor,T=w.log,P=w.LN2,O=i?"_b":"buffer",C=i?"_l":"byteLength",R=i?"_o":"byteOffset";function I(t,n,e){var r,i,o,u=new Array(e),a=8*e-n-1,c=(1<<a)-1,f=c>>1,s=23===n?A(2,-24)-A(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=k(t))!=t||t===S?(i=t!=t?1:0,r=c):(r=N(T(t)/P),t*(o=A(2,-r))<1&&(r--,o*=2),(t+=r+f>=1?s/o:s*A(2,1-f))*o>=2&&(r++,o/=2),r+f>=c?(i=0,r=c):r+f>=1?(i=(t*o-1)*A(2,n),r+=f):(i=t*A(2,f-1)*A(2,n),r=0));n>=8;u[l++]=255&i,i/=256,n-=8);for(r=r<<n|i,a+=n;a>0;u[l++]=255&r,r/=256,a-=8);return u[--l]|=128*h,u}function F(t,n,e){var r,i=8*e-n-1,o=(1<<i)-1,u=o>>1,a=i-7,c=e-1,f=t[c--],s=127&f;for(f>>=7;a>0;s=256*s+t[c],c--,a-=8);for(r=s&(1<<-a)-1,s>>=-a,a+=n;a>0;r=256*r+t[c],c--,a-=8);if(0===s)s=1-u;else{if(s===o)return r?NaN:f?-S:S;r+=A(2,n),s-=u}return(f?-1:1)*r*A(2,s-n)}function j(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function L(t){return[255&t]}function z(t){return[255&t,t>>8&255]}function D(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function U(t){return I(t,52,8)}function B(t){return I(t,23,4)}function q(t,n,e){v(t[b],n,{get:function(){return this[e]}})}function Y(t,n,e,r){var i=d(+e);if(i+n>t[C])throw M(_);var o=t[O]._b,u=i+t[R],a=o.slice(u,u+n);return r?a:a.reverse()}function W(t,n,e,r,i,o){var u=d(+e);if(u+n>t[C])throw M(_);for(var a=t[O]._b,c=u+t[R],f=r(+i),s=0;s<n;s++)a[c+s]=f[o?s:n-s-1]}if(u.ABV){if(!f(function(){m(1)})||!f(function(){new m(-1)})||f(function(){return new m,new m(1.5),new m(NaN),"ArrayBuffer"!=m.name})){for(var G,V=(m=function(t){return s(this,m),new E(d(t))})[b]=E[b],H=p(E),X=0;H.length>X;)(G=H[X++])in m||a(m,G,E[G]);o||(V.constructor=m)}var $=new x(new m(2)),Z=x[b].setInt8;$.setInt8(0,2147483648),$.setInt8(1,2147483649),!$.getInt8(0)&&$.getInt8(1)||c(x[b],{setInt8:function(t,n){Z.call(this,t,n<<24>>24)},setUint8:function(t,n){Z.call(this,t,n<<24>>24)}},!0)}else m=function(t){s(this,m,"ArrayBuffer");var n=d(t);this._b=g.call(new Array(n),0),this[C]=n},x=function(t,n,e){s(this,x,"DataView"),s(t,m,"DataView");var r=t[C],i=l(n);if(i<0||i>r)throw M("Wrong offset!");if(i+(e=void 0===e?r-i:h(e))>r)throw M("Wrong length!");this[O]=t,this[R]=i,this[C]=e},i&&(q(m,"byteLength","_l"),q(x,"buffer","_b"),q(x,"byteLength","_l"),q(x,"byteOffset","_o")),c(x[b],{getInt8:function(t){return Y(this,1,t)[0]<<24>>24},getUint8:function(t){return Y(this,1,t)[0]},getInt16:function(t){var n=Y(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=Y(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return j(Y(this,4,t,arguments[1]))},getUint32:function(t){return j(Y(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return F(Y(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return F(Y(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){W(this,1,t,L,n)},setUint8:function(t,n){W(this,1,t,L,n)},setInt16:function(t,n){W(this,2,t,z,n,arguments[2])},setUint16:function(t,n){W(this,2,t,z,n,arguments[2])},setInt32:function(t,n){W(this,4,t,D,n,arguments[2])},setUint32:function(t,n){W(this,4,t,D,n,arguments[2])},setFloat32:function(t,n){W(this,4,t,B,n,arguments[2])},setFloat64:function(t,n){W(this,8,t,U,n,arguments[2])}});y(m,"ArrayBuffer"),y(x,"DataView"),a(x[b],u.VIEW,!0),n.ArrayBuffer=m,n.DataView=x},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){t.exports=!e(7)&&!e(3)(function(){return 7!=Object.defineProperty(e(66)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){n.f=e(5)},function(t,n,e){var r=e(14),i=e(15),o=e(52)(!1),u=e(68)("IE_PROTO");t.exports=function(t,n){var e,a=i(t),c=0,f=[];for(e in a)e!=u&&r(a,e)&&f.push(e);for(;n.length>c;)r(a,e=n[c++])&&(~o(f,e)||f.push(e));return f}},function(t,n,e){var r=e(8),i=e(1),o=e(34);t.exports=e(7)?Object.defineProperties:function(t,n){i(t);for(var e,u=o(n),a=u.length,c=0;a>c;)r.f(t,e=u[c++],n[e]);return t}},function(t,n,e){var r=e(15),i=e(37).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return u.slice()}}(t):i(r(t))}},function(t,n,e){"use strict";var r=e(34),i=e(53),o=e(48),u=e(9),a=e(47),c=Object.assign;t.exports=!c||e(3)(function(){var t={},n={},e=Symbol(),r="abcdefghijklmnopqrst";return t[e]=7,r.split("").forEach(function(t){n[t]=t}),7!=c({},t)[e]||Object.keys(c({},n)).join("")!=r})?function(t,n){for(var e=u(t),c=arguments.length,f=1,s=i.f,l=o.f;c>f;)for(var h,d=a(arguments[f++]),p=s?r(d).concat(s(d)):r(d),v=p.length,g=0;v>g;)l.call(d,h=p[g++])&&(e[h]=d[h]);return e}:c},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,e){"use strict";var r=e(10),i=e(4),o=e(102),u=[].slice,a={};t.exports=Function.bind||function(t){var n=r(this),e=u.call(arguments,1),c=function(){var r=e.concat(u.call(arguments));return this instanceof c?function(t,n,e){if(!(n in a)){for(var r=[],i=0;i<n;i++)r[i]="a["+i+"]";a[n]=Function("F,a","return new F("+r.join(",")+")")}return a[n](t,e)}(n,r.length,r):o(n,r,t)};return i(n.prototype)&&(c.prototype=n.prototype),c}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(2).parseInt,i=e(44).trim,o=e(72),u=/^[-+]?0[xX]/;t.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(t,n){var e=i(String(t),3);return r(e,n>>>0||(u.test(e)?16:10))}:r},function(t,n,e){var r=e(2).parseFloat,i=e(44).trim;t.exports=1/r(e(72)+"-0")!=-1/0?function(t){var n=i(String(t),3),e=r(n);return 0===e&&"-"==n.charAt(0)?-0:e}:r},function(t,n,e){var r=e(20);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(n);return+t}},function(t,n,e){var r=e(4),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},function(t,n){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,e){var r=e(75),i=Math.pow,o=i(2,-52),u=i(2,-23),a=i(2,127)*(2-u),c=i(2,-126);t.exports=Math.fround||function(t){var n,e,i=Math.abs(t),f=r(t);return i<c?f*(i/c/u+1/o-1/o)*c*u:(e=(n=(1+u/o)*i)-(n-i))>a||e!=e?f*(1/0):f*e}},function(t,n,e){var r=e(1);t.exports=function(t,n,e,i){try{return i?n(r(e)[0],e[1]):n(e)}catch(n){var o=t.return;throw void 0!==o&&r(o.call(t)),n}}},function(t,n,e){var r=e(10),i=e(9),o=e(47),u=e(6);t.exports=function(t,n,e,a,c){r(n);var f=i(t),s=o(f),l=u(f.length),h=c?l-1:0,d=c?-1:1;if(e<2)for(;;){if(h in s){a=s[h],h+=d;break}if(h+=d,c?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;c?h>=0:l>h;h+=d)h in s&&(a=n(a,s[h],h,f));return a}},function(t,n,e){"use strict";var r=e(9),i=e(35),o=e(6);t.exports=[].copyWithin||function(t,n){var e=r(this),u=o(e.length),a=i(t,u),c=i(n,u),f=arguments.length>2?arguments[2]:void 0,s=Math.min((void 0===f?u:i(f,u))-c,u-a),l=1;for(c<a&&a<c+s&&(l=-1,c+=s-1,a+=s-1);s-- >0;)c in e?e[a]=e[c]:delete e[a],a+=l,c+=l;return e}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){"use strict";var r=e(87);e(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,n,e){e(7)&&"g"!=/./g.flags&&e(8).f(RegExp.prototype,"flags",{configurable:!0,get:e(49)})},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){var r=e(1),i=e(4),o=e(91);t.exports=function(t,n){if(r(t),i(n)&&n.constructor===t)return n;var e=o.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){"use strict";var r=e(118),i=e(46);t.exports=e(61)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=r.getEntry(i(this,"Map"),t);return n&&n.v},set:function(t,n){return r.def(i(this,"Map"),0===t?0:t,n)}},r,!0)},function(t,n,e){"use strict";var r=e(8).f,i=e(36),o=e(41),u=e(19),a=e(39),c=e(40),f=e(77),s=e(112),l=e(38),h=e(7),d=e(29).fastKey,p=e(46),v=h?"_s":"size",g=function(t,n){var e,r=d(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,f){var s=t(function(t,r){a(t,s,n,"_i"),t._t=n,t._i=i(null),t._f=void 0,t._l=void 0,t[v]=0,null!=r&&c(r,e,t[f],t)});return o(s.prototype,{clear:function(){for(var t=p(this,n),e=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var e=p(this,n),r=g(e,t);if(r){var i=r.n,o=r.p;delete e._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),e._f==r&&(e._f=i),e._l==r&&(e._l=o),e[v]--}return!!r},forEach:function(t){p(this,n);for(var e,r=u(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!g(p(this,n),t)}}),h&&r(s.prototype,"size",{get:function(){return p(this,n)[v]}}),s},def:function(t,n,e){var r,i,o=g(t,n);return o?o.v=e:(t._l=o={i:i=d(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[v]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,n,e){f(t,n,function(t,e){this._t=p(t,n),this._k=e,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?s(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,s(1))},e?"entries":"values",!e,!0),l(n)}}},function(t,n,e){"use strict";var r=e(118),i=e(46);t.exports=e(61)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r,i=e(26)(0),o=e(12),u=e(29),a=e(99),c=e(121),f=e(4),s=e(3),l=e(46),h=u.getWeak,d=Object.isExtensible,p=c.ufstore,v={},g=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},y={get:function(t){if(f(t)){var n=h(t);return!0===n?p(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function(t,n){return c.def(l(this,"WeakMap"),t,n)}},b=t.exports=e(61)("WeakMap",g,y,c,!0,!0);s(function(){return 7!=(new b).set((Object.freeze||Object)(v),7).get(v)})&&(a((r=c.getConstructor(g,"WeakMap")).prototype,y),u.NEED=!0,i(["delete","has","get","set"],function(t){var n=b.prototype,e=n[t];o(n,t,function(n,i){if(f(n)&&!d(n)){this._f||(this._f=new r);var o=this._f[t](n,i);return"set"==t?this:o}return e.call(this,n,i)})}))},function(t,n,e){"use strict";var r=e(41),i=e(29).getWeak,o=e(1),u=e(4),a=e(39),c=e(40),f=e(26),s=e(14),l=e(46),h=f(5),d=f(6),p=0,v=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},y=function(t,n){return h(t.a,function(t){return t[0]===n})};g.prototype={get:function(t){var n=y(this,t);if(n)return n[1]},has:function(t){return!!y(this,t)},set:function(t,n){var e=y(this,t);e?e[1]=n:this.a.push([t,n])},delete:function(t){var n=d(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},t.exports={getConstructor:function(t,n,e,o){var f=t(function(t,r){a(t,f,n,"_i"),t._t=n,t._i=p++,t._l=void 0,null!=r&&c(r,e,t[o],t)});return r(f.prototype,{delete:function(t){if(!u(t))return!1;var e=i(t);return!0===e?v(l(this,n)).delete(t):e&&s(e,this._i)&&delete e[this._i]},has:function(t){if(!u(t))return!1;var e=i(t);return!0===e?v(l(this,n)).has(t):e&&s(e,this._i)}}),f},def:function(t,n,e){var r=i(o(n),!0);return!0===r?v(t).set(n,e):r[t._i]=e,t},ufstore:v}},function(t,n,e){var r=e(21),i=e(6);t.exports=function(t){if(void 0===t)return 0;var n=r(t),e=i(n);if(n!==e)throw RangeError("Wrong length!");return e}},function(t,n,e){var r=e(37),i=e(53),o=e(1),u=e(2).Reflect;t.exports=u&&u.ownKeys||function(t){var n=r.f(o(t)),e=i.f;return e?n.concat(e(t)):n}},function(t,n,e){"use strict";var r=e(54),i=e(4),o=e(6),u=e(19),a=e(5)("isConcatSpreadable");t.exports=function t(n,e,c,f,s,l,h,d){for(var p,v,g=s,y=0,b=!!h&&u(h,d,3);y<f;){if(y in c){if(p=b?b(c[y],y,e):c[y],v=!1,i(p)&&(v=void 0!==(v=p[a])?!!v:r(p)),v&&l>0)g=t(n,e,p,o(p.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();n[g]=p}g++}y++}return g}},function(t,n,e){var r=e(6),i=e(74),o=e(24);t.exports=function(t,n,e,u){var a=String(o(t)),c=a.length,f=void 0===e?" ":String(e),s=r(n);if(s<=c||""==f)return a;var l=s-c,h=i.call(f,Math.ceil(l/f.length));return h.length>l&&(h=h.slice(0,l)),u?h+a:a+h}},function(t,n,e){var r=e(34),i=e(15),o=e(48).f;t.exports=function(t){return function(n){for(var e,u=i(n),a=r(u),c=a.length,f=0,s=[];c>f;)o.call(u,e=a[f++])&&s.push(t?[e,u[e]]:u[e]);return s}}},function(t,n,e){var r=e(43),i=e(128);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},function(t,n,e){var r=e(40);t.exports=function(t,n){var e=[];return r(t,!1,e.push,e,n),e}},function(t,n){t.exports=Math.scale||function(t,n,e,r,i){return 0===arguments.length||t!=t||n!=n||e!=e||r!=r||i!=i?NaN:t===1/0||t===-1/0?t:(t-n)*(i-r)/(e-n)+r}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,n){var e=[],r=!0,i=!1,o=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}return e}(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}();var o=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}return i(t,[{key:"updateGraph",value:function(t,n){var e=this,r=t.activations,i=t.weights,o=t.renderData,u=t.previousColumn;o&&o.updatePrevious&&t.renderData.updatePrevious({weights:i,values:n}),u&&u.length>0&&u.forEach(function(t){e.updateGraph(t,r)})}},{key:"update",value:function(t){if(t){var n=t.model,e=t.output;this.updateGraph(n,e)}}},{key:"layerUpdate",value:function(t){var n=t.activations,e=t.weights,r=t.renderData;r&&r.updatePrevious&&t.renderData.updatePrevious({weights:e,previousValues:n})}},{key:"parseLayer",value:function(t){var n=this,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=t.shape,o=t.name,u=t.weights,a=t.activations,c=t.previousColumn,f=this.groupIndex++,s=e.values,l=e.rightsideNodes,h=e.rightsideWeights,d=e.layerIndex,p=e.offset,v=e.line,g=[],y=[],b=r(i,4),_=(b[0],b[1]),m=b[2],x=void 0===m?1:m,w=b[3],M=void 0===w?1:w,S=h&&h[1]?h[1].values:void 0;this.columnSizes[d]||(this.columnSizes[d]=0);for(var E=0;E<_*x*M;E++){var k=o+"-node-"+E,A={id:k,layerName:o,groupIndex:f,layerIndex:d,indexInLayer:g.length,indexInColumn:this.columnSizes[d],value:s?s[E]:void 0,bias:S?S[E]:"",line:v||0};this.columnSizes[d]++,this.nodesMap[k]=A,g.push(A)}var N=[],T=[];if(c&&c.length>0){var P=0;c.forEach(function(t,e){var r=n.parseLayer(t,{layerIndex:d-1,rightsideNodes:g,rightsideWeights:u,values:a,offset:P,line:e}),i=r.nodes,o=r.links;P+=i.length,N=N.concat(i),T=T.concat(o)})}if(this.config.renderLinks&&h){var O=h[2];l.forEach(function(t,e){g.forEach(function(r,i){if(O||e===i+p){var o={id:n.links.length,source:r,target:t,weight:O?O.values[i*e]:1};n.links.push(o),y.push(o)}})})}return t.renderData={nodes:g,updatePrevious:function(t){var e=t.previousValues,r=t.weights,i=t.values,o=r[1],u=r[2];o&&g.forEach(function(t,e){t.bias=o.values[e],n.updateBias(t)}),u&&T.forEach(function(t,e){n.updateLink(t,u.values[e])}),e&&N.forEach(function(t,r){n.updateNode(t,e[r])}),i&&g.forEach(function(t,e){n.updateNode(t,i[e])}),u&&T.forEach(function(t,n){t.weight=u.values[n]})}},{nodes:g,links:y}}},{key:"initialize",value:function(t){var n=t.layerMap,e=t.model,r=t.output;this.groupIndex=0,this.nodesMap={},this.columnSizes={},this.links=[];var i=Object.keys(n).length;this.parseLayer(e,{layerIndex:i,values:r})}},{key:"updateNode",value:function(t,n){}},{key:"updateBias",value:function(t){}},{key:"updateLink",value:function(t,n){}},{key:"renderNode",value:function(t){}}]),t}();n.default=o,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t},i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}();e(132);var o=c(e(333)),u=c(e(334)),a=c(e(335));function c(t){return t&&t.__esModule?t:{default:t}}var f=function(){function t(n,e){var i=this;if(function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),!n)throw new Error("please provide a tensorflow.js model");var c=r({},u.default,e);this.config=c;var f,s=a.default[c.renderer];if(!s)throw new Error("Missing renderer: "+c.renderer+". Options: [d3, canvas]");this.element=document.createElement(c.tag),c.appendImmediately&&document.body.appendChild(this.element),this.renderer=new s(this.element,c),c.predictCallback=function(){i.renderer.update(i.model)},c.hookCallback=function(t){i.renderer.layerUpdate(t)},(f=regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,o.default)(n,c);case 2:i.model=t.sent,i.renderer.initialize(i.model);case 4:case"end":return t.stop()}},t,i)}),function(){var t=f.apply(this,arguments);return new Promise(function(n,e){return function r(i,o){try{var u=t[i](o),a=u.value}catch(t){return void e(t)}if(!u.done)return Promise.resolve(a).then(function(t){r("next",t)},function(t){r("throw",t)});n(a)}("next")})})()}return i(t,[{key:"getDOMElement",value:function(){return this.element}}]),t}();n.default=f,t.exports=n.default},function(t,n,e){"use strict";(function(t){if(e(133),e(329),e(330),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var n="defineProperty";function r(t,e,r){t[e]||Object[n](t,e,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&r(Array,t,Function.call.bind([][t]))})}).call(this,e(93))},function(t,n,e){e(134),e(136),e(137),e(138),e(139),e(140),e(141),e(142),e(143),e(144),e(145),e(146),e(147),e(148),e(149),e(150),e(151),e(152),e(153),e(154),e(155),e(156),e(157),e(158),e(159),e(160),e(161),e(162),e(163),e(164),e(165),e(166),e(167),e(168),e(169),e(170),e(171),e(172),e(173),e(174),e(175),e(176),e(177),e(178),e(179),e(180),e(181),e(182),e(183),e(184),e(185),e(186),e(187),e(188),e(189),e(190),e(191),e(192),e(193),e(194),e(195),e(196),e(197),e(198),e(199),e(200),e(201),e(202),e(203),e(204),e(205),e(206),e(207),e(208),e(209),e(210),e(211),e(213),e(214),e(216),e(217),e(218),e(219),e(220),e(221),e(222),e(224),e(225),e(226),e(227),e(228),e(229),e(230),e(231),e(232),e(233),e(234),e(235),e(236),e(86),e(237),e(113),e(238),e(114),e(239),e(240),e(241),e(242),e(243),e(117),e(119),e(120),e(244),e(245),e(246),e(247),e(248),e(249),e(250),e(251),e(252),e(253),e(254),e(255),e(256),e(257),e(258),e(259),e(260),e(261),e(262),e(263),e(264),e(265),e(266),e(267),e(268),e(269),e(270),e(271),e(272),e(273),e(274),e(275),e(276),e(277),e(278),e(279),e(280),e(281),e(282),e(283),e(284),e(285),e(286),e(287),e(288),e(289),e(290),e(291),e(292),e(293),e(294),e(295),e(296),e(297),e(298),e(299),e(300),e(301),e(302),e(303),e(304),e(305),e(306),e(307),e(308),e(309),e(310),e(311),e(312),e(313),e(314),e(315),e(316),e(317),e(318),e(319),e(320),e(321),e(322),e(323),e(324),e(325),e(326),e(327),e(328),t.exports=e(18)},function(t,n,e){"use strict";var r=e(2),i=e(14),o=e(7),u=e(0),a=e(12),c=e(29).KEY,f=e(3),s=e(51),l=e(42),h=e(33),d=e(5),p=e(95),v=e(67),g=e(135),y=e(54),b=e(1),_=e(4),m=e(15),x=e(23),w=e(32),M=e(36),S=e(98),E=e(16),k=e(8),A=e(34),N=E.f,T=k.f,P=S.f,O=r.Symbol,C=r.JSON,R=C&&C.stringify,I=d("_hidden"),F=d("toPrimitive"),j={}.propertyIsEnumerable,L=s("symbol-registry"),z=s("symbols"),D=s("op-symbols"),U=Object.prototype,B="function"==typeof O,q=r.QObject,Y=!q||!q.prototype||!q.prototype.findChild,W=o&&f(function(){return 7!=M(T({},"a",{get:function(){return T(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=N(U,n);r&&delete U[n],T(t,n,e),r&&t!==U&&T(U,n,r)}:T,G=function(t){var n=z[t]=M(O.prototype);return n._k=t,n},V=B&&"symbol"==typeof O.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof O},H=function(t,n,e){return t===U&&H(D,n,e),b(t),n=x(n,!0),b(e),i(z,n)?(e.enumerable?(i(t,I)&&t[I][n]&&(t[I][n]=!1),e=M(e,{enumerable:w(0,!1)})):(i(t,I)||T(t,I,w(1,{})),t[I][n]=!0),W(t,n,e)):T(t,n,e)},X=function(t,n){b(t);for(var e,r=g(n=m(n)),i=0,o=r.length;o>i;)H(t,e=r[i++],n[e]);return t},$=function(t){var n=j.call(this,t=x(t,!0));return!(this===U&&i(z,t)&&!i(D,t))&&(!(n||!i(this,t)||!i(z,t)||i(this,I)&&this[I][t])||n)},Z=function(t,n){if(t=m(t),n=x(n,!0),t!==U||!i(z,n)||i(D,n)){var e=N(t,n);return!e||!i(z,n)||i(t,I)&&t[I][n]||(e.enumerable=!0),e}},J=function(t){for(var n,e=P(m(t)),r=[],o=0;e.length>o;)i(z,n=e[o++])||n==I||n==c||r.push(n);return r},Q=function(t){for(var n,e=t===U,r=P(e?D:m(t)),o=[],u=0;r.length>u;)!i(z,n=r[u++])||e&&!i(U,n)||o.push(z[n]);return o};B||(a((O=function(){if(this instanceof O)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===U&&n.call(D,e),i(this,I)&&i(this[I],t)&&(this[I][t]=!1),W(this,t,w(1,e))};return o&&Y&&W(U,t,{configurable:!0,set:n}),G(t)}).prototype,"toString",function(){return this._k}),E.f=Z,k.f=H,e(37).f=S.f=J,e(48).f=$,e(53).f=Q,o&&!e(30)&&a(U,"propertyIsEnumerable",$,!0),p.f=function(t){return G(d(t))}),u(u.G+u.W+u.F*!B,{Symbol:O});for(var K="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;K.length>tt;)d(K[tt++]);for(var nt=A(d.store),et=0;nt.length>et;)v(nt[et++]);u(u.S+u.F*!B,"Symbol",{for:function(t){return i(L,t+="")?L[t]:L[t]=O(t)},keyFor:function(t){if(!V(t))throw TypeError(t+" is not a symbol!");for(var n in L)if(L[n]===t)return n},useSetter:function(){Y=!0},useSimple:function(){Y=!1}}),u(u.S+u.F*!B,"Object",{create:function(t,n){return void 0===n?M(t):X(M(t),n)},defineProperty:H,defineProperties:X,getOwnPropertyDescriptor:Z,getOwnPropertyNames:J,getOwnPropertySymbols:Q}),C&&u(u.S+u.F*(!B||f(function(){var t=O();return"[null]"!=R([t])||"{}"!=R({a:t})||"{}"!=R(Object(t))})),"JSON",{stringify:function(t){for(var n,e,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(e=n=r[1],(_(n)||void 0!==t)&&!V(t))return y(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!V(n))return n}),r[1]=n,R.apply(C,r)}}),O.prototype[F]||e(11)(O.prototype,F,O.prototype.valueOf),l(O,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,n,e){var r=e(34),i=e(53),o=e(48);t.exports=function(t){var n=r(t),e=i.f;if(e)for(var u,a=e(t),c=o.f,f=0;a.length>f;)c.call(t,u=a[f++])&&n.push(u);return n}},function(t,n,e){var r=e(0);r(r.S,"Object",{create:e(36)})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(7),"Object",{defineProperty:e(8).f})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(7),"Object",{defineProperties:e(97)})},function(t,n,e){var r=e(15),i=e(16).f;e(25)("getOwnPropertyDescriptor",function(){return function(t,n){return i(r(t),n)}})},function(t,n,e){var r=e(9),i=e(17);e(25)("getPrototypeOf",function(){return function(t){return i(r(t))}})},function(t,n,e){var r=e(9),i=e(34);e(25)("keys",function(){return function(t){return i(r(t))}})},function(t,n,e){e(25)("getOwnPropertyNames",function(){return e(98).f})},function(t,n,e){var r=e(4),i=e(29).onFreeze;e(25)("freeze",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(4),i=e(29).onFreeze;e(25)("seal",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(4),i=e(29).onFreeze;e(25)("preventExtensions",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(4);e(25)("isFrozen",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(4);e(25)("isSealed",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(4);e(25)("isExtensible",function(t){return function(n){return!!r(n)&&(!t||t(n))}})},function(t,n,e){var r=e(0);r(r.S+r.F,"Object",{assign:e(99)})},function(t,n,e){var r=e(0);r(r.S,"Object",{is:e(100)})},function(t,n,e){var r=e(0);r(r.S,"Object",{setPrototypeOf:e(71).set})},function(t,n,e){"use strict";var r=e(43),i={};i[e(5)("toStringTag")]="z",i+""!="[object z]"&&e(12)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){var r=e(0);r(r.P,"Function",{bind:e(101)})},function(t,n,e){var r=e(8).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||e(7)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},function(t,n,e){"use strict";var r=e(4),i=e(17),o=e(5)("hasInstance"),u=Function.prototype;o in u||e(8).f(u,o,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,e){var r=e(0),i=e(103);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(t,n,e){var r=e(0),i=e(104);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(t,n,e){"use strict";var r=e(2),i=e(14),o=e(20),u=e(73),a=e(23),c=e(3),f=e(37).f,s=e(16).f,l=e(8).f,h=e(44).trim,d=r.Number,p=d,v=d.prototype,g="Number"==o(e(36)(v)),y="trim"in String.prototype,b=function(t){var n=a(t,!1);if("string"==typeof n&&n.length>2){var e,r,i,o=(n=y?n.trim():h(n,3)).charCodeAt(0);if(43===o||45===o){if(88===(e=n.charCodeAt(2))||120===e)return NaN}else if(48===o){switch(n.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+n}for(var u,c=n.slice(2),f=0,s=c.length;f<s;f++)if((u=c.charCodeAt(f))<48||u>i)return NaN;return parseInt(c,r)}}return+n};if(!d(" 0o1")||!d("0b1")||d("+0x1")){d=function(t){var n=arguments.length<1?0:t,e=this;return e instanceof d&&(g?c(function(){v.valueOf.call(e)}):"Number"!=o(e))?u(new p(b(n)),e,d):b(n)};for(var _,m=e(7)?f(p):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;m.length>x;x++)i(p,_=m[x])&&!i(d,_)&&l(d,_,s(p,_));d.prototype=v,v.constructor=d,e(12)(r,"Number",d)}},function(t,n,e){"use strict";var r=e(0),i=e(21),o=e(105),u=e(74),a=1..toFixed,c=Math.floor,f=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",l=function(t,n){for(var e=-1,r=n;++e<6;)r+=t*f[e],f[e]=r%1e7,r=c(r/1e7)},h=function(t){for(var n=6,e=0;--n>=0;)e+=f[n],f[n]=c(e/t),e=e%t*1e7},d=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==f[t]){var e=String(f[t]);n=""===n?e:n+u.call("0",7-e.length)+e}return n},p=function(t,n,e){return 0===n?e:n%2==1?p(t,n-1,e*t):p(t*t,n/2,e)};r(r.P+r.F*(!!a&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!e(3)(function(){a.call({})})),"Number",{toFixed:function(t){var n,e,r,a,c=o(this,s),f=i(t),v="",g="0";if(f<0||f>20)throw RangeError(s);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(v="-",c=-c),c>1e-21)if(e=(n=function(t){for(var n=0,e=t;e>=4096;)n+=12,e/=4096;for(;e>=2;)n+=1,e/=2;return n}(c*p(2,69,1))-69)<0?c*p(2,-n,1):c/p(2,n,1),e*=4503599627370496,(n=52-n)>0){for(l(0,e),r=f;r>=7;)l(1e7,0),r-=7;for(l(p(10,r,1),0),r=n-1;r>=23;)h(1<<23),r-=23;h(1<<r),l(1,1),h(2),g=d()}else l(0,e),l(1<<-n,0),g=d()+u.call("0",f);return g=f>0?v+((a=g.length)<=f?"0."+u.call("0",f-a)+g:g.slice(0,a-f)+"."+g.slice(a-f)):v+g}})},function(t,n,e){"use strict";var r=e(0),i=e(3),o=e(105),u=1..toPrecision;r(r.P+r.F*(i(function(){return"1"!==u.call(1,void 0)})||!i(function(){u.call({})})),"Number",{toPrecision:function(t){var n=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,e){var r=e(0),i=e(2).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{isInteger:e(106)})},function(t,n,e){var r=e(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,e){var r=e(0),i=e(106),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},function(t,n,e){var r=e(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,e){var r=e(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,e){var r=e(0),i=e(104);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,n,e){var r=e(0),i=e(103);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,n,e){var r=e(0),i=e(107),o=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},function(t,n,e){var r=e(0),i=Math.asinh;r(r.S+r.F*!(i&&1/i(0)>0),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},function(t,n,e){var r=e(0),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,e){var r=e(0),i=e(75);r(r.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,e){var r=e(0),i=Math.exp;r(r.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,n,e){var r=e(0),i=e(76);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,n,e){var r=e(0);r(r.S,"Math",{fround:e(108)})},function(t,n,e){var r=e(0),i=Math.abs;r(r.S,"Math",{hypot:function(t,n){for(var e,r,o=0,u=0,a=arguments.length,c=0;u<a;)c<(e=i(arguments[u++]))?(o=o*(r=c/e)*r+1,c=e):o+=e>0?(r=e/c)*r:e;return c===1/0?1/0:c*Math.sqrt(o)}})},function(t,n,e){var r=e(0),i=Math.imul;r(r.S+r.F*e(3)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r;return 0|i*o+((65535&e>>>16)*o+i*(65535&r>>>16)<<16>>>0)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log1p:e(107)})},function(t,n,e){var r=e(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,e){var r=e(0);r(r.S,"Math",{sign:e(75)})},function(t,n,e){var r=e(0),i=e(76),o=Math.exp;r(r.S+r.F*e(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},function(t,n,e){var r=e(0),i=e(76),o=Math.exp;r(r.S,"Math",{tanh:function(t){var n=i(t=+t),e=i(-t);return n==1/0?1:e==1/0?-1:(n-e)/(o(t)+o(-t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,n,e){var r=e(0),i=e(35),o=String.fromCharCode,u=String.fromCodePoint;r(r.S+r.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var n,e=[],r=arguments.length,u=0;r>u;){if(n=+arguments[u++],i(n,1114111)!==n)throw RangeError(n+" is not a valid code point");e.push(n<65536?o(n):o(55296+((n-=65536)>>10),n%1024+56320))}return e.join("")}})},function(t,n,e){var r=e(0),i=e(15),o=e(6);r(r.S,"String",{raw:function(t){for(var n=i(t.raw),e=o(n.length),r=arguments.length,u=[],a=0;e>a;)u.push(String(n[a++])),a<r&&u.push(String(arguments[a]));return u.join("")}})},function(t,n,e){"use strict";e(44)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){"use strict";var r=e(55)(!0);e(77)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){"use strict";var r=e(0),i=e(55)(!1);r(r.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,n,e){"use strict";var r=e(0),i=e(6),o=e(79),u="".endsWith;r(r.P+r.F*e(80)("endsWith"),"String",{endsWith:function(t){var n=o(this,t,"endsWith"),e=arguments.length>1?arguments[1]:void 0,r=i(n.length),a=void 0===e?r:Math.min(i(e),r),c=String(t);return u?u.call(n,c,a):n.slice(a-c.length,a)===c}})},function(t,n,e){"use strict";var r=e(0),i=e(79);r(r.P+r.F*e(80)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(0);r(r.P,"String",{repeat:e(74)})},function(t,n,e){"use strict";var r=e(0),i=e(6),o=e(79),u="".startsWith;r(r.P+r.F*e(80)("startsWith"),"String",{startsWith:function(t){var n=o(this,t,"startsWith"),e=i(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),r=String(t);return u?u.call(n,r,e):n.slice(e,e+r.length)===r}})},function(t,n,e){"use strict";e(13)("anchor",function(t){return function(n){return t(this,"a","name",n)}})},function(t,n,e){"use strict";e(13)("big",function(t){return function(){return t(this,"big","","")}})},function(t,n,e){"use strict";e(13)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,n,e){"use strict";e(13)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,n,e){"use strict";e(13)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,n,e){"use strict";e(13)("fontcolor",function(t){return function(n){return t(this,"font","color",n)}})},function(t,n,e){"use strict";e(13)("fontsize",function(t){return function(n){return t(this,"font","size",n)}})},function(t,n,e){"use strict";e(13)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,n,e){"use strict";e(13)("link",function(t){return function(n){return t(this,"a","href",n)}})},function(t,n,e){"use strict";e(13)("small",function(t){return function(){return t(this,"small","","")}})},function(t,n,e){"use strict";e(13)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,n,e){"use strict";e(13)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,n,e){"use strict";e(13)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,n,e){var r=e(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(23);r(r.P+r.F*e(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=i(this),e=o(n);return"number"!=typeof e||isFinite(e)?n.toISOString():null}})},function(t,n,e){var r=e(0),i=e(212);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,n,e){"use strict";var r=e(3),i=Date.prototype.getTime,o=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!r(function(){o.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),e=t.getUTCMilliseconds(),r=n<0?"-":n>9999?"+":"";return r+("00000"+Math.abs(n)).slice(r?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(e>99?e:"0"+u(e))+"Z"}:o},function(t,n,e){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(12)(r,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,n,e){var r=e(5)("toPrimitive"),i=Date.prototype;r in i||e(11)(i,r,e(215))},function(t,n,e){"use strict";var r=e(1),i=e(23);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!=t)}},function(t,n,e){var r=e(0);r(r.S,"Array",{isArray:e(54)})},function(t,n,e){"use strict";var r=e(19),i=e(0),o=e(9),u=e(109),a=e(81),c=e(6),f=e(82),s=e(83);i(i.S+i.F*!e(57)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,i,l,h=o(t),d="function"==typeof this?this:Array,p=arguments.length,v=p>1?arguments[1]:void 0,g=void 0!==v,y=0,b=s(h);if(g&&(v=r(v,p>2?arguments[2]:void 0,2)),null==b||d==Array&&a(b))for(e=new d(n=c(h.length));n>y;y++)f(e,y,g?v(h[y],y):h[y]);else for(l=b.call(h),e=new d;!(i=l.next()).done;y++)f(e,y,g?u(l,v,[i.value,y],!0):i.value);return e.length=y,e}})},function(t,n,e){"use strict";var r=e(0),i=e(82);r(r.S+r.F*e(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,e=new("function"==typeof this?this:Array)(n);n>t;)i(e,t,arguments[t++]);return e.length=n,e}})},function(t,n,e){"use strict";var r=e(0),i=e(15),o=[].join;r(r.P+r.F*(e(47)!=Object||!e(22)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},function(t,n,e){"use strict";var r=e(0),i=e(70),o=e(20),u=e(35),a=e(6),c=[].slice;r(r.P+r.F*e(3)(function(){i&&c.call(i)}),"Array",{slice:function(t,n){var e=a(this.length),r=o(this);if(n=void 0===n?e:n,"Array"==r)return c.call(this,t,n);for(var i=u(t,e),f=u(n,e),s=a(f-i),l=new Array(s),h=0;h<s;h++)l[h]="String"==r?this.charAt(i+h):this[i+h];return l}})},function(t,n,e){"use strict";var r=e(0),i=e(10),o=e(9),u=e(3),a=[].sort,c=[1,2,3];r(r.P+r.F*(u(function(){c.sort(void 0)})||!u(function(){c.sort(null)})||!e(22)(a)),"Array",{sort:function(t){return void 0===t?a.call(o(this)):a.call(o(this),i(t))}})},function(t,n,e){"use strict";var r=e(0),i=e(26)(0),o=e(22)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,n,e){var r=e(4),i=e(54),o=e(5)("species");t.exports=function(t){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)||(n=void 0),r(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){"use strict";var r=e(0),i=e(26)(1);r(r.P+r.F*!e(22)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(26)(2);r(r.P+r.F*!e(22)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(26)(3);r(r.P+r.F*!e(22)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(26)(4);r(r.P+r.F*!e(22)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(110);r(r.P+r.F*!e(22)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,n,e){"use strict";var r=e(0),i=e(110);r(r.P+r.F*!e(22)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,n,e){"use strict";var r=e(0),i=e(52)(!1),o=[].indexOf,u=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!e(22)(o)),"Array",{indexOf:function(t){return u?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(15),o=e(21),u=e(6),a=[].lastIndexOf,c=!!a&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(c||!e(22)(a)),"Array",{lastIndexOf:function(t){if(c)return a.apply(this,arguments)||0;var n=i(this),e=u(n.length),r=e-1;for(arguments.length>1&&(r=Math.min(r,o(arguments[1]))),r<0&&(r=e+r);r>=0;r--)if(r in n&&n[r]===t)return r||0;return-1}})},function(t,n,e){var r=e(0);r(r.P,"Array",{copyWithin:e(111)}),e(31)("copyWithin")},function(t,n,e){var r=e(0);r(r.P,"Array",{fill:e(85)}),e(31)("fill")},function(t,n,e){"use strict";var r=e(0),i=e(26)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),r(r.P+r.F*o,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(31)("find")},function(t,n,e){"use strict";var r=e(0),i=e(26)(6),o="findIndex",u=!0;o in[]&&Array(1)[o](function(){u=!1}),r(r.P+r.F*u,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(31)(o)},function(t,n,e){e(38)("Array")},function(t,n,e){var r=e(2),i=e(73),o=e(8).f,u=e(37).f,a=e(56),c=e(49),f=r.RegExp,s=f,l=f.prototype,h=/a/g,d=/a/g,p=new f(h)!==h;if(e(7)&&(!p||e(3)(function(){return d[e(5)("match")]=!1,f(h)!=h||f(d)==d||"/a/i"!=f(h,"i")}))){f=function(t,n){var e=this instanceof f,r=a(t),o=void 0===n;return!e&&r&&t.constructor===f&&o?t:i(p?new s(r&&!o?t.source:t,n):s((r=t instanceof f)?t.source:t,r&&o?c.call(t):n),e?this:l,f)};for(var v=function(t){t in f||o(f,t,{configurable:!0,get:function(){return s[t]},set:function(n){s[t]=n}})},g=u(s),y=0;g.length>y;)v(g[y++]);l.constructor=f,f.prototype=l,e(12)(r,"RegExp",f)}e(38)("RegExp")},function(t,n,e){"use strict";e(114);var r=e(1),i=e(49),o=e(7),u=/./.toString,a=function(t){e(12)(RegExp.prototype,"toString",t,!0)};e(3)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?a(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=u.name&&a(function(){return u.call(this)})},function(t,n,e){"use strict";var r=e(1),i=e(6),o=e(88),u=e(58);e(59)("match",1,function(t,n,e,a){return[function(e){var r=t(this),i=null==e?void 0:e[n];return void 0!==i?i.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=a(e,t,this);if(n.done)return n.value;var c=r(t),f=String(this);if(!c.global)return u(c,f);var s=c.unicode;c.lastIndex=0;for(var l,h=[],d=0;null!==(l=u(c,f));){var p=String(l[0]);h[d]=p,""===p&&(c.lastIndex=o(f,i(c.lastIndex),s)),d++}return 0===d?null:h}]})},function(t,n,e){"use strict";var r=e(1),i=e(9),o=e(6),u=e(21),a=e(88),c=e(58),f=Math.max,s=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,d=/\$([$&`']|\d\d?)/g;e(59)("replace",2,function(t,n,e,p){return[function(r,i){var o=t(this),u=null==r?void 0:r[n];return void 0!==u?u.call(r,o,i):e.call(String(o),r,i)},function(t,n){var i=p(e,t,this,n);if(i.done)return i.value;var l=r(t),h=String(this),d="function"==typeof n;d||(n=String(n));var g=l.global;if(g){var y=l.unicode;l.lastIndex=0}for(var b=[];;){var _=c(l,h);if(null===_)break;if(b.push(_),!g)break;""===String(_[0])&&(l.lastIndex=a(h,o(l.lastIndex),y))}for(var m,x="",w=0,M=0;M<b.length;M++){_=b[M];for(var S=String(_[0]),E=f(s(u(_.index),h.length),0),k=[],A=1;A<_.length;A++)k.push(void 0===(m=_[A])?m:String(m));var N=_.groups;if(d){var T=[S].concat(k,E,h);void 0!==N&&T.push(N);var P=String(n.apply(void 0,T))}else P=v(S,h,E,k,N,n);E>=w&&(x+=h.slice(w,E)+P,w=E+S.length)}return x+h.slice(w)}];function v(t,n,r,o,u,a){var c=r+t.length,f=o.length,s=d;return void 0!==u&&(u=i(u),s=h),e.call(a,s,function(e,i){var a;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(c);case"<":a=u[i.slice(1,-1)];break;default:var s=+i;if(0===s)return e;if(s>f){var h=l(s/10);return 0===h?e:h<=f?void 0===o[h-1]?i.charAt(1):o[h-1]+i.charAt(1):e}a=o[s-1]}return void 0===a?"":a})}})},function(t,n,e){"use strict";var r=e(1),i=e(100),o=e(58);e(59)("search",1,function(t,n,e,u){return[function(e){var r=t(this),i=null==e?void 0:e[n];return void 0!==i?i.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=u(e,t,this);if(n.done)return n.value;var a=r(t),c=String(this),f=a.lastIndex;i(f,0)||(a.lastIndex=0);var s=o(a,c);return i(a.lastIndex,f)||(a.lastIndex=f),null===s?-1:s.index}]})},function(t,n,e){"use strict";var r=e(56),i=e(1),o=e(50),u=e(88),a=e(6),c=e(58),f=e(87),s=e(3),l=Math.min,h=[].push,d=!s(function(){RegExp(4294967295,"y")});e(59)("split",2,function(t,n,e,s){var p;return p="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var i=String(this);if(void 0===t&&0===n)return[];if(!r(t))return e.call(i,t,n);for(var o,u,a,c=[],s=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,d=void 0===n?4294967295:n>>>0,p=new RegExp(t.source,s+"g");(o=f.call(p,i))&&!((u=p.lastIndex)>l&&(c.push(i.slice(l,o.index)),o.length>1&&o.index<i.length&&h.apply(c,o.slice(1)),a=o[0].length,l=u,c.length>=d));)p.lastIndex===o.index&&p.lastIndex++;return l===i.length?!a&&p.test("")||c.push(""):c.push(i.slice(l)),c.length>d?c.slice(0,d):c}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,r){var i=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,i,r):p.call(String(i),e,r)},function(t,n){var r=s(p,t,this,n,p!==e);if(r.done)return r.value;var f=i(t),h=String(this),v=o(f,RegExp),g=f.unicode,y=(f.ignoreCase?"i":"")+(f.multiline?"m":"")+(f.unicode?"u":"")+(d?"y":"g"),b=new v(d?f:"^(?:"+f.source+")",y),_=void 0===n?4294967295:n>>>0;if(0===_)return[];if(0===h.length)return null===c(b,h)?[h]:[];for(var m=0,x=0,w=[];x<h.length;){b.lastIndex=d?x:0;var M,S=c(b,d?h:h.slice(x));if(null===S||(M=l(a(b.lastIndex+(d?0:x)),h.length))===m)x=u(h,x,g);else{if(w.push(h.slice(m,x)),w.length===_)return w;for(var E=1;E<=S.length-1;E++)if(w.push(S[E]),w.length===_)return w;x=m=M}}return w.push(h.slice(m)),w}]})},function(t,n,e){"use strict";var r,i,o,u,a=e(30),c=e(2),f=e(19),s=e(43),l=e(0),h=e(4),d=e(10),p=e(39),v=e(40),g=e(50),y=e(89).set,b=e(90)(),_=e(91),m=e(115),x=e(60),w=e(116),M=c.TypeError,S=c.process,E=S&&S.versions,k=E&&E.v8||"",A=c.Promise,N="process"==s(S),T=function(){},P=i=_.f,O=!!function(){try{var t=A.resolve(1),n=(t.constructor={})[e(5)("species")]=function(t){t(T,T)};return(N||"function"==typeof PromiseRejectionEvent)&&t.then(T)instanceof n&&0!==k.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(t){}}(),C=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},R=function(t,n){if(!t._n){t._n=!0;var e=t._c;b(function(){for(var r=t._v,i=1==t._s,o=0,u=function(n){var e,o,u,a=i?n.ok:n.fail,c=n.resolve,f=n.reject,s=n.domain;try{a?(i||(2==t._h&&j(t),t._h=1),!0===a?e=r:(s&&s.enter(),e=a(r),s&&(s.exit(),u=!0)),e===n.promise?f(M("Promise-chain cycle")):(o=C(e))?o.call(e,c,f):c(e)):f(r)}catch(t){s&&!u&&s.exit(),f(t)}};e.length>o;)u(e[o++]);t._c=[],t._n=!1,n&&!t._h&&I(t)})}},I=function(t){y.call(c,function(){var n,e,r,i=t._v,o=F(t);if(o&&(n=m(function(){N?S.emit("unhandledRejection",i,t):(e=c.onunhandledrejection)?e({promise:t,reason:i}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=N||F(t)?2:1),t._a=void 0,o&&n.e)throw n.v})},F=function(t){return 1!==t._h&&0===(t._a||t._c).length},j=function(t){y.call(c,function(){var n;N?S.emit("rejectionHandled",t):(n=c.onrejectionhandled)&&n({promise:t,reason:t._v})})},L=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),R(n,!0))},z=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw M("Promise can't be resolved itself");(n=C(t))?b(function(){var r={_w:e,_d:!1};try{n.call(t,f(z,r,1),f(L,r,1))}catch(t){L.call(r,t)}}):(e._v=t,e._s=1,R(e,!1))}catch(t){L.call({_w:e,_d:!1},t)}}};O||(A=function(t){p(this,A,"Promise","_h"),d(t),r.call(this);try{t(f(z,this,1),f(L,this,1))}catch(t){L.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(41)(A.prototype,{then:function(t,n){var e=P(g(this,A));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=N?S.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&R(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=f(z,t,1),this.reject=f(L,t,1)},_.f=P=function(t){return t===A||t===u?new o(t):i(t)}),l(l.G+l.W+l.F*!O,{Promise:A}),e(42)(A,"Promise"),e(38)("Promise"),u=e(18).Promise,l(l.S+l.F*!O,"Promise",{reject:function(t){var n=P(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(a||!O),"Promise",{resolve:function(t){return w(a&&this===u?A:this,t)}}),l(l.S+l.F*!(O&&e(57)(function(t){A.all(t).catch(T)})),"Promise",{all:function(t){var n=this,e=P(n),r=e.resolve,i=e.reject,o=m(function(){var e=[],o=0,u=1;v(t,!1,function(t){var a=o++,c=!1;e.push(void 0),u++,n.resolve(t).then(function(t){c||(c=!0,e[a]=t,--u||r(e))},i)}),--u||r(e)});return o.e&&i(o.v),e.promise},race:function(t){var n=this,e=P(n),r=e.reject,i=m(function(){v(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return i.e&&r(i.v),e.promise}})},function(t,n,e){"use strict";var r=e(121),i=e(46);e(61)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,n,e){"use strict";var r=e(0),i=e(62),o=e(92),u=e(1),a=e(35),c=e(6),f=e(4),s=e(2).ArrayBuffer,l=e(50),h=o.ArrayBuffer,d=o.DataView,p=i.ABV&&s.isView,v=h.prototype.slice,g=i.VIEW;r(r.G+r.W+r.F*(s!==h),{ArrayBuffer:h}),r(r.S+r.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return p&&p(t)||f(t)&&g in t}}),r(r.P+r.U+r.F*e(3)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,n){if(void 0!==v&&void 0===n)return v.call(u(this),t);for(var e=u(this).byteLength,r=a(t,e),i=a(void 0===n?e:n,e),o=new(l(this,h))(c(i-r)),f=new d(this),s=new d(o),p=0;r<i;)s.setUint8(p++,f.getUint8(r++));return o}}),e(38)("ArrayBuffer")},function(t,n,e){var r=e(0);r(r.G+r.W+r.F*!e(62).ABV,{DataView:e(92).DataView})},function(t,n,e){e(27)("Int8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}},!0)},function(t,n,e){e(27)("Int16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Uint16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Int32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Uint32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Float32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Float64",8,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){var r=e(0),i=e(10),o=e(1),u=(e(2).Reflect||{}).apply,a=Function.apply;r(r.S+r.F*!e(3)(function(){u(function(){})}),"Reflect",{apply:function(t,n,e){var r=i(t),c=o(e);return u?u(r,n,c):a.call(r,n,c)}})},function(t,n,e){var r=e(0),i=e(36),o=e(10),u=e(1),a=e(4),c=e(3),f=e(101),s=(e(2).Reflect||{}).construct,l=c(function(){function t(){}return!(s(function(){},[],t)instanceof t)}),h=!c(function(){s(function(){})});r(r.S+r.F*(l||h),"Reflect",{construct:function(t,n){o(t),u(n);var e=arguments.length<3?t:o(arguments[2]);if(h&&!l)return s(t,n,e);if(t==e){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var r=[null];return r.push.apply(r,n),new(f.apply(t,r))}var c=e.prototype,d=i(a(c)?c:Object.prototype),p=Function.apply.call(t,d,n);return a(p)?p:d}})},function(t,n,e){var r=e(8),i=e(0),o=e(1),u=e(23);i(i.S+i.F*e(3)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,e){o(t),n=u(n,!0),o(e);try{return r.f(t,n,e),!0}catch(t){return!1}}})},function(t,n,e){var r=e(0),i=e(16).f,o=e(1);r(r.S,"Reflect",{deleteProperty:function(t,n){var e=i(o(t),n);return!(e&&!e.configurable)&&delete t[n]}})},function(t,n,e){"use strict";var r=e(0),i=e(1),o=function(t){this._t=i(t),this._i=0;var n,e=this._k=[];for(n in t)e.push(n)};e(78)(o,"Object",function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new o(t)}})},function(t,n,e){var r=e(16),i=e(17),o=e(14),u=e(0),a=e(4),c=e(1);u(u.S,"Reflect",{get:function t(n,e){var u,f,s=arguments.length<3?n:arguments[2];return c(n)===s?n[e]:(u=r.f(n,e))?o(u,"value")?u.value:void 0!==u.get?u.get.call(s):void 0:a(f=i(n))?t(f,e,s):void 0}})},function(t,n,e){var r=e(16),i=e(0),o=e(1);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return r.f(o(t),n)}})},function(t,n,e){var r=e(0),i=e(17),o=e(1);r(r.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,e){var r=e(0),i=e(1),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{ownKeys:e(123)})},function(t,n,e){var r=e(0),i=e(1),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},function(t,n,e){var r=e(8),i=e(16),o=e(17),u=e(14),a=e(0),c=e(32),f=e(1),s=e(4);a(a.S,"Reflect",{set:function t(n,e,a){var l,h,d=arguments.length<4?n:arguments[3],p=i.f(f(n),e);if(!p){if(s(h=o(n)))return t(h,e,a,d);p=c(0)}if(u(p,"value")){if(!1===p.writable||!s(d))return!1;if(l=i.f(d,e)){if(l.get||l.set||!1===l.writable)return!1;l.value=a,r.f(d,e,l)}else r.f(d,e,c(0,a));return!0}return void 0!==p.set&&(p.set.call(d,a),!0)}})},function(t,n,e){var r=e(0),i=e(71);i&&r(r.S,"Reflect",{setPrototypeOf:function(t,n){i.check(t,n);try{return i.set(t,n),!0}catch(t){return!1}}})},function(t,n,e){"use strict";var r=e(0),i=e(52)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(31)("includes")},function(t,n,e){"use strict";var r=e(0),i=e(124),o=e(9),u=e(6),a=e(10),c=e(84);r(r.P,"Array",{flatMap:function(t){var n,e,r=o(this);return a(t),n=u(r.length),e=c(r,0),i(e,r,r,n,0,1,t,arguments[1]),e}}),e(31)("flatMap")},function(t,n,e){"use strict";var r=e(0),i=e(124),o=e(9),u=e(6),a=e(21),c=e(84);r(r.P,"Array",{flatten:function(){var t=arguments[0],n=o(this),e=u(n.length),r=c(n,0);return i(r,n,n,e,0,void 0===t?1:a(t)),r}}),e(31)("flatten")},function(t,n,e){"use strict";var r=e(0),i=e(55)(!0);r(r.P,"String",{at:function(t){return i(this,t)}})},function(t,n,e){"use strict";var r=e(0),i=e(125),o=e(60);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,n,e){"use strict";var r=e(0),i=e(125),o=e(60);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,n,e){"use strict";e(44)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,n,e){"use strict";e(44)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,n,e){"use strict";var r=e(0),i=e(24),o=e(6),u=e(56),a=e(49),c=RegExp.prototype,f=function(t,n){this._r=t,this._s=n};e(78)(f,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(i(this),!u(t))throw TypeError(t+" is not a regexp!");var n=String(this),e="flags"in c?String(t.flags):a.call(t),r=new RegExp(t.source,~e.indexOf("g")?e:"g"+e);return r.lastIndex=o(t.lastIndex),new f(r,n)}})},function(t,n,e){e(67)("asyncIterator")},function(t,n,e){e(67)("observable")},function(t,n,e){var r=e(0),i=e(123),o=e(15),u=e(16),a=e(82);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,e,r=o(t),c=u.f,f=i(r),s={},l=0;f.length>l;)void 0!==(e=c(r,n=f[l++]))&&a(s,n,e);return s}})},function(t,n,e){var r=e(0),i=e(126)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},function(t,n,e){var r=e(0),i=e(126)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(10),u=e(8);e(7)&&r(r.P+e(63),"Object",{__defineGetter__:function(t,n){u.f(i(this),t,{get:o(n),enumerable:!0,configurable:!0})}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(10),u=e(8);e(7)&&r(r.P+e(63),"Object",{__defineSetter__:function(t,n){u.f(i(this),t,{set:o(n),enumerable:!0,configurable:!0})}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(23),u=e(17),a=e(16).f;e(7)&&r(r.P+e(63),"Object",{__lookupGetter__:function(t){var n,e=i(this),r=o(t,!0);do{if(n=a(e,r))return n.get}while(e=u(e))}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(23),u=e(17),a=e(16).f;e(7)&&r(r.P+e(63),"Object",{__lookupSetter__:function(t){var n,e=i(this),r=o(t,!0);do{if(n=a(e,r))return n.set}while(e=u(e))}})},function(t,n,e){var r=e(0);r(r.P+r.R,"Map",{toJSON:e(127)("Map")})},function(t,n,e){var r=e(0);r(r.P+r.R,"Set",{toJSON:e(127)("Set")})},function(t,n,e){e(64)("Map")},function(t,n,e){e(64)("Set")},function(t,n,e){e(64)("WeakMap")},function(t,n,e){e(64)("WeakSet")},function(t,n,e){e(65)("Map")},function(t,n,e){e(65)("Set")},function(t,n,e){e(65)("WeakMap")},function(t,n,e){e(65)("WeakSet")},function(t,n,e){var r=e(0);r(r.G,{global:e(2)})},function(t,n,e){var r=e(0);r(r.S,"System",{global:e(2)})},function(t,n,e){var r=e(0),i=e(20);r(r.S,"Error",{isError:function(t){return"Error"===i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clamp:function(t,n,e){return Math.min(e,Math.max(n,t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,n,e){var r=e(0),i=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*i}})},function(t,n,e){var r=e(0),i=e(129),o=e(108);r(r.S,"Math",{fscale:function(t,n,e,r,u){return o(i(t,n,e,r,u))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{iaddh:function(t,n,e,r){var i=t>>>0,o=e>>>0;return(n>>>0)+(r>>>0)+((i&o|(i|o)&~(i+o>>>0))>>>31)|0}})},function(t,n,e){var r=e(0);r(r.S,"Math",{isubh:function(t,n,e,r){var i=t>>>0,o=e>>>0;return(n>>>0)-(r>>>0)-((~i&o|~(i^o)&i-o>>>0)>>>31)|0}})},function(t,n,e){var r=e(0);r(r.S,"Math",{imulh:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r,u=e>>16,a=r>>16,c=(u*o>>>0)+(i*o>>>16);return u*a+(c>>16)+((i*a>>>0)+(65535&c)>>16)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,n,e){var r=e(0),i=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*i}})},function(t,n,e){var r=e(0);r(r.S,"Math",{scale:e(129)})},function(t,n,e){var r=e(0);r(r.S,"Math",{umulh:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r,u=e>>>16,a=r>>>16,c=(u*o>>>0)+(i*o>>>16);return u*a+(c>>>16)+((i*a>>>0)+(65535&c)>>>16)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,n,e){"use strict";var r=e(0),i=e(18),o=e(2),u=e(50),a=e(116);r(r.P+r.R,"Promise",{finally:function(t){var n=u(this,i.Promise||o.Promise),e="function"==typeof t;return this.then(e?function(e){return a(n,t()).then(function(){return e})}:t,e?function(e){return a(n,t()).then(function(){throw e})}:t)}})},function(t,n,e){"use strict";var r=e(0),i=e(91),o=e(115);r(r.S,"Promise",{try:function(t){var n=i.f(this),e=o(t);return(e.e?n.reject:n.resolve)(e.v),n.promise}})},function(t,n,e){var r=e(28),i=e(1),o=r.key,u=r.set;r.exp({defineMetadata:function(t,n,e,r){u(t,n,i(e),o(r))}})},function(t,n,e){var r=e(28),i=e(1),o=r.key,u=r.map,a=r.store;r.exp({deleteMetadata:function(t,n){var e=arguments.length<3?void 0:o(arguments[2]),r=u(i(n),e,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var c=a.get(n);return c.delete(e),!!c.size||a.delete(n)}})},function(t,n,e){var r=e(28),i=e(1),o=e(17),u=r.has,a=r.get,c=r.key,f=function(t,n,e){if(u(t,n,e))return a(t,n,e);var r=o(n);return null!==r?f(t,r,e):void 0};r.exp({getMetadata:function(t,n){return f(t,i(n),arguments.length<3?void 0:c(arguments[2]))}})},function(t,n,e){var r=e(119),i=e(128),o=e(28),u=e(1),a=e(17),c=o.keys,f=o.key,s=function(t,n){var e=c(t,n),o=a(t);if(null===o)return e;var u=s(o,n);return u.length?e.length?i(new r(e.concat(u))):u:e};o.exp({getMetadataKeys:function(t){return s(u(t),arguments.length<2?void 0:f(arguments[1]))}})},function(t,n,e){var r=e(28),i=e(1),o=r.get,u=r.key;r.exp({getOwnMetadata:function(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},function(t,n,e){var r=e(28),i=e(1),o=r.keys,u=r.key;r.exp({getOwnMetadataKeys:function(t){return o(i(t),arguments.length<2?void 0:u(arguments[1]))}})},function(t,n,e){var r=e(28),i=e(1),o=e(17),u=r.has,a=r.key,c=function(t,n,e){if(u(t,n,e))return!0;var r=o(n);return null!==r&&c(t,r,e)};r.exp({hasMetadata:function(t,n){return c(t,i(n),arguments.length<3?void 0:a(arguments[2]))}})},function(t,n,e){var r=e(28),i=e(1),o=r.has,u=r.key;r.exp({hasOwnMetadata:function(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},function(t,n,e){var r=e(28),i=e(1),o=e(10),u=r.key,a=r.set;r.exp({metadata:function(t,n){return function(e,r){a(t,n,(void 0!==r?i:o)(e),u(r))}}})},function(t,n,e){var r=e(0),i=e(90)(),o=e(2).process,u="process"==e(20)(o);r(r.G,{asap:function(t){var n=u&&o.domain;i(n?n.bind(t):t)}})},function(t,n,e){"use strict";var r=e(0),i=e(2),o=e(18),u=e(90)(),a=e(5)("observable"),c=e(10),f=e(1),s=e(39),l=e(41),h=e(11),d=e(40),p=d.RETURN,v=function(t){return null==t?void 0:c(t)},g=function(t){var n=t._c;n&&(t._c=void 0,n())},y=function(t){return void 0===t._o},b=function(t){y(t)||(t._o=void 0,g(t))},_=function(t,n){f(t),this._c=void 0,this._o=t,t=new m(this);try{var e=n(t),r=e;null!=e&&("function"==typeof e.unsubscribe?e=function(){r.unsubscribe()}:c(e),this._c=e)}catch(n){return void t.error(n)}y(this)&&g(this)};_.prototype=l({},{unsubscribe:function(){b(this)}});var m=function(t){this._s=t};m.prototype=l({},{next:function(t){var n=this._s;if(!y(n)){var e=n._o;try{var r=v(e.next);if(r)return r.call(e,t)}catch(t){try{b(n)}finally{throw t}}}},error:function(t){var n=this._s;if(y(n))throw t;var e=n._o;n._o=void 0;try{var r=v(e.error);if(!r)throw t;t=r.call(e,t)}catch(t){try{g(n)}finally{throw t}}return g(n),t},complete:function(t){var n=this._s;if(!y(n)){var e=n._o;n._o=void 0;try{var r=v(e.complete);t=r?r.call(e,t):void 0}catch(t){try{g(n)}finally{throw t}}return g(n),t}}});var x=function(t){s(this,x,"Observable","_f")._f=c(t)};l(x.prototype,{subscribe:function(t){return new _(t,this._f)},forEach:function(t){var n=this;return new(o.Promise||i.Promise)(function(e,r){c(t);var i=n.subscribe({next:function(n){try{return t(n)}catch(t){r(t),i.unsubscribe()}},error:r,complete:e})})}}),l(x,{from:function(t){var n="function"==typeof this?this:x,e=v(f(t)[a]);if(e){var r=f(e.call(t));return r.constructor===n?r:new n(function(t){return r.subscribe(t)})}return new n(function(n){var e=!1;return u(function(){if(!e){try{if(d(t,!1,function(t){if(n.next(t),e)return p})===p)return}catch(t){if(e)throw t;return void n.error(t)}n.complete()}}),function(){e=!0}})},of:function(){for(var t=0,n=arguments.length,e=new Array(n);t<n;)e[t]=arguments[t++];return new("function"==typeof this?this:x)(function(t){var n=!1;return u(function(){if(!n){for(var r=0;r<e.length;++r)if(t.next(e[r]),n)return;t.complete()}}),function(){n=!0}})}}),h(x.prototype,a,function(){return this}),r(r.G,{Observable:x}),e(38)("Observable")},function(t,n,e){var r=e(2),i=e(0),o=e(60),u=[].slice,a=/MSIE .\./.test(o),c=function(t){return function(n,e){var r=arguments.length>2,i=!!r&&u.call(arguments,2);return t(r?function(){("function"==typeof n?n:Function(n)).apply(this,i)}:n,e)}};i(i.G+i.B+i.F*a,{setTimeout:c(r.setTimeout),setInterval:c(r.setInterval)})},function(t,n,e){var r=e(0),i=e(89);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,n,e){for(var r=e(86),i=e(34),o=e(12),u=e(2),a=e(11),c=e(45),f=e(5),s=f("iterator"),l=f("toStringTag"),h=c.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},p=i(d),v=0;v<p.length;v++){var g,y=p[v],b=d[y],_=u[y],m=_&&_.prototype;if(m&&(m[s]||a(m,s,h),m[l]||a(m,l,y),c[y]=h,b))for(g in r)m[g]||o(m,g,r[g],!0)}},function(t,n,e){(function(n){!function(n){"use strict";var e,r=Object.prototype,i=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},u=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag",f="object"==typeof t,s=n.regeneratorRuntime;if(s)f&&(t.exports=s);else{(s=n.regeneratorRuntime=f?t.exports:{}).wrap=m;var l="suspendedStart",h="suspendedYield",d="executing",p="completed",v={},g={};g[u]=function(){return this};var y=Object.getPrototypeOf,b=y&&y(y(O([])));b&&b!==r&&i.call(b,u)&&(g=b);var _=S.prototype=w.prototype=Object.create(g);M.prototype=_.constructor=S,S.constructor=M,S[c]=M.displayName="GeneratorFunction",s.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===M||"GeneratorFunction"===(n.displayName||n.name))},s.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,S):(t.__proto__=S,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(_),t},s.awrap=function(t){return{__await:t}},E(k.prototype),k.prototype[a]=function(){return this},s.AsyncIterator=k,s.async=function(t,n,e,r){var i=new k(m(t,n,e,r));return s.isGeneratorFunction(n)?i:i.next().then(function(t){return t.done?t.value:i.next()})},E(_),_[c]="Generator",_[u]=function(){return this},_.toString=function(){return"[object Generator]"},s.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},s.values=O,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(r,i){return a.type="throw",a.arg=t,n.next=r,i&&(n.method="next",n.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var u=this.tryEntries[o],a=u.completion;if("root"===u.tryLoc)return r("end");if(u.tryLoc<=this.prev){var c=i.call(u,"catchLoc"),f=i.call(u,"finallyLoc");if(c&&f){if(this.prev<u.catchLoc)return r(u.catchLoc,!0);if(this.prev<u.finallyLoc)return r(u.finallyLoc)}else if(c){if(this.prev<u.catchLoc)return r(u.catchLoc,!0)}else{if(!f)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return r(u.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=n,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),v},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),T(e),v}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var i=r.arg;T(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:O(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}}}function m(t,n,e,r){var i=n&&n.prototype instanceof w?n:w,o=Object.create(i.prototype),u=new P(r||[]);return o._invoke=function(t,n,e){var r=l;return function(i,o){if(r===d)throw new Error("Generator is already running");if(r===p){if("throw"===i)throw o;return C()}for(e.method=i,e.arg=o;;){var u=e.delegate;if(u){var a=A(u,e);if(a){if(a===v)continue;return a}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=p,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=d;var c=x(t,n,e);if("normal"===c.type){if(r=e.done?p:h,c.arg===v)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(r=p,e.method="throw",e.arg=c.arg)}}}(t,e,u),o}function x(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}function w(){}function M(){}function S(){}function E(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function k(t){function e(n,r,o,u){var a=x(t[n],t,r);if("throw"!==a.type){var c=a.arg,f=c.value;return f&&"object"==typeof f&&i.call(f,"__await")?Promise.resolve(f.__await).then(function(t){e("next",t,o,u)},function(t){e("throw",t,o,u)}):Promise.resolve(f).then(function(t){c.value=t,o(c)},u)}u(a.arg)}var r;"object"==typeof n.process&&n.process.domain&&(e=n.process.domain.bind(e)),this._invoke=function(t,n){function i(){return new Promise(function(r,i){e(t,n,r,i)})}return r=r?r.then(i,i):i()}}function A(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,A(t,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=x(r,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,v;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function N(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function T(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(N,this),this.reset(!0)}function O(t){if(t){var n=t[u];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function n(){for(;++r<t.length;)if(i.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}return{next:C}}function C(){return{value:e,done:!0}}}("object"==typeof n?n:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,e(93))},function(t,n,e){e(331),t.exports=e(18).RegExp.escape},function(t,n,e){var r=e(0),i=e(332)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return i(t)}})},function(t,n){t.exports=function(t,n){var e=n===Object(n)?function(t){return n[t]}:n;return function(n){return String(n).replace(t,e)}}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,i=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t},o=(r=u(regeneratorRuntime.mark(function t(n,e){var r,o,c,f,s;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return c=function t(n,e){var i,c=this,f=n.name,s=n.input,l=n.inputs,h=n.shape,d=n.sourceLayer,p=d||{},v=p.getWeights,g=p.setCallHook,y=p.activation,b={previousColumn:[],name:f,shape:h,weights:{},getWeights:a,mapPosition:Object.keys(r.layerMap).length};if(r.layerMap[f]=b,r.layerArr.unshift(b),y){var _=y.getClassName();b.activation={name:_}}return g&&d.setCallHook((i=u(regeneratorRuntime.mark(function t(n){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return b.getWeights(),t.next=3,n[0].dataSync();case 3:b.activations=t.sent,o.hookCallback(b);case 5:case"end":return t.stop()}},t,c)})),function(t){return i.apply(this,arguments)})),v&&(b.getWeights=u(regeneratorRuntime.mark(function t(){var n,e,r,i,o;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,d.getWeights();case 2:n=t.sent,e=0;case 4:if(!(e<n.length)){t.next=16;break}return r=n[e],i=r.rankType,o=r.name,b.hasWeights=!0,t.t0=o,t.next=11,n[e].dataSync();case 11:t.t1=t.sent,b.weights[i]={name:t.t0,values:t.t1};case 13:e++,t.next=4;break;case 16:case"end":return t.stop()}},t,c)})),b.getWeights()),l?l.forEach(function(n){t(n,b.previousColumn)}):t(s,b.previousColumn),e&&e.push(b),b},r={layerMap:{},layerArr:[]},o=i({predictCallback:a,hookCallback:a},e),f=n.predict,n.predict=function(){for(var t=arguments.length,e=Array(t),i=0;i<t;i++)e[i]=arguments[i];var u=f.apply(n,e);return r.output=u.dataSync(),o.predictCallback(r),u},t.next=7,c(n.layers[n.layers.length-1].output);case 7:return r.model=t.sent,e.printStats&&(s=r.layerArr,console.log(new Array(10).join("-")),s.forEach(function(t){console.log("Layer: "+t.name)})),t.abrupt("return",r);case 10:case"end":return t.stop()}},t,this)})),function(t,n){return r.apply(this,arguments)});function u(t){return function(){var n=t.apply(this,arguments);return new Promise(function(t,e){return function r(i,o){try{var u=n[i](o),a=u.value}catch(t){return void e(t)}if(!u.done)return Promise.resolve(a).then(function(t){r("next",t)},function(t){r("throw",t)});t(a)}("next")})}}function a(){}n.default=o,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default={renderer:"canvas",width:900,height:600,tag:"div",appendImmediately:!0},t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=o(e(336)),i=o(e(337));function o(t){return t&&t.__esModule?t:{default:t}}n.default={d3:r.default,canvas:i.default},t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,i=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t},o=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),u=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}(e(338)),a=e(130),c=(r=a)&&r.__esModule?r:{default:r};var f={radius:15,renderLinks:!0,layer:{}},s=function(t){function n(t,e){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var r=function(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t,e));r.parentDom=t;var o=document.createElementNS("http://www.w3.org/2000/svg","svg");r.parentDom.appendChild(o),r.svg=r.root=u.select(o).attr("width",e.width).attr("height",e.height);var a=r.svg.append("g");return e.prepareRenderContext&&e.prepareRenderContext(a),r.zoom=u.zoom().on("zoom",function(){r.svg.attr("transform",u.event.transform)}),r.svg.append("rect").attr("width",e.width).attr("height",e.height).style("fill","transparent").style("pointer-events","all").call(r.zoom),r.svg=a,r.config=i({},f,e),r}return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}(n,c.default),o(n,[{key:"updateNode",value:function(t,n){t.valueTextElement&&(t.valueTextElement.innerHTML=n?n.toFixed(2):"N/A"),this.config.updateNode&&this.config.updateNode(t,n)}},{key:"updateBias",value:function(t){t.biasTextElement&&(t.biasTextElement.innerHTML=t.bias.toFixed(2))}},{key:"updateLink",value:function(t,n){t.dom&&u.select(t.dom).attr("stroke-width",Math.abs(n)).attr("stroke",n<0?"#FF0000":"#000000")}},{key:"update",value:function(t){this.config.onPredict&&this.config.onPredict(this.svg,t)}},{key:"initialize",value:function(t){var e=this;(function t(n,e,r){null===n&&(n=Function.prototype);var i=Object.getOwnPropertyDescriptor(n,e);if(void 0===i){var o=Object.getPrototypeOf(n);return null===o?void 0:t(o,e,r)}if("value"in i)return i.value;var u=i.get;return void 0!==u?u.call(r):void 0})(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"initialize",this).call(this,t);var r=u.scaleOrdinal(u.schemePastel1),o=Object.values(this.nodesMap).sort(function(t,n){return t.layerIndex-n.layerIndex}),a=0,c=0,f=0;o.forEach(function(t){var n=i({columns:1,padding:100,radius:e.config.radius||5},e.config.layer[t.layerName]);f!==t.layerIndex&&(f=t.layerIndex,a=c+n.padding);var r=Math.floor(e.columnSizes[t.layerIndex]/n.columns);t.y=e.config.height/2-r*n.radius*1.5+Math.floor(t.indexInColumn/n.columns)*n.radius*3,t.x=a+t.indexInLayer%n.columns*e.config.radius*4,c<t.x&&(c=t.x)});var s=this.simulation=u.forceSimulation(o),l=this.svg.append("g").attr("stroke","#000").selectAll("line").data(this.links).join("line").call(function(t){t.each(function(t,n,e){return t.dom=e[n]})}),h=this.svg.append("g").selectAll(".node").data(o).enter().append("g").attr("class","node").attr("id",function(t){return t.id}).join(".node").call(function(t){t.each(function(t,n,e){return t.dom=u.select(e[n])})});this.config.nodeRenderer?this.config.nodeRenderer({engine:"d3",node:h}):(h.append("circle").attr("r",this.config.radius).attr("fill",function(t){return r(t.groupIndex)}).attr("stroke","#000").attr("stroke-width","1px"),h.append("text").attr("stroke","#000").attr("stroke-width",.5).attr("font-size",6).attr("transform","translate(0, -"+1.2*this.config.radius+")").attr("text-anchor","middle").text(function(t){return t.biasTextElement=this,t.bias}),h.append("text").attr("stroke","#000").attr("stroke-width",.5).attr("font-size",6).attr("text-anchor","middle").attr("alignment-baseline","middle").text(function(t){return t.valueTextElement=this,t.value?t.value.toFixed(2):""})),s.on("tick",function(){l.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y}),h.attr("transform",function(t){return"translate("+t.x+", "+t.y+")"})})}}]),n}();n.default=s,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,i=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t},o=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),u=e(130),a=(r=u)&&r.__esModule?r:{default:r};var c={radius:1,layerPadding:20,layer:{}},f=function(t){function n(t,e){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var r=function(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t,e)),o=e.width,u=e.height,a=document.createElement("canvas");t.appendChild(a),a.setAttribute("width",o),a.setAttribute("height",u);var f=r.ctx=a.getContext("2d");return f.beginPath(),f.rect(0,0,o,u),f.fillStyle="#000",f.fill(),r.config=i({},c,e),r}return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}(n,a.default),o(n,[{key:"updateNode",value:function(t,n){t.render(n)}},{key:"updateBias",value:function(){}},{key:"initialize",value:function(t){var e=this;(function t(n,e,r){null===n&&(n=Function.prototype);var i=Object.getOwnPropertyDescriptor(n,e);if(void 0===i){var o=Object.getPrototypeOf(n);return null===o?void 0:t(o,e,r)}if("value"in i)return i.value;var u=i.get;return void 0!==u?u.call(r):void 0})(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"initialize",this).call(this,t);var r=Object.values(this.nodesMap).sort(function(t,n){return t.layerIndex-n.layerIndex}),o=0,u=0,a=0;r.forEach(function(t){var n=i({columns:1,getFillStyle:function(t){return"rgba(255, 255, 255, "+t/255+")"},radius:e.config.radius},e.config.layer[t.layerName]),r=n.radius;t.render=function(n){e.ctx.fillStyle="#000",e.ctx.beginPath(),e.ctx.arc(t.x,t.y,r,0,2*Math.PI),e.ctx.fill(),e.ctx.fillStyle=t.getFillStyle(n),e.ctx.beginPath(),e.ctx.arc(t.x,t.y,r,0,2*Math.PI),e.ctx.fill()},a!==t.layerIndex&&(a=t.layerIndex,o=u+e.config.layerPadding);var c=Math.floor(e.columnSizes[t.layerIndex]/n.columns);t.y=Math.floor(e.config.height/2-c*r*1.5+Math.floor(t.indexInColumn/n.columns)*r*3),t.x=Math.floor(o+t.indexInLayer%n.columns*r*3),t.radius=r,t.getFillStyle=n.getFillStyle,u<t.x&&(u=t.x)}),this.ctx.strokeStyle="rgba(255,255,255,1)",r.forEach(function(t){var n=t.x,r=t.y;e.ctx.beginPath(),e.ctx.arc(n,r,t.radius,0,2*Math.PI),e.ctx.stroke()})}}]),n}();n.default=f,t.exports=n.default},function(t,n,e){"use strict";e.r(n);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var o=i(r),u=o.right,a=o.left,c=u,f=function(t,n){null==n&&(n=s);for(var e=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);e<r;)o[e]=n(i,i=t[++e]);return o};function s(t,n){return[t,n]}var l=function(t,n,e){var r,i,o,u,a=t.length,c=n.length,f=new Array(a*c);for(null==e&&(e=s),r=o=0;r<a;++r)for(u=t[r],i=0;i<c;++i,++o)f[o]=e(u,n[i]);return f},h=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},d=function(t){return null===t?NaN:+t},p=function(t,n){var e,r,i=t.length,o=0,u=-1,a=0,c=0;if(null==n)for(;++u<i;)isNaN(e=d(t[u]))||(c+=(r=e-a)*(e-(a+=r/++o)));else for(;++u<i;)isNaN(e=d(n(t[u],u,t)))||(c+=(r=e-a)*(e-(a+=r/++o)));if(o>1)return c/(o-1)},v=function(t,n){var e=p(t,n);return e?Math.sqrt(e):e},g=function(t,n){var e,r,i,o=t.length,u=-1;if(null==n){for(;++u<o;)if(null!=(e=t[u])&&e>=e)for(r=i=e;++u<o;)null!=(e=t[u])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++u<o;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=i=e;++u<o;)null!=(e=n(t[u],u,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},y=Array.prototype,b=y.slice,_=y.map,m=function(t){return function(){return t}},x=function(t){return t},w=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o},M=Math.sqrt(50),S=Math.sqrt(10),E=Math.sqrt(2),k=function(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=A(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o};function A(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=M?10:o>=S?5:o>=E?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=M?10:o>=S?5:o>=E?2:1)}function N(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=M?i*=10:o>=S?i*=5:o>=E&&(i*=2),n<t?-i:i}var T=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},P=function(){var t=x,n=g,e=T;function r(r){var i,o,u=r.length,a=new Array(u);for(i=0;i<u;++i)a[i]=t(r[i],i,r);var f=n(a),s=f[0],l=f[1],h=e(a,s,l);Array.isArray(h)||(h=N(s,l,h),h=w(Math.ceil(s/h)*h,l,h));for(var d=h.length;h[0]<=s;)h.shift(),--d;for(;h[d-1]>l;)h.pop(),--d;var p,v=new Array(d+1);for(i=0;i<=d;++i)(p=v[i]=[]).x0=i>0?h[i-1]:s,p.x1=i<d?h[i]:l;for(i=0;i<u;++i)s<=(o=a[i])&&o<=l&&v[c(h,o,0,d)].push(r[i]);return v}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:m(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:m([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?m(b.call(t)):m(t),r):e},r},O=function(t,n,e){if(null==e&&(e=d),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),u=+e(t[o],o,t);return u+(+e(t[o+1],o+1,t)-u)*(i-o)}},C=function(t,n,e){return t=_.call(t,d).sort(r),Math.ceil((e-n)/(2*(O(t,.75)-O(t,.25))*Math.pow(t.length,-1/3)))},R=function(t,n,e){return Math.ceil((e-n)/(3.5*v(t)*Math.pow(t.length,-1/3)))},I=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},F=function(t,n){var e,r=t.length,i=r,o=-1,u=0;if(null==n)for(;++o<r;)isNaN(e=d(t[o]))?--i:u+=e;else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))?--i:u+=e;if(i)return u/i},j=function(t,n){var e,i=t.length,o=-1,u=[];if(null==n)for(;++o<i;)isNaN(e=d(t[o]))||u.push(e);else for(;++o<i;)isNaN(e=d(n(t[o],o,t)))||u.push(e);return O(u.sort(r),.5)},L=function(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e},z=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r},D=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r},U=function(t,n){if(e=t.length){var e,i,o=0,u=0,a=t[u];for(null==n&&(n=r);++o<e;)(n(i=t[o],a)<0||0!==n(a,a))&&(a=i,u=o);return 0===n(a,a)?u:void 0}},B=function(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t},q=function(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o},Y=function(t){if(!(i=t.length))return[];for(var n=-1,e=z(t,W),r=new Array(e);++n<e;)for(var i,o=-1,u=r[n]=new Array(i);++o<i;)u[o]=t[o][n];return r};function W(t){return t.length}var G=function(){return Y(arguments)},V=Array.prototype.slice,H=function(t){return t},X=1,$=2,Z=3,J=4,Q=1e-6;function K(t){return"translate("+(t+.5)+",0)"}function tt(t){return"translate(0,"+(t+.5)+")"}function nt(){return!this.__axis}function et(t,n){var e=[],r=null,i=null,o=6,u=6,a=3,c=t===X||t===J?-1:1,f=t===J||t===$?"x":"y",s=t===X||t===Z?K:tt;function l(l){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,d=null==i?n.tickFormat?n.tickFormat.apply(n,e):H:i,p=Math.max(o,0)+a,v=n.range(),g=+v[0]+.5,y=+v[v.length-1]+.5,b=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),_=l.selection?l.selection():l,m=_.selectAll(".domain").data([null]),x=_.selectAll(".tick").data(h,n).order(),w=x.exit(),M=x.enter().append("g").attr("class","tick"),S=x.select("line"),E=x.select("text");m=m.merge(m.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(M),S=S.merge(M.append("line").attr("stroke","currentColor").attr(f+"2",c*o)),E=E.merge(M.append("text").attr("fill","currentColor").attr(f,c*p).attr("dy",t===X?"0em":t===Z?"0.71em":"0.32em")),l!==_&&(m=m.transition(l),x=x.transition(l),S=S.transition(l),E=E.transition(l),w=w.transition(l).attr("opacity",Q).attr("transform",function(t){return isFinite(t=b(t))?s(t):this.getAttribute("transform")}),M.attr("opacity",Q).attr("transform",function(t){var n=this.parentNode.__axis;return s(n&&isFinite(n=n(t))?n:b(t))})),w.remove(),m.attr("d",t===J||t==$?u?"M"+c*u+","+g+"H0.5V"+y+"H"+c*u:"M0.5,"+g+"V"+y:u?"M"+g+","+c*u+"V0.5H"+y+"V"+c*u:"M"+g+",0.5H"+y),x.attr("opacity",1).attr("transform",function(t){return s(b(t))}),S.attr(f+"2",c*o),E.attr(f,c*p).text(d),_.filter(nt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===$?"start":t===J?"end":"middle"),_.each(function(){this.__axis=b})}return l.scale=function(t){return arguments.length?(n=t,l):n},l.ticks=function(){return e=V.call(arguments),l},l.tickArguments=function(t){return arguments.length?(e=null==t?[]:V.call(t),l):e.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:V.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(i=t,l):i},l.tickSize=function(t){return arguments.length?(o=u=+t,l):o},l.tickSizeInner=function(t){return arguments.length?(o=+t,l):o},l.tickSizeOuter=function(t){return arguments.length?(u=+t,l):u},l.tickPadding=function(t){return arguments.length?(a=+t,l):a},l}function rt(t){return et(X,t)}function it(t){return et($,t)}function ot(t){return et(Z,t)}function ut(t){return et(J,t)}var at={value:function(){}};function ct(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new ft(r)}function ft(t){this._=t}function st(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function lt(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=at,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}ft.prototype=ct.prototype={constructor:ft,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),u=-1,a=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++u<a;)if(e=(t=o[u]).type)i[e]=lt(i[e],t.name,n);else if(null==n)for(e in i)i[e]=lt(i[e],t.name,null);return this}for(;++u<a;)if((e=(t=o[u]).type)&&(e=st(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new ft(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var ht=ct,dt="http://www.w3.org/1999/xhtml",pt={svg:"http://www.w3.org/2000/svg",xhtml:dt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},vt=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),pt.hasOwnProperty(n)?{space:pt[n],local:t}:t};var gt=function(t){var n=vt(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===dt&&n.documentElement.namespaceURI===dt?n.createElement(t):n.createElementNS(e,t)}})(n)};function yt(){}var bt=function(t){return null==t?yt:function(){return this.querySelector(t)}};function _t(){return[]}var mt=function(t){return null==t?_t:function(){return this.querySelectorAll(t)}},xt=function(t){return function(){return this.matches(t)}},wt=function(t){return new Array(t.length)};function Mt(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}Mt.prototype={constructor:Mt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var St="$";function Et(t,n,e,r,i,o){for(var u,a=0,c=n.length,f=o.length;a<f;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new Mt(t,o[a]);for(;a<c;++a)(u=n[a])&&(i[a]=u)}function kt(t,n,e,r,i,o,u){var a,c,f,s={},l=n.length,h=o.length,d=new Array(l);for(a=0;a<l;++a)(c=n[a])&&(d[a]=f=St+u.call(c,c.__data__,a,n),f in s?i[a]=c:s[f]=c);for(a=0;a<h;++a)(c=s[f=St+u.call(t,o[a],a,o)])?(r[a]=c,c.__data__=o[a],s[f]=null):e[a]=new Mt(t,o[a]);for(a=0;a<l;++a)(c=n[a])&&s[d[a]]===c&&(i[a]=c)}function At(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var Nt=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Tt(t,n){return t.style.getPropertyValue(n)||Nt(t).getComputedStyle(t,null).getPropertyValue(n)}function Pt(t){return t.trim().split(/^|\s+/)}function Ot(t){return t.classList||new Ct(t)}function Ct(t){this._node=t,this._names=Pt(t.getAttribute("class")||"")}function Rt(t,n){for(var e=Ot(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function It(t,n){for(var e=Ot(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}Ct.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Ft(){this.textContent=""}function jt(){this.innerHTML=""}function Lt(){this.nextSibling&&this.parentNode.appendChild(this)}function zt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Dt(){return null}function Ut(){var t=this.parentNode;t&&t.removeChild(this)}function Bt(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function qt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Yt={},Wt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Yt={mouseenter:"mouseover",mouseleave:"mouseout"}));function Gt(t,n,e){return t=Vt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Vt(t,n,e){return function(r){var i=Wt;Wt=r;try{t.call(this,this.__data__,n,e)}finally{Wt=i}}}function Ht(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Xt(t,n,e){var r=Yt.hasOwnProperty(t.type)?Gt:Vt;return function(i,o,u){var a,c=this.__on,f=r(n,o,u);if(c)for(var s=0,l=c.length;s<l;++s)if((a=c[s]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=f,a.capture=e),void(a.value=n);this.addEventListener(t.type,f,e),a={type:t.type,name:t.name,value:n,listener:f,capture:e},c?c.push(a):this.__on=[a]}}function $t(t,n,e,r){var i=Wt;t.sourceEvent=Wt,Wt=t;try{return n.apply(e,r)}finally{Wt=i}}function Zt(t,n,e){var r=Nt(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var Jt=[null];function Qt(t,n){this._groups=t,this._parents=n}function Kt(){return new Qt([[document.documentElement]],Jt)}Qt.prototype=Kt.prototype={constructor:Qt,select:function(t){"function"!=typeof t&&(t=bt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],c=a.length,f=r[i]=new Array(c),s=0;s<c;++s)(o=a[s])&&(u=t.call(o,o.__data__,s,a))&&("__data__"in o&&(u.__data__=o.__data__),f[s]=u);return new Qt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=mt(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],c=a.length,f=0;f<c;++f)(u=a[f])&&(r.push(t.call(u,u.__data__,f,a)),i.push(u));return new Qt(r,i)},filter:function(t){"function"!=typeof t&&(t=xt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],f=0;f<a;++f)(o=u[f])&&t.call(o,o.__data__,f,u)&&c.push(o);return new Qt(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),s=-1,this.each(function(t){p[++s]=t}),p;var e,r=n?kt:Et,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),c=new Array(u),f=new Array(u),s=0;s<u;++s){var l=i[s],h=o[s],d=h.length,p=t.call(l,l&&l.__data__,s,i),v=p.length,g=c[s]=new Array(v),y=a[s]=new Array(v);r(l,h,g,y,f[s]=new Array(d),p,n);for(var b,_,m=0,x=0;m<v;++m)if(b=g[m]){for(m>=x&&(x=m+1);!(_=y[x])&&++x<v;);b._next=_||null}}return(a=new Qt(a,i))._enter=c,a._exit=f,a},enter:function(){return new Qt(this._enter||this._groups.map(wt),this._parents)},exit:function(){return new Qt(this._exit||this._groups.map(wt),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,f=n[a],s=e[a],l=f.length,h=u[a]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;a<r;++a)u[a]=n[a];return new Qt(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=At);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],c=a.length,f=i[o]=new Array(c),s=0;s<c;++s)(u=a[s])&&(f[s]=u);f.sort(n)}return new Qt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=vt(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):Tt(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=Pt(t+"");if(arguments.length<2){for(var r=Ot(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?Rt:It)(this,t)}}:n?function(t){return function(){Rt(this,t)}}:function(t){return function(){It(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?Ft:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?jt:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(Lt)},lower:function(){return this.each(zt)},append:function(t){var n="function"==typeof t?t:gt(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:gt(t),r=null==n?Dt:"function"==typeof n?n:bt(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(Ut)},clone:function(t){return this.select(t?qt:Bt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?Xt:Ht,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var c,f=0,s=a.length;f<s;++f)for(r=0,c=a[f];r<u;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return Zt(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return Zt(this,t,n)}})(t,n))}};var tn=Kt,nn=function(t){return"string"==typeof t?new Qt([[document.querySelector(t)]],[document.documentElement]):new Qt([[t]],Jt)},en=function(t){return nn(gt(t).call(document.documentElement))},rn=0;function on(){return new un}function un(){this._="@"+(++rn).toString(36)}un.prototype=on.prototype={constructor:un,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var an=function(){for(var t,n=Wt;t=n.sourceEvent;)n=t;return n},cn=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},fn=function(t){var n=an();return n.changedTouches&&(n=n.changedTouches[0]),cn(t,n)},sn=function(t){return"string"==typeof t?new Qt([document.querySelectorAll(t)],[document.documentElement]):new Qt([null==t?[]:t],Jt)},ln=function(t,n,e){arguments.length<3&&(e=n,n=an().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return cn(t,r);return null},hn=function(t,n){null==n&&(n=an().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=cn(t,n[e]);return i};function dn(){Wt.stopImmediatePropagation()}var pn=function(){Wt.preventDefault(),Wt.stopImmediatePropagation()},vn=function(t){var n=t.document.documentElement,e=nn(t).on("dragstart.drag",pn,!0);"onselectstart"in n?e.on("selectstart.drag",pn,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")};function gn(t,n){var e=t.document.documentElement,r=nn(t).on("dragstart.drag",null);n&&(r.on("click.drag",pn,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}var yn=function(t){return function(){return t}};function bn(t,n,e,r,i,o,u,a,c,f){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=a,this.dy=c,this._=f}function _n(){return!Wt.button}function mn(){return this.parentNode}function xn(t){return null==t?{x:Wt.x,y:Wt.y}:t}function wn(){return"ontouchstart"in this}bn.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Mn=function(){var t,n,e,r,i=_n,o=mn,u=xn,a=wn,c={},f=ht("start","drag","end"),s=0,l=0;function h(t){t.on("mousedown.drag",d).filter(a).on("touchstart.drag",g).on("touchmove.drag",y).on("touchend.drag touchcancel.drag",b).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){if(!r&&i.apply(this,arguments)){var u=_("mouse",o.apply(this,arguments),fn,this,arguments);u&&(nn(Wt.view).on("mousemove.drag",p,!0).on("mouseup.drag",v,!0),vn(Wt.view),dn(),e=!1,t=Wt.clientX,n=Wt.clientY,u("start"))}}function p(){if(pn(),!e){var r=Wt.clientX-t,i=Wt.clientY-n;e=r*r+i*i>l}c.mouse("drag")}function v(){nn(Wt.view).on("mousemove.drag mouseup.drag",null),gn(Wt.view,e),pn(),c.mouse("end")}function g(){if(i.apply(this,arguments)){var t,n,e=Wt.changedTouches,r=o.apply(this,arguments),u=e.length;for(t=0;t<u;++t)(n=_(e[t].identifier,r,ln,this,arguments))&&(dn(),n("start"))}}function y(){var t,n,e=Wt.changedTouches,r=e.length;for(t=0;t<r;++t)(n=c[e[t].identifier])&&(pn(),n("drag"))}function b(){var t,n,e=Wt.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout(function(){r=null},500),t=0;t<i;++t)(n=c[e[t].identifier])&&(dn(),n("end"))}function _(t,n,e,r,i){var o,a,l,d=e(n,t),p=f.copy();if($t(new bn(h,"beforestart",o,t,s,d[0],d[1],0,0,p),function(){return null!=(Wt.subject=o=u.apply(r,i))&&(a=o.x-d[0]||0,l=o.y-d[1]||0,!0)}))return function u(f){var v,g=d;switch(f){case"start":c[t]=u,v=s++;break;case"end":delete c[t],--s;case"drag":d=e(n,t),v=s}$t(new bn(h,f,o,t,v,d[0]+a,d[1]+l,d[0]-g[0],d[1]-g[1],p),p.apply,p,[f,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:yn(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:yn(t),h):o},h.subject=function(t){return arguments.length?(u="function"==typeof t?t:yn(t),h):u},h.touchable=function(t){return arguments.length?(a="function"==typeof t?t:yn(!!t),h):a},h.on=function(){var t=f.on.apply(f,arguments);return t===f?h:t},h.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,h):Math.sqrt(l)},h},Sn=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function En(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function kn(){}var An="\\s*([+-]?\\d+)\\s*",Nn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Tn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Pn=/^#([0-9a-f]{3})$/,On=/^#([0-9a-f]{6})$/,Cn=new RegExp("^rgb\\("+[An,An,An]+"\\)$"),Rn=new RegExp("^rgb\\("+[Tn,Tn,Tn]+"\\)$"),In=new RegExp("^rgba\\("+[An,An,An,Nn]+"\\)$"),Fn=new RegExp("^rgba\\("+[Tn,Tn,Tn,Nn]+"\\)$"),jn=new RegExp("^hsl\\("+[Nn,Tn,Tn]+"\\)$"),Ln=new RegExp("^hsla\\("+[Nn,Tn,Tn,Nn]+"\\)$"),zn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Dn(t){var n;return t=(t+"").trim().toLowerCase(),(n=Pn.exec(t))?new Wn((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=On.exec(t))?Un(parseInt(n[1],16)):(n=Cn.exec(t))?new Wn(n[1],n[2],n[3],1):(n=Rn.exec(t))?new Wn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=In.exec(t))?Bn(n[1],n[2],n[3],n[4]):(n=Fn.exec(t))?Bn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=jn.exec(t))?Vn(n[1],n[2]/100,n[3]/100,1):(n=Ln.exec(t))?Vn(n[1],n[2]/100,n[3]/100,n[4]):zn.hasOwnProperty(t)?Un(zn[t]):"transparent"===t?new Wn(NaN,NaN,NaN,0):null}function Un(t){return new Wn(t>>16&255,t>>8&255,255&t,1)}function Bn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Wn(t,n,e,r)}function qn(t){return t instanceof kn||(t=Dn(t)),t?new Wn((t=t.rgb()).r,t.g,t.b,t.opacity):new Wn}function Yn(t,n,e,r){return 1===arguments.length?qn(t):new Wn(t,n,e,null==r?1:r)}function Wn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Gn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Vn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Xn(t,n,e,r)}function Hn(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Xn)return new Xn(t.h,t.s,t.l,t.opacity);if(t instanceof kn||(t=Dn(t)),!t)return new Xn;if(t instanceof Xn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,c=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=c<.5?o+i:2-o-i,u*=60):a=c>0&&c<1?0:u,new Xn(u,a,c,t.opacity)}(t):new Xn(t,n,e,null==r?1:r)}function Xn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function $n(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}Sn(kn,Dn,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),Sn(Wn,Yn,En(kn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Wn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Wn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Gn(this.r)+Gn(this.g)+Gn(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Sn(Xn,Hn,En(kn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Xn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Xn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Wn($n(t>=240?t-240:t+120,i,r),$n(t,i,r),$n(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Zn=Math.PI/180,Jn=180/Math.PI,Qn=.96422,Kn=1,te=.82521,ne=4/29,ee=6/29,re=3*ee*ee,ie=ee*ee*ee;function oe(t){if(t instanceof ce)return new ce(t.l,t.a,t.b,t.opacity);if(t instanceof ge){if(isNaN(t.h))return new ce(t.l,0,0,t.opacity);var n=t.h*Zn;return new ce(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof Wn||(t=qn(t));var e,r,i=he(t.r),o=he(t.g),u=he(t.b),a=fe((.2225045*i+.7168786*o+.0606169*u)/Kn);return i===o&&o===u?e=r=a:(e=fe((.4360747*i+.3850649*o+.1430804*u)/Qn),r=fe((.0139322*i+.0971045*o+.7141733*u)/te)),new ce(116*a-16,500*(e-a),200*(a-r),t.opacity)}function ue(t,n){return new ce(t,0,0,null==n?1:n)}function ae(t,n,e,r){return 1===arguments.length?oe(t):new ce(t,n,e,null==r?1:r)}function ce(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function fe(t){return t>ie?Math.pow(t,1/3):t/re+ne}function se(t){return t>ee?t*t*t:re*(t-ne)}function le(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function he(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function de(t){if(t instanceof ge)return new ge(t.h,t.c,t.l,t.opacity);if(t instanceof ce||(t=oe(t)),0===t.a&&0===t.b)return new ge(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*Jn;return new ge(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function pe(t,n,e,r){return 1===arguments.length?de(t):new ge(e,n,t,null==r?1:r)}function ve(t,n,e,r){return 1===arguments.length?de(t):new ge(t,n,e,null==r?1:r)}function ge(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}Sn(ce,ae,En(kn,{brighter:function(t){return new ce(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new ce(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Wn(le(3.1338561*(n=Qn*se(n))-1.6168667*(t=Kn*se(t))-.4906146*(e=te*se(e))),le(-.9787684*n+1.9161415*t+.033454*e),le(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Sn(ge,ve,En(kn,{brighter:function(t){return new ge(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new ge(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return oe(this).rgb()}}));var ye=-.29227,be=-.90649,_e=1.97294,me=_e*be,xe=1.78277*_e,we=1.78277*ye- -.14861*be;function Me(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Se)return new Se(t.h,t.s,t.l,t.opacity);t instanceof Wn||(t=qn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(we*r+me*n-xe*e)/(we+me-xe),o=r-i,u=(_e*(e-i)-ye*o)/be,a=Math.sqrt(u*u+o*o)/(_e*i*(1-i)),c=a?Math.atan2(u,o)*Jn-120:NaN;return new Se(c<0?c+360:c,a,i,t.opacity)}(t):new Se(t,n,e,null==r?1:r)}function Se(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Ee(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}Sn(Se,Me,En(kn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Se(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Se(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Zn,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Wn(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(ye*r+be*i)),255*(n+e*(_e*r)),this.opacity)}}));var ke=function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return Ee((e-r/n)*n,u,i,o,a)}},Ae=function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return Ee((e-r/n)*n,i,o,u,a)}},Ne=function(t){return function(){return t}};function Te(t,n){return function(e){return t+e*n}}function Pe(t,n){var e=n-t;return e?Te(t,e>180||e<-180?e-360*Math.round(e/360):e):Ne(isNaN(t)?n:t)}function Oe(t){return 1==(t=+t)?Ce:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Ne(isNaN(n)?e:n)}}function Ce(t,n){var e=n-t;return e?Te(t,e):Ne(isNaN(t)?n:t)}var Re=function t(n){var e=Oe(n);function r(t,n){var r=e((t=Yn(t)).r,(n=Yn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=Ce(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function Ie(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=Yn(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}var Fe=Ie(ke),je=Ie(Ae),Le=function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),u=new Array(r);for(e=0;e<i;++e)o[e]=Xe(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}},ze=function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}},De=function(t,n){return n-=t=+t,function(e){return t+n*e}},Ue=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Xe(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},Be=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,qe=new RegExp(Be.source,"g");var Ye,We,Ge,Ve,He=function(t,n){var e,r,i,o=Be.lastIndex=qe.lastIndex=0,u=-1,a=[],c=[];for(t+="",n+="";(e=Be.exec(t))&&(r=qe.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,c.push({i:u,x:De(e,r)})),o=qe.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)a[(e=c[r]).i]=e.x(t);return a.join("")})},Xe=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?Ne(n):("number"===r?De:"string"===r?(e=Dn(n))?(n=e,Re):He:n instanceof Dn?Re:n instanceof Date?ze:Array.isArray(n)?Le:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Ue:De)(t,n)},$e=function(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}},Ze=function(t,n){var e=Pe(+t,+n);return function(t){var n=e(t);return n-360*Math.floor(n/360)}},Je=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},Qe=180/Math.PI,Ke={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},tr=function(t,n,e,r,i,o){var u,a,c;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,c/=a),t*r<n*e&&(t=-t,n=-n,c=-c,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Qe,skewX:Math.atan(c)*Qe,scaleX:u,scaleY:a}};function nr(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],c=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var c=u.push("translate(",null,n,null,e);a.push({i:c-4,x:De(t,i)},{i:c-2,x:De(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:De(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:De(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,c),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:De(t,e)},{i:a-2,x:De(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,c),o=u=null,function(t){for(var n,e=-1,r=c.length;++e<r;)a[(n=c[e]).i]=n.x(t);return a.join("")}}}var er=nr(function(t){return"none"===t?Ke:(Ye||(Ye=document.createElement("DIV"),We=document.documentElement,Ge=document.defaultView),Ye.style.transform=t,t=Ge.getComputedStyle(We.appendChild(Ye),null).getPropertyValue("transform"),We.removeChild(Ye),t=t.slice(7,-1).split(","),tr(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),rr=nr(function(t){return null==t?Ke:(Ve||(Ve=document.createElementNS("http://www.w3.org/2000/svg","g")),Ve.setAttribute("transform",t),(t=Ve.transform.baseVal.consolidate())?(t=t.matrix,tr(t.a,t.b,t.c,t.d,t.e,t.f)):Ke)},", ",")",")"),ir=Math.SQRT2;function or(t){return((t=Math.exp(t))+1/t)/2}var ur=function(t,n){var e,r,i=t[0],o=t[1],u=t[2],a=n[0],c=n[1],f=n[2],s=a-i,l=c-o,h=s*s+l*l;if(h<1e-12)r=Math.log(f/u)/ir,e=function(t){return[i+t*s,o+t*l,u*Math.exp(ir*t*r)]};else{var d=Math.sqrt(h),p=(f*f-u*u+4*h)/(2*u*2*d),v=(f*f-u*u-4*h)/(2*f*2*d),g=Math.log(Math.sqrt(p*p+1)-p),y=Math.log(Math.sqrt(v*v+1)-v);r=(y-g)/ir,e=function(t){var n,e=t*r,a=or(g),c=u/(2*d)*(a*(n=ir*e+g,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(g));return[i+c*s,o+c*l,u*a/or(ir*e+g)]}}return e.duration=1e3*r,e};function ar(t){return function(n,e){var r=t((n=Hn(n)).h,(e=Hn(e)).h),i=Ce(n.s,e.s),o=Ce(n.l,e.l),u=Ce(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}var cr=ar(Pe),fr=ar(Ce);function sr(t,n){var e=Ce((t=ae(t)).l,(n=ae(n)).l),r=Ce(t.a,n.a),i=Ce(t.b,n.b),o=Ce(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function lr(t){return function(n,e){var r=t((n=ve(n)).h,(e=ve(e)).h),i=Ce(n.c,e.c),o=Ce(n.l,e.l),u=Ce(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}var hr=lr(Pe),dr=lr(Ce);function pr(t){return function n(e){function r(n,r){var i=t((n=Me(n)).h,(r=Me(r)).h),o=Ce(n.s,r.s),u=Ce(n.l,r.l),a=Ce(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}var vr=pr(Pe),gr=pr(Ce);function yr(t,n){for(var e=0,r=n.length-1,i=n[0],o=new Array(r<0?0:r);e<r;)o[e]=t(i,i=n[++e]);return function(t){var n=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[n](t-n)}}var br,_r,mr=function(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e},xr=0,wr=0,Mr=0,Sr=1e3,Er=0,kr=0,Ar=0,Nr="object"==typeof performance&&performance.now?performance:Date,Tr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Pr(){return kr||(Tr(Or),kr=Nr.now()+Ar)}function Or(){kr=0}function Cr(){this._call=this._time=this._next=null}function Rr(t,n,e){var r=new Cr;return r.restart(t,n,e),r}function Ir(){Pr(),++xr;for(var t,n=br;n;)(t=kr-n._time)>=0&&n._call.call(null,t),n=n._next;--xr}function Fr(){kr=(Er=Nr.now())+Ar,xr=wr=0;try{Ir()}finally{xr=0,function(){var t,n,e=br,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:br=n);_r=t,Lr(r)}(),kr=0}}function jr(){var t=Nr.now(),n=t-Er;n>Sr&&(Ar-=n,Er=t)}function Lr(t){xr||(wr&&(wr=clearTimeout(wr)),t-kr>24?(t<1/0&&(wr=setTimeout(Fr,t-Nr.now()-Ar)),Mr&&(Mr=clearInterval(Mr))):(Mr||(Er=Nr.now(),Mr=setInterval(jr,Sr)),xr=1,Tr(Fr)))}Cr.prototype=Rr.prototype={constructor:Cr,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Pr():+e)+(null==n?0:+n),this._next||_r===this||(_r?_r._next=this:br=this,_r=this),this._call=t,this._time=e,Lr()},stop:function(){this._call&&(this._call=null,this._time=1/0,Lr())}};var zr=function(t,n,e){var r=new Cr;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},Dr=function(t,n,e){var r=new Cr,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?Pr():+e,r.restart(function o(u){u+=i,r.restart(o,i+=n,e),t(u)},n,e),r)},Ur=ht("start","end","cancel","interrupt"),Br=[],qr=0,Yr=1,Wr=2,Gr=3,Vr=4,Hr=5,Xr=6,$r=function(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var f,s,l,h;if(e.state!==Yr)return a();for(f in i)if((h=i[f]).name===e.name){if(h.state===Gr)return zr(o);h.state===Vr?(h.state=Xr,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[f]):+f<n&&(h.state=Xr,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[f])}if(zr(function(){e.state===Gr&&(e.state=Vr,e.timer.restart(u,e.delay,e.time),u(c))}),e.state=Wr,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Wr){for(e.state=Gr,r=new Array(l=e.tween.length),f=0,s=-1;f<l;++f)(h=e.tween[f].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=h);r.length=s+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=Hr,1),o=-1,u=r.length;++o<u;)r[o].call(t,i);e.state===Hr&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=Xr,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Rr(function(t){e.state=Yr,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:Ur,tween:Br,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:qr})};function Zr(t,n){var e=Qr(t,n);if(e.state>qr)throw new Error("too late; already scheduled");return e}function Jr(t,n){var e=Qr(t,n);if(e.state>Gr)throw new Error("too late; already running");return e}function Qr(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var Kr=function(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>Wr&&e.state<Hr,e.state=Xr,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}};function ti(t,n,e){var r=t._id;return t.each(function(){var t=Jr(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return Qr(t,r).value[n]}}var ni=function(t,n){var e;return("number"==typeof n?De:n instanceof Dn?Re:(e=Dn(n))?(n=e,Re):He)(t,n)};var ei=tn.prototype.constructor;function ri(t){return function(){this.style.removeProperty(t)}}var ii=0;function oi(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function ui(t){return tn().transition(t)}function ai(){return++ii}var ci=tn.prototype;function fi(t){return+t}function si(t){return t*t}function li(t){return t*(2-t)}function hi(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function di(t){return t*t*t}function pi(t){return--t*t*t+1}function vi(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}oi.prototype=ui.prototype={constructor:oi,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=bt(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,c,f=r[u],s=f.length,l=o[u]=new Array(s),h=0;h<s;++h)(a=f[h])&&(c=t.call(a,a.__data__,h,f))&&("__data__"in a&&(c.__data__=a.__data__),l[h]=c,$r(l[h],n,e,h,l,Qr(a,e)));return new oi(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=mt(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var c,f=r[a],s=f.length,l=0;l<s;++l)if(c=f[l]){for(var h,d=t.call(c,c.__data__,l,f),p=Qr(c,e),v=0,g=d.length;v<g;++v)(h=d[v])&&$r(h,n,e,v,d,p);o.push(d),u.push(c)}return new oi(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=xt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],f=0;f<a;++f)(o=u[f])&&t.call(o,o.__data__,f,u)&&c.push(o);return new oi(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,f=n[a],s=e[a],l=f.length,h=u[a]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;a<r;++a)u[a]=n[a];return new oi(u,this._parents,this._name,this._id)},selection:function(){return new ei(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=ai(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,f=0;f<c;++f)if(u=a[f]){var s=Qr(u,n);$r(u,t,e,f,a,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new oi(r,this._parents,t,e)},call:ci.call,nodes:ci.nodes,node:ci.node,size:ci.size,empty:ci.empty,each:ci.each,on:function(t,n){var e=this._id;return arguments.length<2?Qr(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?Zr:Jr;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}(e,t,n))},attr:function(t,n){var e=vt(t),r="transform"===e?rr:ni;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttributeNS(t.space,t.local))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttribute(t))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttribute(t)}})(e,r,ti(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttributeNS(t.space,t.local);return u===o?null:u===r?i:i=n(r=u,e)}}:function(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttribute(t);return u===o?null:u===r?i:i=n(r=u,e)}})(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=vt(t);return this.tween(e,(r.local?function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,i)),e}return i._value=n,i}:function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,i)),e}return i._value=n,i})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?er:ni;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Tt(this,t),u=(this.style.removeProperty(t),Tt(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,ri(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var u=Tt(this,t),a=e(this),c=a+"";return null==a&&(this.style.removeProperty(t),c=a=Tt(this,t)),u===c?null:u===r&&c===i?o:(i=c,o=n(r=u,a))}}(t,r,ti(this,"style."+t,n))).each(function(t,n){var e,r,i,o,u="style."+n,a="end."+u;return function(){var c=Jr(this,t),f=c.on,s=null==c.value[u]?o||(o=ri(n)):void 0;f===e&&i===s||(r=(e=f).copy()).on(a,i=s),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var u=Tt(this,t);return u===o?null:u===r?i:i=n(r=u,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,n,e){return function(r){this.style.setProperty(t,n(r),e)}}(t,o,e)),r}return o._value=n,o}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(ti(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Qr(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=Jr(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Jr(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},c=0,f=i.length;c<f;++c)if(i[c].name===n){i[c]=a;break}c===f&&i.push(a)}o.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Zr(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Zr(this,t).delay=n}})(n,t)):Qr(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Jr(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Jr(this,t).duration=n}})(n,t)):Qr(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){Jr(this,t).ease=n}}(n,t)):Qr(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise(function(o,u){var a={value:u},c={value:function(){0==--i&&o()}};e.each(function(){var e=Jr(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(c)),e.on=n})})}};var gi=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),yi=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),bi=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),_i=Math.PI,mi=_i/2;function xi(t){return 1-Math.cos(t*mi)}function wi(t){return Math.sin(t*mi)}function Mi(t){return(1-Math.cos(_i*t))/2}function Si(t){return Math.pow(2,10*t-10)}function Ei(t){return 1-Math.pow(2,-10*t)}function ki(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function Ai(t){return 1-Math.sqrt(1-t*t)}function Ni(t){return Math.sqrt(1- --t*t)}function Ti(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var Pi=4/11,Oi=6/11,Ci=8/11,Ri=.75,Ii=9/11,Fi=10/11,ji=.9375,Li=21/22,zi=63/64,Di=1/Pi/Pi;function Ui(t){return 1-Bi(1-t)}function Bi(t){return(t=+t)<Pi?Di*t*t:t<Ci?Di*(t-=Oi)*t+Ri:t<Fi?Di*(t-=Ii)*t+ji:Di*(t-=Li)*t+zi}function qi(t){return((t*=2)<=1?1-Bi(1-t):Bi(t-1)+1)/2}var Yi=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(1.70158),Wi=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),Gi=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158),Vi=2*Math.PI,Hi=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Vi);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*Vi)},i.period=function(e){return t(n,e)},i}(1,.3),Xi=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Vi);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*Vi)},i.period=function(e){return t(n,e)},i}(1,.3),$i=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Vi);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*Vi)},i.period=function(e){return t(n,e)},i}(1,.3),Zi={time:null,delay:0,duration:250,ease:vi};function Ji(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Zi.time=Pr(),Zi;return e}tn.prototype.interrupt=function(t){return this.each(function(){Kr(this,t)})},tn.prototype.transition=function(t){var n,e;t instanceof oi?(n=t._id,t=t._name):(n=ai(),(e=Zi).time=Pr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,f=0;f<c;++f)(u=a[f])&&$r(u,t,n,f,a,e||Ji(u,n));return new oi(r,this._parents,t,n)};var Qi=[null],Ki=function(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>Yr&&e.name===n)return new oi([[t]],Qi,n,+r);return null},to=function(t){return function(){return t}},no=function(t,n,e){this.target=t,this.type=n,this.selection=e};function eo(){Wt.stopImmediatePropagation()}var ro=function(){Wt.preventDefault(),Wt.stopImmediatePropagation()},io={name:"drag"},oo={name:"space"},uo={name:"handle"},ao={name:"center"},co={name:"x",handles:["e","w"].map(yo),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},fo={name:"y",handles:["n","s"].map(yo),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},so={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(yo),input:function(t){return t},output:function(t){return t}},lo={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},ho={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},po={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},vo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},go={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function yo(t){return{type:t}}function bo(){return!Wt.button}function _o(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function mo(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function xo(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function wo(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function Mo(){return ko(co)}function So(){return ko(fo)}var Eo=function(){return ko(so)};function ko(t){var n,e=_o,r=bo,i=ht(u,"start","brush","end"),o=6;function u(n){var e=n.property("__brush",l).selectAll(".overlay").data([yo("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",lo.overlay).merge(e).each(function(){var t=mo(this).extent;nn(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),n.selectAll(".selection").data([yo("selection")]).enter().append("rect").attr("class","selection").attr("cursor",lo.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,function(t){return t.type});r.exit().remove(),r.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return lo[t.type]}),n.each(a).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",s)}function a(){var t=nn(this),n=mo(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?n[1][0]-o/2:n[0][0]-o/2}).attr("y",function(t){return"s"===t.type[0]?n[1][1]-o/2:n[0][1]-o/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+o:o}).attr("height",function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+o:o})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,n){return t.__brush.emitter||new f(t,n)}function f(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function s(){if(Wt.touches){if(Wt.changedTouches.length<Wt.touches.length)return ro()}else if(n)return;if(r.apply(this,arguments)){var e,i,o,u,f,s,l,h,d,p,v,g,y,b=this,_=Wt.target.__data__.type,m="selection"===(Wt.metaKey?_="overlay":_)?io:Wt.altKey?ao:uo,x=t===fo?null:vo[_],w=t===co?null:go[_],M=mo(b),S=M.extent,E=M.selection,k=S[0][0],A=S[0][1],N=S[1][0],T=S[1][1],P=x&&w&&Wt.shiftKey,O=fn(b),C=O,R=c(b,arguments).beforestart();"overlay"===_?M.selection=E=[[e=t===fo?k:O[0],o=t===co?A:O[1]],[f=t===fo?N:e,l=t===co?T:o]]:(e=E[0][0],o=E[0][1],f=E[1][0],l=E[1][1]),i=e,u=o,s=f,h=l;var I=nn(b).attr("pointer-events","none"),F=I.selectAll(".overlay").attr("cursor",lo[_]);if(Wt.touches)I.on("touchmove.brush",L,!0).on("touchend.brush touchcancel.brush",D,!0);else{var j=nn(Wt.view).on("keydown.brush",function(){switch(Wt.keyCode){case 16:P=x&&w;break;case 18:m===uo&&(x&&(f=s-d*x,e=i+d*x),w&&(l=h-p*w,o=u+p*w),m=ao,z());break;case 32:m!==uo&&m!==ao||(x<0?f=s-d:x>0&&(e=i-d),w<0?l=h-p:w>0&&(o=u-p),m=oo,F.attr("cursor",lo.selection),z());break;default:return}ro()},!0).on("keyup.brush",function(){switch(Wt.keyCode){case 16:P&&(g=y=P=!1,z());break;case 18:m===ao&&(x<0?f=s:x>0&&(e=i),w<0?l=h:w>0&&(o=u),m=uo,z());break;case 32:m===oo&&(Wt.altKey?(x&&(f=s-d*x,e=i+d*x),w&&(l=h-p*w,o=u+p*w),m=ao):(x<0?f=s:x>0&&(e=i),w<0?l=h:w>0&&(o=u),m=uo),F.attr("cursor",lo[_]),z());break;default:return}ro()},!0).on("mousemove.brush",L,!0).on("mouseup.brush",D,!0);vn(Wt.view)}eo(),Kr(b),a.call(b),R.start()}function L(){var t=fn(b);!P||g||y||(Math.abs(t[0]-C[0])>Math.abs(t[1]-C[1])?y=!0:g=!0),C=t,v=!0,ro(),z()}function z(){var t;switch(d=C[0]-O[0],p=C[1]-O[1],m){case oo:case io:x&&(d=Math.max(k-e,Math.min(N-f,d)),i=e+d,s=f+d),w&&(p=Math.max(A-o,Math.min(T-l,p)),u=o+p,h=l+p);break;case uo:x<0?(d=Math.max(k-e,Math.min(N-e,d)),i=e+d,s=f):x>0&&(d=Math.max(k-f,Math.min(N-f,d)),i=e,s=f+d),w<0?(p=Math.max(A-o,Math.min(T-o,p)),u=o+p,h=l):w>0&&(p=Math.max(A-l,Math.min(T-l,p)),u=o,h=l+p);break;case ao:x&&(i=Math.max(k,Math.min(N,e-d*x)),s=Math.max(k,Math.min(N,f+d*x))),w&&(u=Math.max(A,Math.min(T,o-p*w)),h=Math.max(A,Math.min(T,l+p*w)))}s<i&&(x*=-1,t=e,e=f,f=t,t=i,i=s,s=t,_ in ho&&F.attr("cursor",lo[_=ho[_]])),h<u&&(w*=-1,t=o,o=l,l=t,t=u,u=h,h=t,_ in po&&F.attr("cursor",lo[_=po[_]])),M.selection&&(E=M.selection),g&&(i=E[0][0],s=E[1][0]),y&&(u=E[0][1],h=E[1][1]),E[0][0]===i&&E[0][1]===u&&E[1][0]===s&&E[1][1]===h||(M.selection=[[i,u],[s,h]],a.call(b),R.brush())}function D(){if(eo(),Wt.touches){if(Wt.touches.length)return;n&&clearTimeout(n),n=setTimeout(function(){n=null},500),I.on("touchmove.brush touchend.brush touchcancel.brush",null)}else gn(Wt.view,v),j.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);I.attr("pointer-events","all"),F.attr("cursor",lo.overlay),M.selection&&(E=M.selection),xo(E)&&(M.selection=null,a.call(b)),R.end()}}function l(){var n=this.__brush||{selection:null};return n.extent=e.apply(this,arguments),n.dim=t,n}return u.move=function(n,e){n.selection?n.on("start.brush",function(){c(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){c(this,arguments).end()}).tween("brush",function(){var n=this,r=n.__brush,i=c(n,arguments),o=r.selection,u=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),f=Xe(o,u);function s(t){r.selection=1===t&&xo(u)?null:f(t),a.call(n),i.brush()}return o&&u?s:s(1)}):n.each(function(){var n=arguments,r=this.__brush,i=t.input("function"==typeof e?e.apply(this,n):e,r.extent),o=c(this,n).beforestart();Kr(this),r.selection=null==i||xo(i)?null:i,a.call(this),o.start().brush().end()})},f.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){$t(new no(u,n,t.output(this.state.selection)),i.apply,i,[n,this.that,this.args])}},u.extent=function(t){return arguments.length?(e="function"==typeof t?t:to([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),u):e},u.filter=function(t){return arguments.length?(r="function"==typeof t?t:to(!!t),u):r},u.handleSize=function(t){return arguments.length?(o=+t,u):o},u.on=function(){var t=i.on.apply(i,arguments);return t===i?u:t},u}var Ao=Math.cos,No=Math.sin,To=Math.PI,Po=To/2,Oo=2*To,Co=Math.max;var Ro=function(){var t=0,n=null,e=null,r=null;function i(i){var o,u,a,c,f,s,l=i.length,h=[],d=w(l),p=[],v=[],g=v.groups=new Array(l),y=new Array(l*l);for(o=0,f=-1;++f<l;){for(u=0,s=-1;++s<l;)u+=i[f][s];h.push(u),p.push(w(l)),o+=u}for(n&&d.sort(function(t,e){return n(h[t],h[e])}),e&&p.forEach(function(t,n){t.sort(function(t,r){return e(i[n][t],i[n][r])})}),c=(o=Co(0,Oo-t*l)/o)?t:Oo/l,u=0,f=-1;++f<l;){for(a=u,s=-1;++s<l;){var b=d[f],_=p[b][s],m=i[b][_],x=u,M=u+=m*o;y[_*l+b]={index:b,subindex:_,startAngle:x,endAngle:M,value:m}}g[b]={index:b,startAngle:a,endAngle:u,value:h[b]},u+=c}for(f=-1;++f<l;)for(s=f-1;++s<l;){var S=y[s*l+f],E=y[f*l+s];(S.value||E.value)&&v.push(S.value<E.value?{source:E,target:S}:{source:S,target:E})}return r?v.sort(r):v}return i.padAngle=function(n){return arguments.length?(t=Co(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(n=t,r=function(t,e){return n(t.source.value+t.target.value,e.source.value+e.target.value)})._=t,i):r&&r._;var n},i},Io=Array.prototype.slice,Fo=function(t){return function(){return t}},jo=Math.PI,Lo=2*jo,zo=Lo-1e-6;function Do(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Uo(){return new Do}Do.prototype=Uo.prototype={constructor:Do,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,c=r-n,f=o-t,s=u-n,l=f*f+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>1e-6)if(Math.abs(s*a-c*f)>1e-6&&i){var h=e-o,d=r-u,p=a*a+c*c,v=h*h+d*d,g=Math.sqrt(p),y=Math.sqrt(l),b=i*Math.tan((jo-Math.acos((p+l-v)/(2*g*y)))/2),_=b/y,m=b/g;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*f)+","+(n+_*s)),this._+="A"+i+","+i+",0,0,"+ +(s*h>f*d)+","+(this._x1=t+m*a)+","+(this._y1=n+m*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n;var u=(e=+e)*Math.cos(r),a=e*Math.sin(r),c=t+u,f=n+a,s=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+f:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+c+","+f),e&&(l<0&&(l=l%Lo+Lo),l>zo?this._+="A"+e+","+e+",0,1,"+s+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+s+","+(this._x1=c)+","+(this._y1=f):l>1e-6&&(this._+="A"+e+","+e+",0,"+ +(l>=jo)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Bo=Uo;function qo(t){return t.source}function Yo(t){return t.target}function Wo(t){return t.radius}function Go(t){return t.startAngle}function Vo(t){return t.endAngle}var Ho=function(){var t=qo,n=Yo,e=Wo,r=Go,i=Vo,o=null;function u(){var u,a=Io.call(arguments),c=t.apply(this,a),f=n.apply(this,a),s=+e.apply(this,(a[0]=c,a)),l=r.apply(this,a)-Po,h=i.apply(this,a)-Po,d=s*Ao(l),p=s*No(l),v=+e.apply(this,(a[0]=f,a)),g=r.apply(this,a)-Po,y=i.apply(this,a)-Po;if(o||(o=u=Bo()),o.moveTo(d,p),o.arc(0,0,s,l,h),l===g&&h===y||(o.quadraticCurveTo(0,0,v*Ao(g),v*No(g)),o.arc(0,0,v,g,y)),o.quadraticCurveTo(0,0,d,p),o.closePath(),u)return o=null,u+""||null}return u.radius=function(t){return arguments.length?(e="function"==typeof t?t:Fo(+t),u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Fo(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Fo(+t),u):i},u.source=function(n){return arguments.length?(t=n,u):t},u.target=function(t){return arguments.length?(n=t,u):n},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u};function Xo(){}function $o(t,n){var e=new Xo;if(t instanceof Xo)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}Xo.prototype=$o.prototype={constructor:Xo,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Zo=$o,Jo=function(){var t,n,e,r=[],i=[];function o(e,i,u,a){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var c,f,s,l=-1,h=e.length,d=r[i++],p=Zo(),v=u();++l<h;)(s=p.get(c=d(f=e[l])+""))?s.push(f):p.set(c,[f]);return p.each(function(t,n){a(v,n,o(t,i,u,a))}),v}return e={object:function(t){return o(t,0,Qo,Ko)},map:function(t){return o(t,0,tu,nu)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var u,a=i[o-1];return null!=n&&o>=r.length?u=e.entries():(u=[],e.each(function(n,e){u.push({key:e,values:t(n,o)})})),null!=a?u.sort(function(t,n){return a(t.key,n.key)}):u}(o(t,0,tu,nu),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}};function Qo(){return{}}function Ko(t,n,e){t[n]=e}function tu(){return Zo()}function nu(t,n,e){t.set(n,e)}function eu(){}var ru=Zo.prototype;function iu(t,n){var e=new eu;if(t instanceof eu)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}eu.prototype=iu.prototype={constructor:eu,has:ru.has,add:function(t){return this["$"+(t+="")]=t,this},remove:ru.remove,clear:ru.clear,values:ru.keys,size:ru.size,empty:ru.empty,each:ru.each};var ou=iu,uu=function(t){var n=[];for(var e in t)n.push(e);return n},au=function(t){var n=[];for(var e in t)n.push(t[e]);return n},cu=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},fu=Array.prototype.slice,su=function(t,n){return t-n},lu=function(t){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r},hu=function(t){return function(){return t}},du=function(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=pu(t,n[r]))return e;return 0};function pu(t,n){for(var e=n[0],r=n[1],i=-1,o=0,u=t.length,a=u-1;o<u;a=o++){var c=t[o],f=c[0],s=c[1],l=t[a],h=l[0],d=l[1];if(vu(c,l,n))return 0;s>r!=d>r&&e<(h-f)*(r-s)/(d-s)+f&&(i=-i)}return i}function vu(t,n,e){var r,i,o,u;return function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1])}(t,n,e)&&(i=t[r=+(t[0]===n[0])],o=e[r],u=n[r],i<=o&&o<=u||u<=o&&o<=i)}var gu=function(){},yu=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],bu=function(){var t=1,n=1,e=T,r=a;function i(t){var n=e(t);if(Array.isArray(n))n=n.slice().sort(su);else{var r=g(t),i=r[0],u=r[1];n=N(i,u,n),n=w(Math.floor(i/n)*n,Math.floor(u/n)*n,n)}return n.map(function(n){return o(t,n)})}function o(e,i){var o=[],a=[];return function(e,r,i){var o,a,c,f,s,l,h=new Array,d=new Array;o=a=-1,f=e[0]>=r,yu[f<<1].forEach(p);for(;++o<t-1;)c=f,f=e[o+1]>=r,yu[c|f<<1].forEach(p);yu[f<<0].forEach(p);for(;++a<n-1;){for(o=-1,f=e[a*t+t]>=r,s=e[a*t]>=r,yu[f<<1|s<<2].forEach(p);++o<t-1;)c=f,f=e[a*t+t+o+1]>=r,l=s,s=e[a*t+o+1]>=r,yu[c|f<<1|s<<2|l<<3].forEach(p);yu[f|s<<3].forEach(p)}o=-1,s=e[a*t]>=r,yu[s<<2].forEach(p);for(;++o<t-1;)l=s,s=e[a*t+o+1]>=r,yu[s<<2|l<<3].forEach(p);function p(t){var n,e,r=[t[0][0]+o,t[0][1]+a],c=[t[1][0]+o,t[1][1]+a],f=u(r),s=u(c);(n=d[f])?(e=h[s])?(delete d[n.end],delete h[e.start],n===e?(n.ring.push(c),i(n.ring)):h[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete d[n.end],n.ring.push(c),d[n.end=s]=n):(n=h[s])?(e=d[f])?(delete h[n.start],delete d[e.end],n===e?(n.ring.push(c),i(n.ring)):h[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[n.start],n.ring.unshift(r),h[n.start=f]=n):h[f]=d[s]={start:f,end:s,ring:[r,c]}}yu[s<<3].forEach(p)}(e,i,function(t){r(t,e,i),lu(t)>0?o.push([t]):a.push(t)}),a.forEach(function(t){for(var n,e=0,r=o.length;e<r;++e)if(-1!==du((n=o[e])[0],t))return void n.push(t)}),{type:"MultiPolygon",value:i,coordinates:o}}function u(n){return 2*n[0]+n[1]*(t+1)*4}function a(e,r,i){e.forEach(function(e){var o,u=e[0],a=e[1],c=0|u,f=0|a,s=r[f*t+c];u>0&&u<t&&c===u&&(o=r[f*t+c-1],e[0]=u+(i-o)/(s-o)-.5),a>0&&a<n&&f===a&&(o=r[(f-1)*t+c],e[1]=a+(i-o)/(s-o)-.5)})}return i.contour=o,i.size=function(e){if(!arguments.length)return[t,n];var r=Math.ceil(e[0]),o=Math.ceil(e[1]);if(!(r>0&&o>0))throw new Error("invalid size");return t=r,n=o,i},i.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?hu(fu.call(t)):hu(t),i):e},i.smooth=function(t){return arguments.length?(r=t?a:gu,i):r===a},i};function _u(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<i;++u)for(var a=0,c=0;a<r+e;++a)a<r&&(c+=t.data[a+u*r]),a>=e&&(a>=o&&(c-=t.data[a-o+u*r]),n.data[a-e+u*r]=c/Math.min(a+1,r-1+o-a,o))}function mu(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<r;++u)for(var a=0,c=0;a<i+e;++a)a<i&&(c+=t.data[u+a*r]),a>=e&&(a>=o&&(c-=t.data[u+(a-o)*r]),n.data[u+(a-e)*r]=c/Math.min(a+1,i-1+o-a,o))}function xu(t){return t[0]}function wu(t){return t[1]}function Mu(){return 1}var Su=function(){var t=xu,n=wu,e=Mu,r=960,i=500,o=20,u=2,a=3*o,c=r+2*a>>u,f=i+2*a>>u,s=hu(20);function l(r){var i=new Float32Array(c*f),l=new Float32Array(c*f);r.forEach(function(r,o,s){var l=+t(r,o,s)+a>>u,h=+n(r,o,s)+a>>u,d=+e(r,o,s);l>=0&&l<c&&h>=0&&h<f&&(i[l+h*c]+=d)}),_u({width:c,height:f,data:i},{width:c,height:f,data:l},o>>u),mu({width:c,height:f,data:l},{width:c,height:f,data:i},o>>u),_u({width:c,height:f,data:i},{width:c,height:f,data:l},o>>u),mu({width:c,height:f,data:l},{width:c,height:f,data:i},o>>u),_u({width:c,height:f,data:i},{width:c,height:f,data:l},o>>u),mu({width:c,height:f,data:l},{width:c,height:f,data:i},o>>u);var d=s(i);if(!Array.isArray(d)){var p=I(i);d=N(0,p,d),(d=w(0,Math.floor(p/d)*d,d)).shift()}return bu().thresholds(d).size([c,f])(i).map(h)}function h(t){return t.value*=Math.pow(2,-2*u),t.coordinates.forEach(d),t}function d(t){t.forEach(p)}function p(t){t.forEach(v)}function v(t){t[0]=t[0]*Math.pow(2,u)-a,t[1]=t[1]*Math.pow(2,u)-a}function g(){return c=r+2*(a=3*o)>>u,f=i+2*a>>u,l}return l.x=function(n){return arguments.length?(t="function"==typeof n?n:hu(+n),l):t},l.y=function(t){return arguments.length?(n="function"==typeof t?t:hu(+t),l):n},l.weight=function(t){return arguments.length?(e="function"==typeof t?t:hu(+t),l):e},l.size=function(t){if(!arguments.length)return[r,i];var n=Math.ceil(t[0]),e=Math.ceil(t[1]);if(!(n>=0||n>=0))throw new Error("invalid size");return r=n,i=e,g()},l.cellSize=function(t){if(!arguments.length)return 1<<u;if(!((t=+t)>=1))throw new Error("invalid cell size");return u=Math.floor(Math.log(t)/Math.LN2),g()},l.thresholds=function(t){return arguments.length?(s="function"==typeof t?t:Array.isArray(t)?hu(fu.call(t)):hu(t),l):s},l.bandwidth=function(t){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return o=Math.round((Math.sqrt(4*t*t+1)-1)/2),g()},l},Eu={},ku={},Au=34,Nu=10,Tu=13;function Pu(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}var Ou=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,c=o<=0,f=!1;function s(){if(c)return ku;if(f)return f=!1,Eu;var n,r,i=u;if(t.charCodeAt(i)===Au){for(;u++<o&&t.charCodeAt(u)!==Au||t.charCodeAt(++u)===Au;);return(n=u)>=o?c=!0:(r=t.charCodeAt(u++))===Nu?f=!0:r===Tu&&(f=!0,t.charCodeAt(u)===Nu&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if((r=t.charCodeAt(n=u++))===Nu)f=!0;else if(r===Tu)f=!0,t.charCodeAt(u)===Nu&&++u;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===Nu&&--o,t.charCodeAt(o-1)===Tu&&--o;(r=s())!==ku;){for(var l=[];r!==Eu&&r!==ku;)l.push(r),r=s();n&&null==(l=n(l,a++))||i.push(l)}return i}function i(n){return n.map(o).join(t)}function o(t){return null==t?"":n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=Pu(t);return function(r,i){return n(e(r),i,t)}}(t,n):Pu(t)});return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}(n)),[e.map(o).join(t)].concat(n.map(function(n){return e.map(function(t){return o(n[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}},Cu=Ou(","),Ru=Cu.parse,Iu=Cu.parseRows,Fu=Cu.format,ju=Cu.formatRows,Lu=Ou("\t"),zu=Lu.parse,Du=Lu.parseRows,Uu=Lu.format,Bu=Lu.formatRows;function qu(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}var Yu=function(t,n){return fetch(t,n).then(qu)};function Wu(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}var Gu=function(t,n){return fetch(t,n).then(Wu)};function Vu(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Hu=function(t,n){return fetch(t,n).then(Vu)};function Xu(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Hu(n,e).then(function(n){return t(n,r)})}}function $u(t,n,e,r){3===arguments.length&&"function"==typeof e&&(r=e,e=void 0);var i=Ou(t);return Hu(n,e).then(function(t){return i.parse(t,r)})}var Zu=Xu(Ru),Ju=Xu(zu),Qu=function(t,n){return new Promise(function(e,r){var i=new Image;for(var o in n)i[o]=n[o];i.onerror=r,i.onload=function(){e(i)},i.src=t})};function Ku(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var ta=function(t,n){return fetch(t,n).then(Ku)};function na(t){return function(n,e){return Hu(n,e).then(function(n){return(new DOMParser).parseFromString(n,t)})}}var ea=na("application/xml"),ra=na("text/html"),ia=na("image/svg+xml"),oa=function(t,n){var e;function r(){var r,i,o=e.length,u=0,a=0;for(r=0;r<o;++r)u+=(i=e[r]).x,a+=i.y;for(u=u/o-t,a=a/o-n,r=0;r<o;++r)(i=e[r]).x-=u,i.y-=a}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r},ua=function(t){return function(){return t}},aa=function(){return 1e-6*(Math.random()-.5)};function ca(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,c,f,s,l,h,d=t._root,p={data:r},v=t._x0,g=t._y0,y=t._x1,b=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((f=n>=(o=(v+y)/2))?v=o:y=o,(s=e>=(u=(g+b)/2))?g=u:b=u,i=d,!(d=d[l=s<<1|f]))return i[l]=p,t;if(a=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===a&&e===c)return p.next=d,i?i[l]=p:t._root=p,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(f=n>=(o=(v+y)/2))?v=o:y=o,(s=e>=(u=(g+b)/2))?g=u:b=u}while((l=s<<1|f)==(h=(c>=u)<<1|a>=o));return i[h]=d,i[l]=p,t}var fa=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function sa(t){return t[0]}function la(t){return t[1]}function ha(t,n,e){var r=new da(null==n?sa:n,null==e?la:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function da(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function pa(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var va=ha.prototype=da.prototype;function ga(t){return t.x+t.vx}function ya(t){return t.y+t.vy}va.copy=function(){var t,n,e=new da(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=pa(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=pa(n));return e},va.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return ca(this.cover(n,e),n,e,t)},va.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),c=1/0,f=1/0,s=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<c&&(c=r),r>s&&(s=r),i<f&&(f=i),i>l&&(l=i));for(s<c&&(c=this._x0,s=this._x1),l<f&&(f=this._y0,l=this._y1),this.cover(c,f).cover(s,l),e=0;e<o;++e)ca(this,u[e],a[e],t[e]);return this},va.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>o))return this;var u,a,c=i-e,f=this._root;switch(a=(n<(r+o)/2)<<1|t<(e+i)/2){case 0:do{(u=new Array(4))[a]=f,f=u}while(o=r+(c*=2),t>(i=e+c)||n>o);break;case 1:do{(u=new Array(4))[a]=f,f=u}while(o=r+(c*=2),(e=i-c)>t||n>o);break;case 2:do{(u=new Array(4))[a]=f,f=u}while(r=o-(c*=2),t>(i=e+c)||r>n);break;case 3:do{(u=new Array(4))[a]=f,f=u}while(r=o-(c*=2),(e=i-c)>t||r>n)}this._root&&this._root.length&&(this._root=f)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},va.data=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t},va.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},va.find=function(t,n,e){var r,i,o,u,a,c,f,s=this._x0,l=this._y0,h=this._x1,d=this._y1,p=[],v=this._root;for(v&&p.push(new fa(v,s,l,h,d)),null==e?e=1/0:(s=t-e,l=n-e,h=t+e,d=n+e,e*=e);c=p.pop();)if(!(!(v=c.node)||(i=c.x0)>h||(o=c.y0)>d||(u=c.x1)<s||(a=c.y1)<l))if(v.length){var g=(i+u)/2,y=(o+a)/2;p.push(new fa(v[3],g,y,u,a),new fa(v[2],i,y,g,a),new fa(v[1],g,o,u,y),new fa(v[0],i,o,g,y)),(f=(n>=y)<<1|t>=g)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-f],p[p.length-1-f]=c)}else{var b=t-+this._x.call(null,v.data),_=n-+this._y.call(null,v.data),m=b*b+_*_;if(m<e){var x=Math.sqrt(e=m);s=t-x,l=n-x,h=t+x,d=n+x,r=v.data}}return r},va.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,c,f,s,l,h,d=this._root,p=this._x0,v=this._y0,g=this._x1,y=this._y1;if(!d)return this;if(d.length)for(;;){if((f=o>=(a=(p+g)/2))?p=a:g=a,(s=u>=(c=(v+y)/2))?v=c:y=c,n=d,!(d=d[l=s<<1|f]))return this;if(!d.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)},va.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},va.root=function(){return this._root},va.size=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t},va.visit=function(t){var n,e,r,i,o,u,a=[],c=this._root;for(c&&a.push(new fa(c,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&c.length){var f=(r+o)/2,s=(i+u)/2;(e=c[3])&&a.push(new fa(e,f,s,o,u)),(e=c[2])&&a.push(new fa(e,r,s,f,u)),(e=c[1])&&a.push(new fa(e,f,i,o,s)),(e=c[0])&&a.push(new fa(e,r,i,f,s))}return this},va.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new fa(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,c=n.x1,f=n.y1,s=(u+c)/2,l=(a+f)/2;(o=i[0])&&e.push(new fa(o,u,a,s,l)),(o=i[1])&&e.push(new fa(o,s,a,c,l)),(o=i[2])&&e.push(new fa(o,u,l,s,f)),(o=i[3])&&e.push(new fa(o,s,l,c,f))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},va.x=function(t){return arguments.length?(this._x=t,this):this._x},va.y=function(t){return arguments.length?(this._y=t,this):this._y};var ba=function(t){var n,e,r=1,i=1;function o(){for(var t,o,a,c,f,s,l,h=n.length,d=0;d<i;++d)for(o=ha(n,ga,ya).visitAfter(u),t=0;t<h;++t)a=n[t],s=e[a.index],l=s*s,c=a.x+a.vx,f=a.y+a.vy,o.visit(p);function p(t,n,e,i,o){var u=t.data,h=t.r,d=s+h;if(!u)return n>c+d||i<c-d||e>f+d||o<f-d;if(u.index>a.index){var p=c-u.x-u.vx,v=f-u.y-u.vy,g=p*p+v*v;g<d*d&&(0===p&&(g+=(p=aa())*p),0===v&&(g+=(v=aa())*v),g=(d-(g=Math.sqrt(g)))/g*r,a.vx+=(p*=g)*(d=(h*=h)/(l+h)),a.vy+=(v*=g)*d,u.vx-=p*(d=1-d),u.vy-=v*d)}}}function u(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function a(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=ua(null==t?1:+t)),o.initialize=function(t){n=t,a()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:ua(+n),a(),o):t},o};function _a(t){return t.index}function ma(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}var xa=function(t){var n,e,r,i,o,u=_a,a=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},c=ua(30),f=1;function s(r){for(var i=0,u=t.length;i<f;++i)for(var a,c,s,l,h,d,p,v=0;v<u;++v)c=(a=t[v]).source,l=(s=a.target).x+s.vx-c.x-c.vx||aa(),h=s.y+s.vy-c.y-c.vy||aa(),l*=d=((d=Math.sqrt(l*l+h*h))-e[v])/d*r*n[v],h*=d,s.vx-=l*(p=o[v]),s.vy-=h*p,c.vx+=l*(p=1-p),c.vy+=h*p}function l(){if(r){var a,c,f=r.length,s=t.length,l=Zo(r,u);for(a=0,i=new Array(f);a<s;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=ma(l,c.source)),"object"!=typeof c.target&&(c.target=ma(l,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(a=0,o=new Array(s);a<s;++a)c=t[a],o[a]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(s),h(),e=new Array(s),d()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+a(t[e],e,t)}function d(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+c(t[n],n,t)}return null==t&&(t=[]),s.initialize=function(t){r=t,l()},s.links=function(n){return arguments.length?(t=n,l(),s):t},s.id=function(t){return arguments.length?(u=t,s):u},s.iterations=function(t){return arguments.length?(f=+t,s):f},s.strength=function(t){return arguments.length?(a="function"==typeof t?t:ua(+t),h(),s):a},s.distance=function(t){return arguments.length?(c="function"==typeof t?t:ua(+t),d(),s):c},s};function wa(t){return t.x}function Ma(t){return t.y}var Sa=10,Ea=Math.PI*(3-Math.sqrt(5)),ka=function(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,u=.6,a=Zo(),c=Rr(s),f=ht("tick","end");function s(){l(),f.call("tick",n),e<r&&(c.stop(),f.call("end",n))}function l(r){var c,f,s=t.length;void 0===r&&(r=1);for(var l=0;l<r;++l)for(e+=(o-e)*i,a.each(function(t){t(e)}),c=0;c<s;++c)null==(f=t[c]).fx?f.x+=f.vx*=u:(f.x=f.fx,f.vx=0),null==f.fy?f.y+=f.vy*=u:(f.y=f.fy,f.vy=0);return n}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,isNaN(n.fx)||(n.x=n.fx),isNaN(n.fy)||(n.y=n.fy),isNaN(n.x)||isNaN(n.y)){var i=Sa*Math.sqrt(e),o=e*Ea;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function d(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:l,restart:function(){return c.restart(s),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),a.each(d),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(u=1-t,n):1-u},force:function(t,e){return arguments.length>1?(null==e?a.remove(t):a.set(t,d(e)),n):a.get(t)},find:function(n,e,r){var i,o,u,a,c,f=0,s=t.length;for(null==r?r=1/0:r*=r,f=0;f<s;++f)(u=(i=n-(a=t[f]).x)*i+(o=e-a.y)*o)<r&&(c=a,r=u);return c},on:function(t,e){return arguments.length>1?(f.on(t,e),n):f.on(t)}}},Aa=function(){var t,n,e,r,i=ua(-30),o=1,u=1/0,a=.81;function c(r){var i,o=t.length,u=ha(t,wa,Ma).visitAfter(s);for(e=r,i=0;i<o;++i)n=t[i],u.visit(l)}function f(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function s(t){var n,e,i,o,u,a=0,c=0;if(t.length){for(i=o=u=0;u<4;++u)(n=t[u])&&(e=Math.abs(n.value))&&(a+=n.value,c+=e,i+=e*n.x,o+=e*n.y);t.x=i/c,t.y=o/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{a+=r[n.data.index]}while(n=n.next)}t.value=a}function l(t,i,c,f){if(!t.value)return!0;var s=t.x-n.x,l=t.y-n.y,h=f-i,d=s*s+l*l;if(h*h/a<d)return d<u&&(0===s&&(d+=(s=aa())*s),0===l&&(d+=(l=aa())*l),d<o&&(d=Math.sqrt(o*d)),n.vx+=s*t.value*e/d,n.vy+=l*t.value*e/d),!0;if(!(t.length||d>=u)){(t.data!==n||t.next)&&(0===s&&(d+=(s=aa())*s),0===l&&(d+=(l=aa())*l),d<o&&(d=Math.sqrt(o*d)));do{t.data!==n&&(h=r[t.data.index]*e/d,n.vx+=s*h,n.vy+=l*h)}while(t=t.next)}}return c.initialize=function(n){t=n,f()},c.strength=function(t){return arguments.length?(i="function"==typeof t?t:ua(+t),f(),c):i},c.distanceMin=function(t){return arguments.length?(o=t*t,c):Math.sqrt(o)},c.distanceMax=function(t){return arguments.length?(u=t*t,c):Math.sqrt(u)},c.theta=function(t){return arguments.length?(a=t*t,c):Math.sqrt(a)},c},Na=function(t,n,e){var r,i,o,u=ua(.1);function a(t){for(var u=0,a=r.length;u<a;++u){var c=r[u],f=c.x-n||1e-6,s=c.y-e||1e-6,l=Math.sqrt(f*f+s*s),h=(o[u]-l)*i[u]*t/l;c.vx+=f*h,c.vy+=s*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+u(r[n],n,r)}}return"function"!=typeof t&&(t=ua(+t)),null==n&&(n=0),null==e&&(e=0),a.initialize=function(t){r=t,c()},a.strength=function(t){return arguments.length?(u="function"==typeof t?t:ua(+t),c(),a):u},a.radius=function(n){return arguments.length?(t="function"==typeof n?n:ua(+n),c(),a):t},a.x=function(t){return arguments.length?(n=+t,a):n},a.y=function(t){return arguments.length?(e=+t,a):e},a},Ta=function(t){var n,e,r,i=ua(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=ua(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:ua(+t),u(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:ua(+n),u(),o):t},o},Pa=function(t){var n,e,r,i=ua(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=ua(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:ua(+t),u(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:ua(+n),u(),o):t},o},Oa=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},Ca=function(t){return(t=Oa(Math.abs(t)))?t[1]:NaN},Ra=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Ia(t){return new Fa(t)}function Fa(t){if(!(n=Ra.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}Ia.prototype=Fa.prototype,Fa.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var ja,La,za,Da,Ua=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t},Ba=function(t,n){var e=Oa(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},qa={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Ba(100*t,n)},r:Ba,s:function(t,n){var e=Oa(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(ja=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Oa(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Ya=function(t){return t},Wa=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Ga=function(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],u=0,a=n[0],c=0;i>0&&a>0&&(c+a+1>r&&(a=Math.max(1,r-c)),o.push(t.substring(i-=a,i+a)),!((c+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}):Ya,i=t.currency,o=t.decimal,u=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):Ya,a=t.percent||"%";function c(t){var n=(t=Ia(t)).fill,e=t.align,c=t.sign,f=t.symbol,s=t.zero,l=t.width,h=t.comma,d=t.precision,p=t.trim,v=t.type;"n"===v?(h=!0,v="g"):qa[v]||(null==d&&(d=12),p=!0,v="g"),(s||"0"===n&&"="===e)&&(s=!0,n="0",e="=");var g="$"===f?i[0]:"#"===f&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",y="$"===f?i[1]:/[%p]/.test(v)?a:"",b=qa[v],_=/[defgprs%]/.test(v);function m(t){var i,a,f,m=g,x=y;if("c"===v)x=b(t)+x,t="";else{var w=(t=+t)<0;if(t=b(Math.abs(t),d),p&&(t=Ua(t)),w&&0==+t&&(w=!1),m=(w?"("===c?c:"-":"-"===c||"("===c?"":c)+m,x=("s"===v?Wa[8+ja/3]:"")+x+(w&&"("===c?")":""),_)for(i=-1,a=t.length;++i<a;)if(48>(f=t.charCodeAt(i))||f>57){x=(46===f?o+t.slice(i+1):t.slice(i))+x,t=t.slice(0,i);break}}h&&!s&&(t=r(t,1/0));var M=m.length+t.length+x.length,S=M<l?new Array(l-M+1).join(n):"";switch(h&&s&&(t=r(S+t,S.length?l-x.length:1/0),S=""),e){case"<":t=m+t+x+S;break;case"=":t=m+S+t+x;break;case"^":t=S.slice(0,M=S.length>>1)+m+t+x+S.slice(M);break;default:t=S+m+t+x}return u(t)}return d=null==d?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),m.toString=function(){return t+""},m}return{format:c,formatPrefix:function(t,n){var e=c(((t=Ia(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Ca(n)/3))),i=Math.pow(10,-r),o=Wa[8+r/3];return function(t){return e(i*t)+o}}}};function Va(t){return La=Ga(t),za=La.format,Da=La.formatPrefix,La}Va({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var Ha=function(t){return Math.max(0,-Ca(Math.abs(t)))},Xa=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ca(n)/3)))-Ca(Math.abs(t)))},$a=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Ca(n)-Ca(t))+1},Za=function(){return new Ja};function Ja(){this.reset()}Ja.prototype={constructor:Ja,reset:function(){this.s=this.t=0},add:function(t){Ka(Qa,t,this.t),Ka(this,Qa.s,this.s),this.s?this.t+=Qa.t:this.s=Qa.t},valueOf:function(){return this.s}};var Qa=new Ja;function Ka(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var tc=1e-6,nc=Math.PI,ec=nc/2,rc=nc/4,ic=2*nc,oc=180/nc,uc=nc/180,ac=Math.abs,cc=Math.atan,fc=Math.atan2,sc=Math.cos,lc=Math.ceil,hc=Math.exp,dc=(Math.floor,Math.log),pc=Math.pow,vc=Math.sin,gc=Math.sign||function(t){return t>0?1:t<0?-1:0},yc=Math.sqrt,bc=Math.tan;function _c(t){return t>1?0:t<-1?nc:Math.acos(t)}function mc(t){return t>1?ec:t<-1?-ec:Math.asin(t)}function xc(t){return(t=vc(t/2))*t}function wc(){}function Mc(t,n){t&&Ec.hasOwnProperty(t.type)&&Ec[t.type](t,n)}var Sc={Feature:function(t,n){Mc(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)Mc(e[r].geometry,n)}},Ec={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){kc(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)kc(e[r],n,0)},Polygon:function(t,n){Ac(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Ac(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)Mc(e[r],n)}};function kc(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function Ac(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)kc(t[e],n,1);n.polygonEnd()}var Nc,Tc,Pc,Oc,Cc,Rc=function(t,n){t&&Sc.hasOwnProperty(t.type)?Sc[t.type](t,n):Mc(t,n)},Ic=Za(),Fc=Za(),jc={point:wc,lineStart:wc,lineEnd:wc,polygonStart:function(){Ic.reset(),jc.lineStart=Lc,jc.lineEnd=zc},polygonEnd:function(){var t=+Ic;Fc.add(t<0?ic+t:t),this.lineStart=this.lineEnd=this.point=wc},sphere:function(){Fc.add(ic)}};function Lc(){jc.point=Dc}function zc(){Uc(Nc,Tc)}function Dc(t,n){jc.point=Uc,Nc=t,Tc=n,Pc=t*=uc,Oc=sc(n=(n*=uc)/2+rc),Cc=vc(n)}function Uc(t,n){var e=(t*=uc)-Pc,r=e>=0?1:-1,i=r*e,o=sc(n=(n*=uc)/2+rc),u=vc(n),a=Cc*u,c=Oc*o+a*sc(i),f=a*r*vc(i);Ic.add(fc(f,c)),Pc=t,Oc=o,Cc=u}var Bc=function(t){return Fc.reset(),Rc(t,jc),2*Fc};function qc(t){return[fc(t[1],t[0]),mc(t[2])]}function Yc(t){var n=t[0],e=t[1],r=sc(e);return[r*sc(n),r*vc(n),vc(e)]}function Wc(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Gc(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Vc(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Hc(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Xc(t){var n=yc(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var $c,Zc,Jc,Qc,Kc,tf,nf,ef,rf,of,uf=Za(),af={point:cf,lineStart:sf,lineEnd:lf,polygonStart:function(){af.point=hf,af.lineStart=df,af.lineEnd=pf,uf.reset(),jc.polygonStart()},polygonEnd:function(){jc.polygonEnd(),af.point=cf,af.lineStart=sf,af.lineEnd=lf,Ic<0?($c=-(Jc=180),Zc=-(Qc=90)):uf>tc?Qc=90:uf<-tc&&(Zc=-90),of[0]=$c,of[1]=Jc}};function cf(t,n){rf.push(of=[$c=t,Jc=t]),n<Zc&&(Zc=n),n>Qc&&(Qc=n)}function ff(t,n){var e=Yc([t*uc,n*uc]);if(ef){var r=Gc(ef,e),i=Gc([r[1],-r[0],0],r);Xc(i),i=qc(i);var o,u=t-Kc,a=u>0?1:-1,c=i[0]*oc*a,f=ac(u)>180;f^(a*Kc<c&&c<a*t)?(o=i[1]*oc)>Qc&&(Qc=o):f^(a*Kc<(c=(c+360)%360-180)&&c<a*t)?(o=-i[1]*oc)<Zc&&(Zc=o):(n<Zc&&(Zc=n),n>Qc&&(Qc=n)),f?t<Kc?vf($c,t)>vf($c,Jc)&&(Jc=t):vf(t,Jc)>vf($c,Jc)&&($c=t):Jc>=$c?(t<$c&&($c=t),t>Jc&&(Jc=t)):t>Kc?vf($c,t)>vf($c,Jc)&&(Jc=t):vf(t,Jc)>vf($c,Jc)&&($c=t)}else rf.push(of=[$c=t,Jc=t]);n<Zc&&(Zc=n),n>Qc&&(Qc=n),ef=e,Kc=t}function sf(){af.point=ff}function lf(){of[0]=$c,of[1]=Jc,af.point=cf,ef=null}function hf(t,n){if(ef){var e=t-Kc;uf.add(ac(e)>180?e+(e>0?360:-360):e)}else tf=t,nf=n;jc.point(t,n),ff(t,n)}function df(){jc.lineStart()}function pf(){hf(tf,nf),jc.lineEnd(),ac(uf)>tc&&($c=-(Jc=180)),of[0]=$c,of[1]=Jc,ef=null}function vf(t,n){return(n-=t)<0?n+360:n}function gf(t,n){return t[0]-n[0]}function yf(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var bf,_f,mf,xf,wf,Mf,Sf,Ef,kf,Af,Nf,Tf,Pf,Of,Cf,Rf,If=function(t){var n,e,r,i,o,u,a;if(Qc=Jc=-($c=Zc=1/0),rf=[],Rc(t,af),e=rf.length){for(rf.sort(gf),n=1,o=[r=rf[0]];n<e;++n)yf(r,(i=rf[n])[0])||yf(r,i[1])?(vf(r[0],i[1])>vf(r[0],r[1])&&(r[1]=i[1]),vf(i[0],r[1])>vf(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(u=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(a=vf(r[1],i[0]))>u&&(u=a,$c=i[0],Jc=r[1])}return rf=of=null,$c===1/0||Zc===1/0?[[NaN,NaN],[NaN,NaN]]:[[$c,Zc],[Jc,Qc]]},Ff={sphere:wc,point:jf,lineStart:zf,lineEnd:Bf,polygonStart:function(){Ff.lineStart=qf,Ff.lineEnd=Yf},polygonEnd:function(){Ff.lineStart=zf,Ff.lineEnd=Bf}};function jf(t,n){t*=uc;var e=sc(n*=uc);Lf(e*sc(t),e*vc(t),vc(n))}function Lf(t,n,e){mf+=(t-mf)/++bf,xf+=(n-xf)/bf,wf+=(e-wf)/bf}function zf(){Ff.point=Df}function Df(t,n){t*=uc;var e=sc(n*=uc);Of=e*sc(t),Cf=e*vc(t),Rf=vc(n),Ff.point=Uf,Lf(Of,Cf,Rf)}function Uf(t,n){t*=uc;var e=sc(n*=uc),r=e*sc(t),i=e*vc(t),o=vc(n),u=fc(yc((u=Cf*o-Rf*i)*u+(u=Rf*r-Of*o)*u+(u=Of*i-Cf*r)*u),Of*r+Cf*i+Rf*o);_f+=u,Mf+=u*(Of+(Of=r)),Sf+=u*(Cf+(Cf=i)),Ef+=u*(Rf+(Rf=o)),Lf(Of,Cf,Rf)}function Bf(){Ff.point=jf}function qf(){Ff.point=Wf}function Yf(){Gf(Tf,Pf),Ff.point=jf}function Wf(t,n){Tf=t,Pf=n,t*=uc,n*=uc,Ff.point=Gf;var e=sc(n);Of=e*sc(t),Cf=e*vc(t),Rf=vc(n),Lf(Of,Cf,Rf)}function Gf(t,n){t*=uc;var e=sc(n*=uc),r=e*sc(t),i=e*vc(t),o=vc(n),u=Cf*o-Rf*i,a=Rf*r-Of*o,c=Of*i-Cf*r,f=yc(u*u+a*a+c*c),s=mc(f),l=f&&-s/f;kf+=l*u,Af+=l*a,Nf+=l*c,_f+=s,Mf+=s*(Of+(Of=r)),Sf+=s*(Cf+(Cf=i)),Ef+=s*(Rf+(Rf=o)),Lf(Of,Cf,Rf)}var Vf=function(t){bf=_f=mf=xf=wf=Mf=Sf=Ef=kf=Af=Nf=0,Rc(t,Ff);var n=kf,e=Af,r=Nf,i=n*n+e*e+r*r;return i<1e-12&&(n=Mf,e=Sf,r=Ef,_f<tc&&(n=mf,e=xf,r=wf),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[fc(e,n)*oc,mc(r/yc(i))*oc]},Hf=function(t){return function(){return t}},Xf=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};function $f(t,n){return[ac(t)>nc?t+Math.round(-t/ic)*ic:t,n]}function Zf(t,n,e){return(t%=ic)?n||e?Xf(Qf(t),Kf(n,e)):Qf(t):n||e?Kf(n,e):$f}function Jf(t){return function(n,e){return[(n+=t)>nc?n-ic:n<-nc?n+ic:n,e]}}function Qf(t){var n=Jf(t);return n.invert=Jf(-t),n}function Kf(t,n){var e=sc(t),r=vc(t),i=sc(n),o=vc(n);function u(t,n){var u=sc(n),a=sc(t)*u,c=vc(t)*u,f=vc(n),s=f*e+a*r;return[fc(c*i-s*o,a*e-f*r),mc(s*i+c*o)]}return u.invert=function(t,n){var u=sc(n),a=sc(t)*u,c=vc(t)*u,f=vc(n),s=f*i-c*o;return[fc(c*i+f*o,a*e+s*r),mc(s*e-a*r)]},u}$f.invert=$f;var ts=function(t){function n(n){return(n=t(n[0]*uc,n[1]*uc))[0]*=oc,n[1]*=oc,n}return t=Zf(t[0]*uc,t[1]*uc,t.length>2?t[2]*uc:0),n.invert=function(n){return(n=t.invert(n[0]*uc,n[1]*uc))[0]*=oc,n[1]*=oc,n},n};function ns(t,n,e,r,i,o){if(e){var u=sc(n),a=vc(n),c=r*e;null==i?(i=n+r*ic,o=n-c/2):(i=es(u,i),o=es(u,o),(r>0?i<o:i>o)&&(i+=r*ic));for(var f,s=i;r>0?s>o:s<o;s-=c)f=qc([u,-a*sc(s),-a*vc(s)]),t.point(f[0],f[1])}}function es(t,n){(n=Yc(n))[0]-=t,Xc(n);var e=_c(-n[1]);return((-n[2]<0?-e:e)+ic-tc)%ic}var rs=function(){var t,n,e=Hf([0,0]),r=Hf(90),i=Hf(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=oc,e[1]*=oc}};function u(){var u=e.apply(this,arguments),a=r.apply(this,arguments)*uc,c=i.apply(this,arguments)*uc;return t=[],n=Zf(-u[0]*uc,-u[1]*uc,0).invert,ns(o,a,c,1),u={type:"Polygon",coordinates:[t]},t=n=null,u}return u.center=function(t){return arguments.length?(e="function"==typeof t?t:Hf([+t[0],+t[1]]),u):e},u.radius=function(t){return arguments.length?(r="function"==typeof t?t:Hf(+t),u):r},u.precision=function(t){return arguments.length?(i="function"==typeof t?t:Hf(+t),u):i},u},is=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:wc,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},os=function(t,n){return ac(t[0]-n[0])<tc&&ac(t[1]-n[1])<tc};function us(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var as=function(t,n,e,r,i){var o,u,a=[],c=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(os(r,u)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else a.push(e=new us(r,t,null,!0)),c.push(e.o=new us(r,null,e,!1)),a.push(e=new us(u,t,null,!1)),c.push(e.o=new us(u,null,e,!0))}}),a.length){for(c.sort(n),cs(a),cs(c),o=0,u=c.length;o<u;++o)c[o].e=e=!e;for(var f,s,l=a[0];;){for(var h=l,d=!0;h.v;)if((h=h.n)===l)return;f=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(o=0,u=f.length;o<u;++o)i.point((s=f[o])[0],s[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(f=h.p.z,o=f.length-1;o>=0;--o)i.point((s=f[o])[0],s[1]);else r(h.x,h.p.x,-1,i);h=h.p}f=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}};function cs(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var fs=Za(),ss=function(t,n){var e=n[0],r=n[1],i=vc(r),o=[vc(e),-sc(e),0],u=0,a=0;fs.reset(),1===i?r=ec+tc:-1===i&&(r=-ec-tc);for(var c=0,f=t.length;c<f;++c)if(l=(s=t[c]).length)for(var s,l,h=s[l-1],d=h[0],p=h[1]/2+rc,v=vc(p),g=sc(p),y=0;y<l;++y,d=_,v=x,g=w,h=b){var b=s[y],_=b[0],m=b[1]/2+rc,x=vc(m),w=sc(m),M=_-d,S=M>=0?1:-1,E=S*M,k=E>nc,A=v*x;if(fs.add(fc(A*S*vc(E),g*w+A*sc(E))),u+=k?M+S*ic:M,k^d>=e^_>=e){var N=Gc(Yc(h),Yc(b));Xc(N);var T=Gc(o,N);Xc(T);var P=(k^M>=0?-1:1)*mc(T[2]);(r>P||r===P&&(N[0]||N[1]))&&(a+=k^M>=0?1:-1)}}return(u<-tc||u<tc&&fs<-tc)^1&a},ls=function(t,n,e,r){return function(i){var o,u,a,c=n(i),f=is(),s=n(f),l=!1,h={point:d,lineStart:v,lineEnd:g,polygonStart:function(){h.point=y,h.lineStart=b,h.lineEnd=_,u=[],o=[]},polygonEnd:function(){h.point=d,h.lineStart=v,h.lineEnd=g,u=L(u);var t=ss(o,r);u.length?(l||(i.polygonStart(),l=!0),as(u,ds,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function p(t,n){c.point(t,n)}function v(){h.point=p,c.lineStart()}function g(){h.point=d,c.lineEnd()}function y(t,n){a.push([t,n]),s.point(t,n)}function b(){s.lineStart(),a=[]}function _(){y(a[0][0],a[0][1]),s.lineEnd();var t,n,e,r,c=s.clean(),h=f.result(),d=h.length;if(a.pop(),o.push(a),a=null,d)if(1&c){if((n=(e=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&c&&h.push(h.pop().concat(h.shift())),u.push(h.filter(hs))}return h}};function hs(t){return t.length>1}function ds(t,n){return((t=t.x)[0]<0?t[1]-ec-tc:ec-t[1])-((n=n.x)[0]<0?n[1]-ec-tc:ec-n[1])}var ps=ls(function(){return!0},function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?nc:-nc,c=ac(o-e);ac(c-nc)<tc?(t.point(e,r=(r+u)/2>0?ec:-ec),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&c>=nc&&(ac(e-i)<tc&&(e-=i*tc),ac(o-a)<tc&&(o-=a*tc),r=function(t,n,e,r){var i,o,u=vc(t-e);return ac(u)>tc?cc((vc(n)*(o=sc(r))*vc(e)-vc(r)*(i=sc(n))*vc(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}},function(t,n,e,r){var i;if(null==t)i=e*ec,r.point(-nc,i),r.point(0,i),r.point(nc,i),r.point(nc,0),r.point(nc,-i),r.point(0,-i),r.point(-nc,-i),r.point(-nc,0),r.point(-nc,i);else if(ac(t[0]-n[0])>tc){var o=t[0]<n[0]?nc:-nc;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])},[-nc,-ec]);var vs=function(t){var n=sc(t),e=6*uc,r=n>0,i=ac(n)>tc;function o(t,e){return sc(t)*sc(e)>n}function u(t,e,r){var i=[1,0,0],o=Gc(Yc(t),Yc(e)),u=Wc(o,o),a=o[0],c=u-a*a;if(!c)return!r&&t;var f=n*u/c,s=-n*a/c,l=Gc(i,o),h=Hc(i,f);Vc(h,Hc(o,s));var d=l,p=Wc(h,d),v=Wc(d,d),g=p*p-v*(Wc(h,h)-1);if(!(g<0)){var y=yc(g),b=Hc(d,(-p-y)/v);if(Vc(b,h),b=qc(b),!r)return b;var _,m=t[0],x=e[0],w=t[1],M=e[1];x<m&&(_=m,m=x,x=_);var S=x-m,E=ac(S-nc)<tc;if(!E&&M<w&&(_=w,w=M,M=_),E||S<tc?E?w+M>0^b[1]<(ac(b[0]-m)<tc?w:M):w<=b[1]&&b[1]<=M:S>nc^(m<=b[0]&&b[0]<=x)){var k=Hc(d,(-p+y)/v);return Vc(k,h),[b,qc(k)]}}}function a(n,e){var i=r?t:nc-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return ls(o,function(t){var n,e,c,f,s;return{lineStart:function(){f=c=!1,s=1},point:function(l,h){var d,p=[l,h],v=o(l,h),g=r?v?0:a(l,h):v?a(l+(l<0?nc:-nc),h):0;if(!n&&(f=c=v)&&t.lineStart(),v!==c&&(!(d=u(n,p))||os(n,d)||os(p,d))&&(p[0]+=tc,p[1]+=tc,v=o(p[0],p[1])),v!==c)s=0,v?(t.lineStart(),d=u(p,n),t.point(d[0],d[1])):(d=u(n,p),t.point(d[0],d[1]),t.lineEnd()),n=d;else if(i&&n&&r^v){var y;g&e||!(y=u(p,n,!0))||(s=0,r?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!v||n&&os(n,p)||t.point(p[0],p[1]),n=p,c=v,e=g},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return s|(f&&c)<<1}}},function(n,r,i,o){ns(o,t,e,i,n,r)},r?[0,-t]:[-nc,t-nc])},gs=function(t,n,e,r,i,o){var u,a=t[0],c=t[1],f=0,s=1,l=n[0]-a,h=n[1]-c;if(u=e-a,l||!(u>0)){if(u/=l,l<0){if(u<f)return;u<s&&(s=u)}else if(l>0){if(u>s)return;u>f&&(f=u)}if(u=i-a,l||!(u<0)){if(u/=l,l<0){if(u>s)return;u>f&&(f=u)}else if(l>0){if(u<f)return;u<s&&(s=u)}if(u=r-c,h||!(u>0)){if(u/=h,h<0){if(u<f)return;u<s&&(s=u)}else if(h>0){if(u>s)return;u>f&&(f=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>s)return;u>f&&(f=u)}else if(h>0){if(u<f)return;u<s&&(s=u)}return f>0&&(t[0]=a+f*l,t[1]=c+f*h),s<1&&(n[0]=a+s*l,n[1]=c+s*h),!0}}}}},ys=1e9,bs=-ys;function _s(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,a,f){var s=0,l=0;if(null==i||(s=u(i,a))!==(l=u(o,a))||c(i,o)<0^a>0)do{f.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+a+4)%4)!==l);else f.point(o[0],o[1])}function u(r,i){return ac(r[0]-t)<tc?i>0?0:3:ac(r[0]-e)<tc?i>0?2:1:ac(r[1]-n)<tc?i>0?1:0:i>0?3:2}function a(t,n){return c(t.x,n.x)}function c(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){var c,f,s,l,h,d,p,v,g,y,b,_=u,m=is(),x={point:w,lineStart:function(){x.point=M,f&&f.push(s=[]);y=!0,g=!1,p=v=NaN},lineEnd:function(){c&&(M(l,h),d&&g&&m.rejoin(),c.push(m.result()));x.point=w,g&&_.lineEnd()},polygonStart:function(){_=m,c=[],f=[],b=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=f.length;e<i;++e)for(var o,u,a=f[e],c=1,s=a.length,l=a[0],h=l[0],d=l[1];c<s;++c)o=h,u=d,l=a[c],h=l[0],d=l[1],u<=r?d>r&&(h-o)*(r-u)>(d-u)*(t-o)&&++n:d<=r&&(h-o)*(r-u)<(d-u)*(t-o)&&--n;return n}(),e=b&&n,i=(c=L(c)).length;(e||i)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&as(c,a,n,o,u),u.polygonEnd());_=u,c=f=s=null}};function w(t,n){i(t,n)&&_.point(t,n)}function M(o,u){var a=i(o,u);if(f&&s.push([o,u]),y)l=o,h=u,d=a,y=!1,a&&(_.lineStart(),_.point(o,u));else if(a&&g)_.point(o,u);else{var c=[p=Math.max(bs,Math.min(ys,p)),v=Math.max(bs,Math.min(ys,v))],m=[o=Math.max(bs,Math.min(ys,o)),u=Math.max(bs,Math.min(ys,u))];gs(c,m,t,n,e,r)?(g||(_.lineStart(),_.point(c[0],c[1])),_.point(m[0],m[1]),a||_.lineEnd(),b=!1):a&&(_.lineStart(),_.point(o,u),b=!1)}p=o,v=u,g=a}return x}}var ms,xs,ws,Ms=function(){var t,n,e,r=0,i=0,o=960,u=500;return e={stream:function(e){return t&&n===e?t:t=_s(r,i,o,u)(n=e)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=n=null,e):[[r,i],[o,u]]}}},Ss=Za(),Es={sphere:wc,point:wc,lineStart:function(){Es.point=As,Es.lineEnd=ks},lineEnd:wc,polygonStart:wc,polygonEnd:wc};function ks(){Es.point=Es.lineEnd=wc}function As(t,n){ms=t*=uc,xs=vc(n*=uc),ws=sc(n),Es.point=Ns}function Ns(t,n){t*=uc;var e=vc(n*=uc),r=sc(n),i=ac(t-ms),o=sc(i),u=r*vc(i),a=ws*e-xs*r*o,c=xs*e+ws*r*o;Ss.add(fc(yc(u*u+a*a),c)),ms=t,xs=e,ws=r}var Ts=function(t){return Ss.reset(),Rc(t,Es),+Ss},Ps=[null,null],Os={type:"LineString",coordinates:Ps},Cs=function(t,n){return Ps[0]=t,Ps[1]=n,Ts(Os)},Rs={Feature:function(t,n){return Fs(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(Fs(e[r].geometry,n))return!0;return!1}},Is={Sphere:function(){return!0},Point:function(t,n){return js(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(js(e[r],n))return!0;return!1},LineString:function(t,n){return Ls(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Ls(e[r],n))return!0;return!1},Polygon:function(t,n){return zs(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(zs(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(Fs(e[r],n))return!0;return!1}};function Fs(t,n){return!(!t||!Is.hasOwnProperty(t.type))&&Is[t.type](t,n)}function js(t,n){return 0===Cs(t,n)}function Ls(t,n){var e=Cs(t[0],t[1]);return Cs(t[0],n)+Cs(n,t[1])<=e+tc}function zs(t,n){return!!ss(t.map(Ds),Us(n))}function Ds(t){return(t=t.map(Us)).pop(),t}function Us(t){return[t[0]*uc,t[1]*uc]}var Bs=function(t,n){return(t&&Rs.hasOwnProperty(t.type)?Rs[t.type]:Fs)(t,n)};function qs(t,n,e){var r=w(t,n-tc,e).concat(n);return function(t){return r.map(function(n){return[t,n]})}}function Ys(t,n,e){var r=w(t,n-tc,e).concat(n);return function(t){return r.map(function(n){return[n,t]})}}function Ws(){var t,n,e,r,i,o,u,a,c,f,s,l,h=10,d=h,p=90,v=360,g=2.5;function y(){return{type:"MultiLineString",coordinates:b()}}function b(){return w(lc(r/p)*p,e,p).map(s).concat(w(lc(a/v)*v,u,v).map(l)).concat(w(lc(n/h)*h,t,h).filter(function(t){return ac(t%p)>tc}).map(c)).concat(w(lc(o/d)*d,i,d).filter(function(t){return ac(t%v)>tc}).map(f))}return y.lines=function(){return b().map(function(t){return{type:"LineString",coordinates:t}})},y.outline=function(){return{type:"Polygon",coordinates:[s(r).concat(l(u).slice(1),s(e).reverse().slice(1),l(a).reverse().slice(1))]}},y.extent=function(t){return arguments.length?y.extentMajor(t).extentMinor(t):y.extentMinor()},y.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],u=+t[1][1],r>e&&(t=r,r=e,e=t),a>u&&(t=a,a=u,u=t),y.precision(g)):[[r,a],[e,u]]},y.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),y.precision(g)):[[n,o],[t,i]]},y.step=function(t){return arguments.length?y.stepMajor(t).stepMinor(t):y.stepMinor()},y.stepMajor=function(t){return arguments.length?(p=+t[0],v=+t[1],y):[p,v]},y.stepMinor=function(t){return arguments.length?(h=+t[0],d=+t[1],y):[h,d]},y.precision=function(h){return arguments.length?(g=+h,c=qs(o,i,90),f=Ys(n,t,g),s=qs(a,u,90),l=Ys(r,e,g),y):g},y.extentMajor([[-180,-90+tc],[180,90-tc]]).extentMinor([[-180,-80-tc],[180,80+tc]])}function Gs(){return Ws()()}var Vs,Hs,Xs,$s,Zs=function(t,n){var e=t[0]*uc,r=t[1]*uc,i=n[0]*uc,o=n[1]*uc,u=sc(r),a=vc(r),c=sc(o),f=vc(o),s=u*sc(e),l=u*vc(e),h=c*sc(i),d=c*vc(i),p=2*mc(yc(xc(o-r)+u*c*xc(i-e))),v=vc(p),g=p?function(t){var n=vc(t*=p)/v,e=vc(p-t)/v,r=e*s+n*h,i=e*l+n*d,o=e*a+n*f;return[fc(i,r)*oc,fc(o,yc(r*r+i*i))*oc]}:function(){return[e*oc,r*oc]};return g.distance=p,g},Js=function(t){return t},Qs=Za(),Ks=Za(),tl={point:wc,lineStart:wc,lineEnd:wc,polygonStart:function(){tl.lineStart=nl,tl.lineEnd=il},polygonEnd:function(){tl.lineStart=tl.lineEnd=tl.point=wc,Qs.add(ac(Ks)),Ks.reset()},result:function(){var t=Qs/2;return Qs.reset(),t}};function nl(){tl.point=el}function el(t,n){tl.point=rl,Vs=Xs=t,Hs=$s=n}function rl(t,n){Ks.add($s*t-Xs*n),Xs=t,$s=n}function il(){rl(Vs,Hs)}var ol=tl,ul=1/0,al=ul,cl=-ul,fl=cl;var sl,ll,hl,dl,pl={point:function(t,n){t<ul&&(ul=t);t>cl&&(cl=t);n<al&&(al=n);n>fl&&(fl=n)},lineStart:wc,lineEnd:wc,polygonStart:wc,polygonEnd:wc,result:function(){var t=[[ul,al],[cl,fl]];return cl=fl=-(al=ul=1/0),t}},vl=0,gl=0,yl=0,bl=0,_l=0,ml=0,xl=0,wl=0,Ml=0,Sl={point:El,lineStart:kl,lineEnd:Tl,polygonStart:function(){Sl.lineStart=Pl,Sl.lineEnd=Ol},polygonEnd:function(){Sl.point=El,Sl.lineStart=kl,Sl.lineEnd=Tl},result:function(){var t=Ml?[xl/Ml,wl/Ml]:ml?[bl/ml,_l/ml]:yl?[vl/yl,gl/yl]:[NaN,NaN];return vl=gl=yl=bl=_l=ml=xl=wl=Ml=0,t}};function El(t,n){vl+=t,gl+=n,++yl}function kl(){Sl.point=Al}function Al(t,n){Sl.point=Nl,El(hl=t,dl=n)}function Nl(t,n){var e=t-hl,r=n-dl,i=yc(e*e+r*r);bl+=i*(hl+t)/2,_l+=i*(dl+n)/2,ml+=i,El(hl=t,dl=n)}function Tl(){Sl.point=El}function Pl(){Sl.point=Cl}function Ol(){Rl(sl,ll)}function Cl(t,n){Sl.point=Rl,El(sl=hl=t,ll=dl=n)}function Rl(t,n){var e=t-hl,r=n-dl,i=yc(e*e+r*r);bl+=i*(hl+t)/2,_l+=i*(dl+n)/2,ml+=i,xl+=(i=dl*t-hl*n)*(hl+t),wl+=i*(dl+n),Ml+=3*i,El(hl=t,dl=n)}var Il=Sl;function Fl(t){this._context=t}Fl.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,ic)}},result:wc};var jl,Ll,zl,Dl,Ul,Bl=Za(),ql={point:wc,lineStart:function(){ql.point=Yl},lineEnd:function(){jl&&Wl(Ll,zl),ql.point=wc},polygonStart:function(){jl=!0},polygonEnd:function(){jl=null},result:function(){var t=+Bl;return Bl.reset(),t}};function Yl(t,n){ql.point=Wl,Ll=Dl=t,zl=Ul=n}function Wl(t,n){Dl-=t,Ul-=n,Bl.add(yc(Dl*Dl+Ul*Ul)),Dl=t,Ul=n}var Gl=ql;function Vl(){this._string=[]}function Hl(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Vl.prototype={_radius:4.5,_circle:Hl(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Hl(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var Xl=function(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),Rc(t,e(r))),r.result()}return o.area=function(t){return Rc(t,e(ol)),ol.result()},o.measure=function(t){return Rc(t,e(Gl)),Gl.result()},o.bounds=function(t){return Rc(t,e(pl)),pl.result()},o.centroid=function(t){return Rc(t,e(Il)),Il.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,Js):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new Vl):new Fl(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)},$l=function(t){return{stream:Zl(t)}};function Zl(t){return function(n){var e=new Jl;for(var r in t)e[r]=t[r];return e.stream=n,e}}function Jl(){}function Ql(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Rc(e,t.stream(pl)),n(pl.result()),null!=r&&t.clipExtent(r),t}function Kl(t,n,e){return Ql(t,function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),u=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,a=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([u,a])},e)}function th(t,n,e){return Kl(t,[[0,0],n],e)}function nh(t,n,e){return Ql(t,function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,u=-i*e[0][1];t.scale(150*i).translate([o,u])},e)}function eh(t,n,e){return Ql(t,function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],u=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,u])},e)}Jl.prototype={constructor:Jl,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var rh=16,ih=sc(30*uc),oh=function(t,n){return+n?function(t,n){function e(r,i,o,u,a,c,f,s,l,h,d,p,v,g){var y=f-r,b=s-i,_=y*y+b*b;if(_>4*n&&v--){var m=u+h,x=a+d,w=c+p,M=yc(m*m+x*x+w*w),S=mc(w/=M),E=ac(ac(w)-1)<tc||ac(o-l)<tc?(o+l)/2:fc(x,m),k=t(E,S),A=k[0],N=k[1],T=A-r,P=N-i,O=b*T-y*P;(O*O/_>n||ac((y*T+b*P)/_-.5)>.3||u*h+a*d+c*p<ih)&&(e(r,i,o,u,a,c,A,N,E,m/=M,x/=M,w,v,g),g.point(A,N),e(A,N,E,m,x,w,f,s,l,h,d,p,v,g))}}return function(n){var r,i,o,u,a,c,f,s,l,h,d,p,v={point:g,lineStart:y,lineEnd:_,polygonStart:function(){n.polygonStart(),v.lineStart=m},polygonEnd:function(){n.polygonEnd(),v.lineStart=y}};function g(e,r){e=t(e,r),n.point(e[0],e[1])}function y(){s=NaN,v.point=b,n.lineStart()}function b(r,i){var o=Yc([r,i]),u=t(r,i);e(s,l,f,h,d,p,s=u[0],l=u[1],f=r,h=o[0],d=o[1],p=o[2],rh,n),n.point(s,l)}function _(){v.point=g,n.lineEnd()}function m(){y(),v.point=x,v.lineEnd=w}function x(t,n){b(r=t,n),i=s,o=l,u=h,a=d,c=p,v.point=b}function w(){e(s,l,f,h,d,p,i,o,r,u,a,c,rh,n),v.lineEnd=_,_()}return v}}(t,n):function(t){return Zl({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)};var uh=Zl({point:function(t,n){this.stream.point(t*uc,n*uc)}});function ah(t,n,e,r){var i=sc(r),o=vc(r),u=i*t,a=o*t,c=i/t,f=o/t,s=(o*e-i*n)/t,l=(o*n+i*e)/t;function h(t,r){return[u*t-a*r+n,e-a*t-u*r]}return h.invert=function(t,n){return[c*t-f*n+s,l-f*t-c*n]},h}function ch(t){return fh(function(){return t})()}function fh(t){var n,e,r,i,o,u,a,c,f,s,l=150,h=480,d=250,p=0,v=0,g=0,y=0,b=0,_=0,m=null,x=ps,w=null,M=Js,S=.5;function E(t){return c(t[0]*uc,t[1]*uc)}function k(t){return(t=c.invert(t[0],t[1]))&&[t[0]*oc,t[1]*oc]}function A(){var t=ah(l,0,0,_).apply(null,n(p,v)),r=(_?ah:function(t,n,e){function r(r,i){return[n+t*r,e-t*i]}return r.invert=function(r,i){return[(r-n)/t,(e-i)/t]},r})(l,h-t[0],d-t[1],_);return e=Zf(g,y,b),a=Xf(n,r),c=Xf(e,a),u=oh(a,S),N()}function N(){return f=s=null,E}return E.stream=function(t){return f&&s===t?f:f=uh(function(t){return Zl({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(x(u(M(s=t)))))},E.preclip=function(t){return arguments.length?(x=t,m=void 0,N()):x},E.postclip=function(t){return arguments.length?(M=t,w=r=i=o=null,N()):M},E.clipAngle=function(t){return arguments.length?(x=+t?vs(m=t*uc):(m=null,ps),N()):m*oc},E.clipExtent=function(t){return arguments.length?(M=null==t?(w=r=i=o=null,Js):_s(w=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),N()):null==w?null:[[w,r],[i,o]]},E.scale=function(t){return arguments.length?(l=+t,A()):l},E.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],A()):[h,d]},E.center=function(t){return arguments.length?(p=t[0]%360*uc,v=t[1]%360*uc,A()):[p*oc,v*oc]},E.rotate=function(t){return arguments.length?(g=t[0]%360*uc,y=t[1]%360*uc,b=t.length>2?t[2]%360*uc:0,A()):[g*oc,y*oc,b*oc]},E.angle=function(t){return arguments.length?(_=t%360*uc,A()):_*oc},E.precision=function(t){return arguments.length?(u=oh(a,S=t*t),N()):yc(S)},E.fitExtent=function(t,n){return Kl(E,t,n)},E.fitSize=function(t,n){return th(E,t,n)},E.fitWidth=function(t,n){return nh(E,t,n)},E.fitHeight=function(t,n){return eh(E,t,n)},function(){return n=t.apply(this,arguments),E.invert=n.invert&&k,A()}}function sh(t){var n=0,e=nc/3,r=fh(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*uc,e=t[1]*uc):[n*oc,e*oc]},i}function lh(t,n){var e=vc(t),r=(e+vc(n))/2;if(ac(r)<tc)return function(t){var n=sc(t);function e(t,e){return[t*n,vc(e)/n]}return e.invert=function(t,e){return[t/n,mc(e*n)]},e}(t);var i=1+e*(2*r-e),o=yc(i)/r;function u(t,n){var e=yc(i-2*r*vc(n))/r;return[e*vc(t*=r),o-e*sc(t)]}return u.invert=function(t,n){var e=o-n;return[fc(t,ac(e))/r*gc(e),mc((i-(t*t+e*e)*r*r)/(2*r))]},u}var hh=function(){return sh(lh).scale(155.424).center([0,33.6442])},dh=function(){return hh().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var ph=function(){var t,n,e,r,i,o,u=dh(),a=hh().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=hh().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(t,n){o=[t,n]}};function s(t){var n=t[0],u=t[1];return o=null,e.point(n,u),o||(r.point(n,u),o)||(i.point(n,u),o)}function l(){return t=n=null,s}return s.invert=function(t){var n=u.scale(),e=u.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:u).invert(t)},s.stream=function(e){return t&&n===e?t:(r=[u.stream(n=e),a.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},s.precision=function(t){return arguments.length?(u.precision(t),a.precision(t),c.precision(t),l()):u.precision()},s.scale=function(t){return arguments.length?(u.scale(t),a.scale(.35*t),c.scale(t),s.translate(u.translate())):u.scale()},s.translate=function(t){if(!arguments.length)return u.translate();var n=u.scale(),o=+t[0],s=+t[1];return e=u.translate(t).clipExtent([[o-.455*n,s-.238*n],[o+.455*n,s+.238*n]]).stream(f),r=a.translate([o-.307*n,s+.201*n]).clipExtent([[o-.425*n+tc,s+.12*n+tc],[o-.214*n-tc,s+.234*n-tc]]).stream(f),i=c.translate([o-.205*n,s+.212*n]).clipExtent([[o-.214*n+tc,s+.166*n+tc],[o-.115*n-tc,s+.234*n-tc]]).stream(f),l()},s.fitExtent=function(t,n){return Kl(s,t,n)},s.fitSize=function(t,n){return th(s,t,n)},s.fitWidth=function(t,n){return nh(s,t,n)},s.fitHeight=function(t,n){return eh(s,t,n)},s.scale(1070)};function vh(t){return function(n,e){var r=sc(n),i=sc(e),o=t(r*i);return[o*i*vc(n),o*vc(e)]}}function gh(t){return function(n,e){var r=yc(n*n+e*e),i=t(r),o=vc(i),u=sc(i);return[fc(n*o,r*u),mc(r&&e*o/r)]}}var yh=vh(function(t){return yc(2/(1+t))});yh.invert=gh(function(t){return 2*mc(t/2)});var bh=function(){return ch(yh).scale(124.75).clipAngle(179.999)},_h=vh(function(t){return(t=_c(t))&&t/vc(t)});_h.invert=gh(function(t){return t});var mh=function(){return ch(_h).scale(79.4188).clipAngle(179.999)};function xh(t,n){return[t,dc(bc((ec+n)/2))]}xh.invert=function(t,n){return[t,2*cc(hc(n))-ec]};var wh=function(){return Mh(xh).scale(961/ic)};function Mh(t){var n,e,r,i=ch(t),o=i.center,u=i.scale,a=i.translate,c=i.clipExtent,f=null;function s(){var o=nc*u(),a=i(ts(i.rotate()).invert([0,0]));return c(null==f?[[a[0]-o,a[1]-o],[a[0]+o,a[1]+o]]:t===xh?[[Math.max(a[0]-o,f),n],[Math.min(a[0]+o,e),r]]:[[f,Math.max(a[1]-o,n)],[e,Math.min(a[1]+o,r)]])}return i.scale=function(t){return arguments.length?(u(t),s()):u()},i.translate=function(t){return arguments.length?(a(t),s()):a()},i.center=function(t){return arguments.length?(o(t),s()):o()},i.clipExtent=function(t){return arguments.length?(null==t?f=n=e=r=null:(f=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),s()):null==f?null:[[f,n],[e,r]]},s()}function Sh(t){return bc((ec+t)/2)}function Eh(t,n){var e=sc(t),r=t===n?vc(t):dc(e/sc(n))/dc(Sh(n)/Sh(t)),i=e*pc(Sh(t),r)/r;if(!r)return xh;function o(t,n){i>0?n<-ec+tc&&(n=-ec+tc):n>ec-tc&&(n=ec-tc);var e=i/pc(Sh(n),r);return[e*vc(r*t),i-e*sc(r*t)]}return o.invert=function(t,n){var e=i-n,o=gc(r)*yc(t*t+e*e);return[fc(t,ac(e))/r*gc(e),2*cc(pc(i/o,1/r))-ec]},o}var kh=function(){return sh(Eh).scale(109.5).parallels([30,30])};function Ah(t,n){return[t,n]}Ah.invert=Ah;var Nh=function(){return ch(Ah).scale(152.63)};function Th(t,n){var e=sc(t),r=t===n?vc(t):(e-sc(n))/(n-t),i=e/r+t;if(ac(r)<tc)return Ah;function o(t,n){var e=i-n,o=r*t;return[e*vc(o),i-e*sc(o)]}return o.invert=function(t,n){var e=i-n;return[fc(t,ac(e))/r*gc(e),i-gc(r)*yc(t*t+e*e)]},o}var Ph=function(){return sh(Th).scale(131.154).center([0,13.9389])},Oh=1.340264,Ch=-.081106,Rh=893e-6,Ih=.003796,Fh=yc(3)/2;function jh(t,n){var e=mc(Fh*vc(n)),r=e*e,i=r*r*r;return[t*sc(e)/(Fh*(Oh+3*Ch*r+i*(7*Rh+9*Ih*r))),e*(Oh+Ch*r+i*(Rh+Ih*r))]}jh.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,u=0;u<12&&(o=(i=(r-=e=(r*(Oh+Ch*i+o*(Rh+Ih*i))-n)/(Oh+3*Ch*i+o*(7*Rh+9*Ih*i)))*r)*i*i,!(ac(e)<1e-12));++u);return[Fh*t*(Oh+3*Ch*i+o*(7*Rh+9*Ih*i))/sc(r),mc(vc(r)/Fh)]};var Lh=function(){return ch(jh).scale(177.158)};function zh(t,n){var e=sc(n),r=sc(t)*e;return[e*vc(t)/r,vc(n)/r]}zh.invert=gh(cc);var Dh=function(){return ch(zh).scale(144.049).clipAngle(60)};function Uh(t,n,e,r){return 1===t&&1===n&&0===e&&0===r?Js:Zl({point:function(i,o){this.stream.point(i*t+e,o*n+r)}})}var Bh=function(){var t,n,e,r,i,o,u=1,a=0,c=0,f=1,s=1,l=Js,h=null,d=Js;function p(){return r=i=null,o}return o={stream:function(t){return r&&i===t?r:r=l(d(i=t))},postclip:function(r){return arguments.length?(d=r,h=t=n=e=null,p()):d},clipExtent:function(r){return arguments.length?(d=null==r?(h=t=n=e=null,Js):_s(h=+r[0][0],t=+r[0][1],n=+r[1][0],e=+r[1][1]),p()):null==h?null:[[h,t],[n,e]]},scale:function(t){return arguments.length?(l=Uh((u=+t)*f,u*s,a,c),p()):u},translate:function(t){return arguments.length?(l=Uh(u*f,u*s,a=+t[0],c=+t[1]),p()):[a,c]},reflectX:function(t){return arguments.length?(l=Uh(u*(f=t?-1:1),u*s,a,c),p()):f<0},reflectY:function(t){return arguments.length?(l=Uh(u*f,u*(s=t?-1:1),a,c),p()):s<0},fitExtent:function(t,n){return Kl(o,t,n)},fitSize:function(t,n){return th(o,t,n)},fitWidth:function(t,n){return nh(o,t,n)},fitHeight:function(t,n){return eh(o,t,n)}}};function qh(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}qh.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,u=o*o;r-=e=(r*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(ac(e)>tc&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};var Yh=function(){return ch(qh).scale(175.295)};function Wh(t,n){return[sc(n)*vc(t),vc(n)]}Wh.invert=gh(mc);var Gh=function(){return ch(Wh).scale(249.5).clipAngle(90+tc)};function Vh(t,n){var e=sc(n),r=1+sc(t)*e;return[e*vc(t)/r,vc(n)/r]}Vh.invert=gh(function(t){return 2*cc(t)});var Hh=function(){return ch(Vh).scale(250).clipAngle(142)};function Xh(t,n){return[dc(bc((ec+n)/2)),-t]}Xh.invert=function(t,n){return[-n,2*cc(hc(t))-ec]};var $h=function(){var t=Mh(Xh),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)};function Zh(t,n){return t.parent===n.parent?1:2}function Jh(t,n){return t+n.x}function Qh(t,n){return Math.max(t,n.y)}var Kh=function(){var t=Zh,n=1,e=1,r=!1;function i(i){var o,u=0;i.eachAfter(function(n){var e=n.children;e?(n.x=function(t){return t.reduce(Jh,0)/t.length}(e),n.y=function(t){return 1+t.reduce(Qh,0)}(e)):(n.x=o?u+=t(n,o):0,n.y=0,o=n)});var a=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),f=a.x-t(a,c)/2,s=c.x+t(c,a)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-f)/(s-f)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i};function td(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function nd(t,n){var e,r,i,o,u,a=new od(t),c=+t.value&&(a.value=t.value),f=[a];for(null==n&&(n=ed);e=f.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)f.push(r=e.children[o]=new od(i[o])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(id)}function ed(t){return t.children}function rd(t){t.data=t.data.data}function id(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function od(t){this.data=t,this.depth=this.height=0,this.parent=null}od.prototype=nd.prototype={constructor:od,count:function(){return this.eachAfter(td)},each:function(t){var n,e,r,i,o=this,u=[o];do{for(n=u.reverse(),u=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)u.push(e[r])}while(u.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=u.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e})},sort:function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each(function(n){t.push(n)}),t},leaves:function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t},links:function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n},copy:function(){return nd(this).eachBefore(rd)}};var ud=Array.prototype.slice;var ad=function(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(ud.call(t))).length,o=[];r<i;)n=t[r],e&&sd(e,n)?++r:(e=hd(o=cd(o,n)),r=0);return e};function cd(t,n){var e,r;if(ld(n,t))return[n];for(e=0;e<t.length;++e)if(fd(n,t[e])&&ld(dd(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(fd(dd(t[e],t[r]),n)&&fd(dd(t[e],n),t[r])&&fd(dd(t[r],n),t[e])&&ld(pd(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function fd(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function sd(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function ld(t,n){for(var e=0;e<n.length;++e)if(!sd(t,n[e]))return!1;return!0}function hd(t){switch(t.length){case 1:return{x:(n=t[0]).x,y:n.y,r:n.r};case 2:return dd(t[0],t[1]);case 3:return pd(t[0],t[1],t[2])}var n}function dd(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,u=n.y,a=n.r,c=o-e,f=u-r,s=a-i,l=Math.sqrt(c*c+f*f);return{x:(e+o+c/l*s)/2,y:(r+u+f/l*s)/2,r:(l+i+a)/2}}function pd(t,n,e){var r=t.x,i=t.y,o=t.r,u=n.x,a=n.y,c=n.r,f=e.x,s=e.y,l=e.r,h=r-u,d=r-f,p=i-a,v=i-s,g=c-o,y=l-o,b=r*r+i*i-o*o,_=b-u*u-a*a+c*c,m=b-f*f-s*s+l*l,x=d*p-h*v,w=(p*m-v*_)/(2*x)-r,M=(v*g-p*y)/x,S=(d*_-h*m)/(2*x)-i,E=(h*y-d*g)/x,k=M*M+E*E-1,A=2*(o+w*M+S*E),N=w*w+S*S-o*o,T=-(k?(A+Math.sqrt(A*A-4*k*N))/(2*k):N/A);return{x:r+w+M*T,y:i+S+E*T,r:T}}function vd(t,n,e){var r,i,o,u,a=t.x-n.x,c=t.y-n.y,f=a*a+c*c;f?(i=n.r+e.r,i*=i,u=t.r+e.r,i>(u*=u)?(r=(f+u-i)/(2*f),o=Math.sqrt(Math.max(0,u/f-r*r)),e.x=t.x-r*a-o*c,e.y=t.y-r*c+o*a):(r=(f+i-u)/(2*f),o=Math.sqrt(Math.max(0,i/f-r*r)),e.x=n.x+r*a-o*c,e.y=n.y+r*c+o*a)):(e.x=n.x+e.r,e.y=n.y)}function gd(t,n){var e=t.r+n.r-1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function yd(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function bd(t){this._=t,this.next=null,this.previous=null}function _d(t){if(!(i=t.length))return 0;var n,e,r,i,o,u,a,c,f,s,l;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;vd(e,n,r=t[2]),n=new bd(n),e=new bd(e),r=new bd(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(a=3;a<i;++a){vd(n._,e._,r=t[a]),r=new bd(r),c=e.next,f=n.previous,s=e._.r,l=n._.r;do{if(s<=l){if(gd(c._,r._)){e=c,n.next=e,e.previous=n,--a;continue t}s+=c._.r,c=c.next}else{if(gd(f._,r._)){(n=f).next=e,e.previous=n,--a;continue t}l+=f._.r,f=f.previous}}while(c!==f.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=yd(n);(r=r.next)!==e;)(u=yd(r))<o&&(n=r,o=u);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=ad(n),a=0;a<i;++a)(n=t[a]).x-=r.x,n.y-=r.y;return r.r}var md=function(t){return _d(t),t};function xd(t){if("function"!=typeof t)throw new Error;return t}function wd(){return 0}var Md=function(t){return function(){return t}};function Sd(t){return Math.sqrt(t.value)}var Ed=function(){var t=null,n=1,e=1,r=wd;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(kd(t)).eachAfter(Ad(r,.5)).eachBefore(Nd(1)):i.eachBefore(kd(Sd)).eachAfter(Ad(wd,1)).eachAfter(Ad(r,i.r/Math.min(n,e))).eachBefore(Nd(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=null==(e=n)?null:xd(e),i):t;var e},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Md(+t),i):r},i};function kd(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function Ad(t,n){return function(e){if(r=e.children){var r,i,o,u=r.length,a=t(e)*n||0;if(a)for(i=0;i<u;++i)r[i].r+=a;if(o=_d(r),a)for(i=0;i<u;++i)r[i].r-=a;e.r=o+a}}}function Nd(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}var Td=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},Pd=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(r-n)/t.value;++a<c;)(o=u[a]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*f},Od=function(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&Pd(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,u=r.x1-e,a=r.y1-e;u<i&&(i=u=(i+u)/2),a<o&&(o=a=(o+a)/2),r.x0=i,r.y0=o,r.x1=u,r.y1=a}}(n,o)),r&&i.eachBefore(Td),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i},Cd="$",Rd={depth:-1},Id={};function Fd(t){return t.id}function jd(t){return t.parentId}var Ld=function(){var t=Fd,n=jd;function e(e){var r,i,o,u,a,c,f,s=e.length,l=new Array(s),h={};for(i=0;i<s;++i)r=e[i],a=l[i]=new od(r),null!=(c=t(r,i,e))&&(c+="")&&(h[f=Cd+(a.id=c)]=f in h?Id:a);for(i=0;i<s;++i)if(a=l[i],null!=(c=n(e[i],i,e))&&(c+="")){if(!(u=h[Cd+c]))throw new Error("missing: "+c);if(u===Id)throw new Error("ambiguous: "+c);u.children?u.children.push(a):u.children=[a],a.parent=u}else{if(o)throw new Error("multiple roots");o=a}if(!o)throw new Error("no root");if(o.parent=Rd,o.eachBefore(function(t){t.depth=t.parent.depth+1,--s}).eachBefore(id),o.parent=null,s>0)throw new Error("cycle");return o}return e.id=function(n){return arguments.length?(t=xd(n),e):t},e.parentId=function(t){return arguments.length?(n=xd(t),e):n},e};function zd(t,n){return t.parent===n.parent?1:2}function Dd(t){var n=t.children;return n?n[0]:t.t}function Ud(t){var n=t.children;return n?n[n.length-1]:t.t}function Bd(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function qd(t,n,e){return t.a.parent===n.parent?t.a:e}function Yd(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}Yd.prototype=Object.create(od.prototype);var Wd=function(){var t=zd,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,o,u=new Yd(t,0),a=[u];n=a.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)a.push(e=n.children[i]=new Yd(r[i],i)),e.parent=n;return(u.parent=new Yd(null,0)).children=[u],u}(i);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(u),r)i.eachBefore(a);else{var f=i,s=i,l=i;i.eachBefore(function(t){t.x<f.x&&(f=t),t.x>s.x&&(s=t),t.depth>l.depth&&(l=t)});var h=f===s?1:t(f,s)/2,d=h-f.x,p=n/(s.x+h+d),v=e/(l.depth||1);i.eachBefore(function(t){t.x=(t.x+d)*p,t.y=t.depth*v})}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,u=n,a=e,c=o.parent.children[0],f=o.m,s=u.m,l=a.m,h=c.m;a=Ud(a),o=Dd(o),a&&o;)c=Dd(c),(u=Ud(u)).a=n,(i=a.z+l-o.z-f+t(a._,o._))>0&&(Bd(qd(a,n,r),n,i),f+=i,s+=i),l+=a.m,f+=o.m,h+=c.m,s+=u.m;a&&!Ud(u)&&(u.t=a,u.m+=l-s),o&&!Dd(c)&&(c.t=o,c.m+=f-h,r=n)}return r}(n,i,n.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function a(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i},Gd=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(i-e)/t.value;++a<c;)(o=u[a]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*f},Vd=(1+Math.sqrt(5))/2;function Hd(t,n,e,r,i,o){for(var u,a,c,f,s,l,h,d,p,v,g,y=[],b=n.children,_=0,m=0,x=b.length,w=n.value;_<x;){c=i-e,f=o-r;do{s=b[m++].value}while(!s&&m<x);for(l=h=s,g=s*s*(v=Math.max(f/c,c/f)/(w*t)),p=Math.max(h/g,g/l);m<x;++m){if(s+=a=b[m].value,a<l&&(l=a),a>h&&(h=a),g=s*s*v,(d=Math.max(h/g,g/l))>p){s-=a;break}p=d}y.push(u={value:s,dice:c<f,children:b.slice(_,m)}),u.dice?Pd(u,e,r,i,w?r+=f*s/w:o):Gd(u,e,r,w?e+=c*s/w:i,o),w-=s,_=m}return y}var Xd=function t(n){function e(t,e,r,i,o){Hd(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(Vd),$d=function(){var t=Xd,n=!1,e=1,r=1,i=[0],o=wd,u=wd,a=wd,c=wd,f=wd;function s(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(l),i=[0],n&&t.eachBefore(Td),t}function l(n){var e=i[n.depth],r=n.x0+e,s=n.y0+e,l=n.x1-e,h=n.y1-e;l<r&&(r=l=(r+l)/2),h<s&&(s=h=(s+h)/2),n.x0=r,n.y0=s,n.x1=l,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=f(n)-e,s+=u(n)-e,(l-=a(n)-e)<r&&(r=l=(r+l)/2),(h-=c(n)-e)<s&&(s=h=(s+h)/2),t(n,r,s,l,h))}return s.round=function(t){return arguments.length?(n=!!t,s):n},s.size=function(t){return arguments.length?(e=+t[0],r=+t[1],s):[e,r]},s.tile=function(n){return arguments.length?(t=xd(n),s):t},s.padding=function(t){return arguments.length?s.paddingInner(t).paddingOuter(t):s.paddingInner()},s.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Md(+t),s):o},s.paddingOuter=function(t){return arguments.length?s.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):s.paddingTop()},s.paddingTop=function(t){return arguments.length?(u="function"==typeof t?t:Md(+t),s):u},s.paddingRight=function(t){return arguments.length?(a="function"==typeof t?t:Md(+t),s):a},s.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:Md(+t),s):c},s.paddingLeft=function(t){return arguments.length?(f="function"==typeof t?t:Md(+t),s):f},s},Zd=function(t,n,e,r,i){var o,u,a=t.children,c=a.length,f=new Array(c+1);for(f[0]=u=o=0;o<c;++o)f[o+1]=u+=a[o].value;!function t(n,e,r,i,o,u,c){if(n>=e-1){var s=a[n];return s.x0=i,s.y0=o,s.x1=u,void(s.y1=c)}var l=f[n],h=r/2+l,d=n+1,p=e-1;for(;d<p;){var v=d+p>>>1;f[v]<h?d=v+1:p=v}h-f[d-1]<f[d]-h&&n+1<d&&--d;var g=f[d]-l,y=r-g;if(u-i>c-o){var b=(i*y+u*g)/r;t(n,d,g,i,o,b,c),t(d,e,y,b,o,u,c)}else{var _=(o*y+c*g)/r;t(n,d,g,i,o,u,_),t(d,e,y,i,_,u,c)}}(0,c,t.value,n,e,r,i)},Jd=function(t,n,e,r,i){(1&t.depth?Gd:Pd)(t,n,e,r,i)},Qd=function t(n){function e(t,e,r,i,o){if((u=t._squarify)&&u.ratio===n)for(var u,a,c,f,s,l=-1,h=u.length,d=t.value;++l<h;){for(c=(a=u[l]).children,f=a.value=0,s=c.length;f<s;++f)a.value+=c[f].value;a.dice?Pd(a,e,r,i,r+=(o-r)*a.value/d):Gd(a,e,r,e+=(i-e)*a.value/d,o),d-=a.value}else t._squarify=u=Hd(n,t,e,r,i,o),u.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(Vd),Kd=function(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2},tp=function(t){for(var n,e,r=-1,i=t.length,o=0,u=0,a=t[i-1],c=0;++r<i;)n=a,a=t[r],c+=e=n[0]*a[1]-a[0]*n[1],o+=(n[0]+a[0])*e,u+=(n[1]+a[1])*e;return[o/(c*=3),u/c]},np=function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])};function ep(t,n){return t[0]-n[0]||t[1]-n[1]}function rp(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&np(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}var ip=function(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(ep),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=rp(r),u=rp(i),a=u[0]===o[0],c=u[u.length-1]===o[o.length-1],f=[];for(n=o.length-1;n>=0;--n)f.push(t[r[o[n]][2]]);for(n=+a;n<u.length-c;++n)f.push(t[r[u[n]][2]]);return f},op=function(t,n){for(var e,r,i=t.length,o=t[i-1],u=n[0],a=n[1],c=o[0],f=o[1],s=!1,l=0;l<i;++l)e=(o=t[l])[0],(r=o[1])>a!=f>a&&u<(c-e)*(a-r)/(f-r)+e&&(s=!s),c=e,f=r;return s},up=function(t){for(var n,e,r=-1,i=t.length,o=t[i-1],u=o[0],a=o[1],c=0;++r<i;)n=u,e=a,n-=u=(o=t[r])[0],e-=a=o[1],c+=Math.sqrt(n*n+e*e);return c},ap=function(){return Math.random()},cp=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(ap),fp=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(ap),sp=function t(n){function e(){var t=fp.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(ap),lp=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(ap),hp=function t(n){function e(t){var e=lp.source(n)(t);return function(){return e()/t}}return e.source=t,e}(ap),dp=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(ap);function pp(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}function vp(t,n){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(n).domain(t)}return this}var gp=Array.prototype,yp=gp.map,bp=gp.slice,_p={name:"implicit"};function mp(){var t=Zo(),n=[],e=[],r=_p;function i(i){var o=i+"",u=t.get(o);if(!u){if(r!==_p)return r;t.set(o,u=n.push(i))}return e[(u-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=Zo();for(var r,o,u=-1,a=e.length;++u<a;)t.has(o=(r=e[u])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=bp.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return mp(n,e).unknown(r)},pp.apply(i,arguments),i}function xp(){var t,n,e=mp().unknown(void 0),r=e.domain,i=e.range,o=[0,1],u=!1,a=0,c=0,f=.5;function s(){var e=r().length,s=o[1]<o[0],l=o[s-0],h=o[1-s];t=(h-l)/Math.max(1,e-a+2*c),u&&(t=Math.floor(t)),l+=(h-l-t*(e-a))*f,n=t*(1-a),u&&(l=Math.round(l),n=Math.round(n));var d=w(e).map(function(n){return l+t*n});return i(s?d.reverse():d)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),s()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],s()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],u=!0,s()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,s()):u},e.padding=function(t){return arguments.length?(a=Math.min(1,c=+t),s()):a},e.paddingInner=function(t){return arguments.length?(a=Math.min(1,t),s()):a},e.paddingOuter=function(t){return arguments.length?(c=+t,s()):c},e.align=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),s()):f},e.copy=function(){return xp(r(),o).round(u).paddingInner(a).paddingOuter(c).align(f)},pp.apply(s(),arguments)}function wp(){return function t(n){var e=n.copy;return n.padding=n.paddingOuter,delete n.paddingInner,delete n.paddingOuter,n.copy=function(){return t(e())},n}(xp.apply(null,arguments).paddingInner(1))}var Mp=function(t){return function(){return t}},Sp=function(t){return+t},Ep=[0,1];function kp(t){return t}function Ap(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:Mp(isNaN(n)?NaN:.5)}function Np(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function Tp(t,n,e){var r=t[0],i=t[1],o=n[0],u=n[1];return i<r?(r=Ap(i,r),o=e(u,o)):(r=Ap(r,i),o=e(o,u)),function(t){return o(r(t))}}function Pp(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),u=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<r;)i[u]=Ap(t[u],t[u+1]),o[u]=e(n[u],n[u+1]);return function(n){var e=c(t,n,1,r)-1;return o[e](i[e](n))}}function Op(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Cp(){var t,n,e,r,i,o,u=Ep,a=Ep,c=Xe,f=kp;function s(){return r=Math.min(u.length,a.length)>2?Pp:Tp,i=o=null,l}function l(n){return isNaN(n=+n)?e:(i||(i=r(u.map(t),a,c)))(t(f(n)))}return l.invert=function(e){return f(n((o||(o=r(a,u.map(t),De)))(e)))},l.domain=function(t){return arguments.length?(u=yp.call(t,Sp),f===kp||(f=Np(u)),s()):u.slice()},l.range=function(t){return arguments.length?(a=bp.call(t),s()):a.slice()},l.rangeRound=function(t){return a=bp.call(t),c=Je,s()},l.clamp=function(t){return arguments.length?(f=t?Np(u):kp,l):f!==kp},l.interpolate=function(t){return arguments.length?(c=t,s()):c},l.unknown=function(t){return arguments.length?(e=t,l):e},function(e,r){return t=e,n=r,s()}}function Rp(t,n){return Cp()(t,n)}var Ip=function(t,n,e,r){var i,o=N(t,n,e);switch((r=Ia(null==r?",f":r)).type){case"s":var u=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=Xa(o,u))||(r.precision=i),Da(r,u);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=$a(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=Ha(o))||(r.precision=i-2*("%"===r.type))}return za(r)};function Fp(t){var n=t.domain;return t.ticks=function(t){var e=n();return k(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return Ip(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],c=i[u];return c<a&&(r=a,a=c,c=r,r=o,o=u,u=r),(r=A(a,c,e))>0?r=A(a=Math.floor(a/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=A(a=Math.ceil(a*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(c*r)/r,n(i)),t},t}function jp(){var t=Rp(kp,kp);return t.copy=function(){return Op(t,jp())},pp.apply(t,arguments),Fp(t)}function Lp(t){var n;function e(t){return isNaN(t=+t)?n:t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=yp.call(n,Sp),e):t.slice()},e.unknown=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return Lp(t).unknown(n)},t=arguments.length?yp.call(t,Sp):[0,1],Fp(e)}var zp=function(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],u=t[i];return u<o&&(e=r,r=i,i=e,e=o,o=u,u=e),t[r]=n.floor(o),t[i]=n.ceil(u),t};function Dp(t){return Math.log(t)}function Up(t){return Math.exp(t)}function Bp(t){return-Math.log(-t)}function qp(t){return-Math.exp(-t)}function Yp(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Wp(t){return function(n){return-t(-n)}}function Gp(t){var n,e,r=t(Dp,Up),i=r.domain,o=10;function u(){return n=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}(o),e=function(t){return 10===t?Yp:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}(o),i()[0]<0?(n=Wp(n),e=Wp(e),t(Bp,qp)):t(Dp,Up),r}return r.base=function(t){return arguments.length?(o=+t,u()):o},r.domain=function(t){return arguments.length?(i(t),u()):i()},r.ticks=function(t){var r,u=i(),a=u[0],c=u[u.length-1];(r=c<a)&&(h=a,a=c,c=h);var f,s,l,h=n(a),d=n(c),p=null==t?10:+t,v=[];if(!(o%1)&&d-h<p){if(h=Math.round(h)-1,d=Math.round(d)+1,a>0){for(;h<d;++h)for(s=1,f=e(h);s<o;++s)if(!((l=f*s)<a)){if(l>c)break;v.push(l)}}else for(;h<d;++h)for(s=o-1,f=e(h);s>=1;--s)if(!((l=f*s)<a)){if(l>c)break;v.push(l)}}else v=k(h,d,Math.min(d-h,p)).map(e);return r?v.reverse():v},r.tickFormat=function(t,i){if(null==i&&(i=10===o?".0e":","),"function"!=typeof i&&(i=za(i)),t===1/0)return i;null==t&&(t=10);var u=Math.max(1,o*t/r.ticks().length);return function(t){var r=t/e(Math.round(n(t)));return r*o<o-.5&&(r*=o),r<=u?i(t):""}},r.nice=function(){return i(zp(i(),{floor:function(t){return e(Math.floor(n(t)))},ceil:function(t){return e(Math.ceil(n(t)))}}))},r}function Vp(){var t=Gp(Cp()).domain([1,10]);return t.copy=function(){return Op(t,Vp()).base(t.base())},pp.apply(t,arguments),t}function Hp(t){return function(n){return Math.sign(n)*Math.log1p(Math.abs(n/t))}}function Xp(t){return function(n){return Math.sign(n)*Math.expm1(Math.abs(n))*t}}function $p(t){var n=1,e=t(Hp(n),Xp(n));return e.constant=function(e){return arguments.length?t(Hp(n=+e),Xp(n)):n},Fp(e)}function Zp(){var t=$p(Cp());return t.copy=function(){return Op(t,Zp()).constant(t.constant())},pp.apply(t,arguments)}function Jp(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}function Qp(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function Kp(t){return t<0?-t*t:t*t}function tv(t){var n=t(kp,kp),e=1;return n.exponent=function(n){return arguments.length?1===(e=+n)?t(kp,kp):.5===e?t(Qp,Kp):t(Jp(e),Jp(1/e)):e},Fp(n)}function nv(){var t=tv(Cp());return t.copy=function(){return Op(t,nv()).exponent(t.exponent())},pp.apply(t,arguments),t}function ev(){return nv.apply(null,arguments).exponent(.5)}function rv(){var t,n=[],e=[],i=[];function o(){var t=0,r=Math.max(1,e.length);for(i=new Array(r-1);++t<r;)i[t-1]=O(n,t/r);return u}function u(n){return isNaN(n=+n)?t:e[c(i,n)]}return u.invertExtent=function(t){var r=e.indexOf(t);return r<0?[NaN,NaN]:[r>0?i[r-1]:n[0],r<i.length?i[r]:n[n.length-1]]},u.domain=function(t){if(!arguments.length)return n.slice();n=[];for(var e,i=0,u=t.length;i<u;++i)null==(e=t[i])||isNaN(e=+e)||n.push(e);return n.sort(r),o()},u.range=function(t){return arguments.length?(e=bp.call(t),o()):e.slice()},u.unknown=function(n){return arguments.length?(t=n,u):t},u.quantiles=function(){return i.slice()},u.copy=function(){return rv().domain(n).range(e).unknown(t)},pp.apply(u,arguments)}function iv(){var t,n=0,e=1,r=1,i=[.5],o=[0,1];function u(n){return n<=n?o[c(i,n,0,r)]:t}function a(){var t=-1;for(i=new Array(r);++t<r;)i[t]=((t+1)*e-(t-r)*n)/(r+1);return u}return u.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],a()):[n,e]},u.range=function(t){return arguments.length?(r=(o=bp.call(t)).length-1,a()):o.slice()},u.invertExtent=function(t){var u=o.indexOf(t);return u<0?[NaN,NaN]:u<1?[n,i[0]]:u>=r?[i[r-1],e]:[i[u-1],i[u]]},u.unknown=function(n){return arguments.length?(t=n,u):u},u.thresholds=function(){return i.slice()},u.copy=function(){return iv().domain([n,e]).range(o).unknown(t)},pp.apply(Fp(u),arguments)}function ov(){var t,n=[.5],e=[0,1],r=1;function i(i){return i<=i?e[c(n,i,0,r)]:t}return i.domain=function(t){return arguments.length?(n=bp.call(t),r=Math.min(n.length,e.length-1),i):n.slice()},i.range=function(t){return arguments.length?(e=bp.call(t),r=Math.min(n.length,e.length-1),i):e.slice()},i.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return ov().domain(n).range(e).unknown(t)},pp.apply(i,arguments)}var uv=new Date,av=new Date;function cv(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u,a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return a},i.filter=function(e){return cv(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return uv.setTime(+n),av.setTime(+r),t(uv),t(av),Math.floor(e(uv,av))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var fv=cv(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});fv.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?cv(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):fv:null};var sv=fv,lv=fv.range,hv=6e4,dv=6048e5,pv=cv(function(t){t.setTime(t-t.getMilliseconds())},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),vv=pv,gv=pv.range,yv=cv(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,n){t.setTime(+t+n*hv)},function(t,n){return(n-t)/hv},function(t){return t.getMinutes()}),bv=yv,_v=yv.range,mv=cv(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*hv)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()}),xv=mv,wv=mv.range,Mv=cv(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*hv)/864e5},function(t){return t.getDate()-1}),Sv=Mv,Ev=Mv.range;function kv(t){return cv(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*hv)/dv})}var Av=kv(0),Nv=kv(1),Tv=kv(2),Pv=kv(3),Ov=kv(4),Cv=kv(5),Rv=kv(6),Iv=Av.range,Fv=Nv.range,jv=Tv.range,Lv=Pv.range,zv=Ov.range,Dv=Cv.range,Uv=Rv.range,Bv=cv(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),qv=Bv,Yv=Bv.range,Wv=cv(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});Wv.every=function(t){return isFinite(t=Math.floor(t))&&t>0?cv(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var Gv=Wv,Vv=Wv.range,Hv=cv(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*hv)},function(t,n){return(n-t)/hv},function(t){return t.getUTCMinutes()}),Xv=Hv,$v=Hv.range,Zv=cv(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()}),Jv=Zv,Qv=Zv.range,Kv=cv(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1}),tg=Kv,ng=Kv.range;function eg(t){return cv(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/dv})}var rg=eg(0),ig=eg(1),og=eg(2),ug=eg(3),ag=eg(4),cg=eg(5),fg=eg(6),sg=rg.range,lg=ig.range,hg=og.range,dg=ug.range,pg=ag.range,vg=cg.range,gg=fg.range,yg=cv(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),bg=yg,_g=yg.range,mg=cv(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()});mg.every=function(t){return isFinite(t=Math.floor(t))&&t>0?cv(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var xg=mg,wg=mg.range;function Mg(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Sg(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Eg(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function kg(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,c=t.shortMonths,f=zg(i),s=Dg(i),l=zg(o),h=Dg(o),d=zg(u),p=Dg(u),v=zg(a),g=Dg(a),y=zg(c),b=Dg(c),_={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:oy,e:oy,f:sy,H:uy,I:ay,j:cy,L:fy,m:ly,M:hy,p:function(t){return i[+(t.getHours()>=12)]},Q:Uy,s:By,S:dy,u:py,U:vy,V:gy,w:yy,W:by,x:null,X:null,y:_y,Y:my,Z:xy,"%":Dy},m={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:wy,e:wy,f:Ay,H:My,I:Sy,j:Ey,L:ky,m:Ny,M:Ty,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:Uy,s:By,S:Py,u:Oy,U:Cy,V:Ry,w:Iy,W:Fy,x:null,X:null,y:jy,Y:Ly,Z:zy,"%":Dy},x={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=b[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return S(t,n,e,r)},d:$g,e:$g,f:ny,H:Jg,I:Jg,j:Zg,L:ty,m:Xg,M:Qg,p:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.p=s[r[0].toLowerCase()],e+r[0].length):-1},Q:ry,s:iy,S:Kg,u:Bg,U:qg,V:Yg,w:Ug,W:Wg,x:function(t,n,r){return S(t,e,n,r)},X:function(t,n,e){return S(t,r,n,e)},y:Vg,Y:Gg,Z:Hg,"%":ey};function w(t,n){return function(e){var r,i,o,u=[],a=-1,c=0,f=t.length;for(e instanceof Date||(e=new Date(+e));++a<f;)37===t.charCodeAt(a)&&(u.push(t.slice(c,a)),null!=(i=Cg[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),c=a+1);return u.push(t.slice(c,a)),u.join("")}}function M(t,n){return function(e){var r,i,o=Eg(1900);if(S(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Sg(Eg(o.y))).getUTCDay(),r=i>4||0===i?ig.ceil(r):ig(r),r=tg.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=n(Eg(o.y))).getDay(),r=i>4||0===i?Nv.ceil(r):Nv(r),r=Sv.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Sg(Eg(o.y)).getUTCDay():n(Eg(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Sg(o)):n(o)}}function S(t,n,e,r){for(var i,o,u=0,a=n.length,c=e.length;u<a;){if(r>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=x[i in Cg?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return _.x=w(e,_),_.X=w(r,_),_.c=w(n,_),m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),{format:function(t){var n=w(t+="",_);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",Mg);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,Sg);return n.toString=function(){return t},n}}}var Ag,Ng,Tg,Pg,Og,Cg={"-":"",_:" ",0:"0"},Rg=/^\s*\d+/,Ig=/^%/,Fg=/[\\^$*+?|[\]().{}]/g;function jg(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Lg(t){return t.replace(Fg,"\\$&")}function zg(t){return new RegExp("^(?:"+t.map(Lg).join("|")+")","i")}function Dg(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Ug(t,n,e){var r=Rg.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Bg(t,n,e){var r=Rg.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function qg(t,n,e){var r=Rg.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Yg(t,n,e){var r=Rg.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Wg(t,n,e){var r=Rg.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function Gg(t,n,e){var r=Rg.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Vg(t,n,e){var r=Rg.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Hg(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Xg(t,n,e){var r=Rg.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function $g(t,n,e){var r=Rg.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Zg(t,n,e){var r=Rg.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Jg(t,n,e){var r=Rg.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Qg(t,n,e){var r=Rg.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Kg(t,n,e){var r=Rg.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function ty(t,n,e){var r=Rg.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function ny(t,n,e){var r=Rg.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function ey(t,n,e){var r=Ig.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function ry(t,n,e){var r=Rg.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function iy(t,n,e){var r=Rg.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function oy(t,n){return jg(t.getDate(),n,2)}function uy(t,n){return jg(t.getHours(),n,2)}function ay(t,n){return jg(t.getHours()%12||12,n,2)}function cy(t,n){return jg(1+Sv.count(Gv(t),t),n,3)}function fy(t,n){return jg(t.getMilliseconds(),n,3)}function sy(t,n){return fy(t,n)+"000"}function ly(t,n){return jg(t.getMonth()+1,n,2)}function hy(t,n){return jg(t.getMinutes(),n,2)}function dy(t,n){return jg(t.getSeconds(),n,2)}function py(t){var n=t.getDay();return 0===n?7:n}function vy(t,n){return jg(Av.count(Gv(t),t),n,2)}function gy(t,n){var e=t.getDay();return t=e>=4||0===e?Ov(t):Ov.ceil(t),jg(Ov.count(Gv(t),t)+(4===Gv(t).getDay()),n,2)}function yy(t){return t.getDay()}function by(t,n){return jg(Nv.count(Gv(t),t),n,2)}function _y(t,n){return jg(t.getFullYear()%100,n,2)}function my(t,n){return jg(t.getFullYear()%1e4,n,4)}function xy(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+jg(n/60|0,"0",2)+jg(n%60,"0",2)}function wy(t,n){return jg(t.getUTCDate(),n,2)}function My(t,n){return jg(t.getUTCHours(),n,2)}function Sy(t,n){return jg(t.getUTCHours()%12||12,n,2)}function Ey(t,n){return jg(1+tg.count(xg(t),t),n,3)}function ky(t,n){return jg(t.getUTCMilliseconds(),n,3)}function Ay(t,n){return ky(t,n)+"000"}function Ny(t,n){return jg(t.getUTCMonth()+1,n,2)}function Ty(t,n){return jg(t.getUTCMinutes(),n,2)}function Py(t,n){return jg(t.getUTCSeconds(),n,2)}function Oy(t){var n=t.getUTCDay();return 0===n?7:n}function Cy(t,n){return jg(rg.count(xg(t),t),n,2)}function Ry(t,n){var e=t.getUTCDay();return t=e>=4||0===e?ag(t):ag.ceil(t),jg(ag.count(xg(t),t)+(4===xg(t).getUTCDay()),n,2)}function Iy(t){return t.getUTCDay()}function Fy(t,n){return jg(ig.count(xg(t),t),n,2)}function jy(t,n){return jg(t.getUTCFullYear()%100,n,2)}function Ly(t,n){return jg(t.getUTCFullYear()%1e4,n,4)}function zy(){return"+0000"}function Dy(){return"%"}function Uy(t){return+t}function By(t){return Math.floor(+t/1e3)}function qy(t){return Ag=kg(t),Ng=Ag.format,Tg=Ag.parse,Pg=Ag.utcFormat,Og=Ag.utcParse,Ag}qy({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Yy=Date.prototype.toISOString?function(t){return t.toISOString()}:Pg("%Y-%m-%dT%H:%M:%S.%LZ");var Wy=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:Og("%Y-%m-%dT%H:%M:%S.%LZ"),Gy=1e3,Vy=60*Gy,Hy=60*Vy,Xy=24*Hy,$y=7*Xy,Zy=30*Xy,Jy=365*Xy;function Qy(t){return new Date(t)}function Ky(t){return t instanceof Date?+t:+new Date(+t)}function tb(t,n,e,r,o,u,a,c,f){var s=Rp(kp,kp),l=s.invert,h=s.domain,d=f(".%L"),p=f(":%S"),v=f("%I:%M"),g=f("%I %p"),y=f("%a %d"),b=f("%b %d"),_=f("%B"),m=f("%Y"),x=[[a,1,Gy],[a,5,5*Gy],[a,15,15*Gy],[a,30,30*Gy],[u,1,Vy],[u,5,5*Vy],[u,15,15*Vy],[u,30,30*Vy],[o,1,Hy],[o,3,3*Hy],[o,6,6*Hy],[o,12,12*Hy],[r,1,Xy],[r,2,2*Xy],[e,1,$y],[n,1,Zy],[n,3,3*Zy],[t,1,Jy]];function w(i){return(a(i)<i?d:u(i)<i?p:o(i)<i?v:r(i)<i?g:n(i)<i?e(i)<i?y:b:t(i)<i?_:m)(i)}function M(n,e,r,o){if(null==n&&(n=10),"number"==typeof n){var u=Math.abs(r-e)/n,a=i(function(t){return t[2]}).right(x,u);a===x.length?(o=N(e/Jy,r/Jy,n),n=t):a?(o=(a=x[u/x[a-1][2]<x[a][2]/u?a-1:a])[1],n=a[0]):(o=Math.max(N(e,r,n),1),n=c)}return null==o?n:n.every(o)}return s.invert=function(t){return new Date(l(t))},s.domain=function(t){return arguments.length?h(yp.call(t,Ky)):h().map(Qy)},s.ticks=function(t,n){var e,r=h(),i=r[0],o=r[r.length-1],u=o<i;return u&&(e=i,i=o,o=e),e=(e=M(t,i,o,n))?e.range(i,o+1):[],u?e.reverse():e},s.tickFormat=function(t,n){return null==n?w:f(n)},s.nice=function(t,n){var e=h();return(t=M(t,e[0],e[e.length-1],n))?h(zp(e,t)):s},s.copy=function(){return Op(s,tb(t,n,e,r,o,u,a,c,f))},s}var nb=function(){return pp.apply(tb(Gv,qv,Av,Sv,xv,bv,vv,sv,Ng).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},eb=function(){return pp.apply(tb(xg,bg,rg,tg,Jv,Xv,vv,sv,Pg).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)};function rb(){var t,n,e,r,i,o=0,u=1,a=kp,c=!1;function f(n){return isNaN(n=+n)?i:a(0===e?.5:(n=(r(n)-t)*e,c?Math.max(0,Math.min(1,n)):n))}return f.domain=function(i){return arguments.length?(t=r(o=+i[0]),n=r(u=+i[1]),e=t===n?0:1/(n-t),f):[o,u]},f.clamp=function(t){return arguments.length?(c=!!t,f):c},f.interpolator=function(t){return arguments.length?(a=t,f):a},f.unknown=function(t){return arguments.length?(i=t,f):i},function(i){return r=i,t=i(o),n=i(u),e=t===n?0:1/(n-t),f}}function ib(t,n){return n.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function ob(){var t=Fp(rb()(kp));return t.copy=function(){return ib(t,ob())},vp.apply(t,arguments)}function ub(){var t=Gp(rb()).domain([1,10]);return t.copy=function(){return ib(t,ub()).base(t.base())},vp.apply(t,arguments)}function ab(){var t=$p(rb());return t.copy=function(){return ib(t,ab()).constant(t.constant())},vp.apply(t,arguments)}function cb(){var t=tv(rb());return t.copy=function(){return ib(t,cb()).exponent(t.exponent())},vp.apply(t,arguments)}function fb(){return cb.apply(null,arguments).exponent(.5)}function sb(){var t=[],n=kp;function e(e){if(!isNaN(e=+e))return n((c(t,e)-1)/(t.length-1))}return e.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var i,o=0,u=n.length;o<u;++o)null==(i=n[o])||isNaN(i=+i)||t.push(i);return t.sort(r),e},e.interpolator=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return sb(n).domain(t)},vp.apply(e,arguments)}function lb(){var t,n,e,r,i,o,u,a=0,c=.5,f=1,s=kp,l=!1;function h(t){return isNaN(t=+t)?u:(t=.5+((t=+o(t))-n)*(t<n?r:i),s(l?Math.max(0,Math.min(1,t)):t))}return h.domain=function(u){return arguments.length?(t=o(a=+u[0]),n=o(c=+u[1]),e=o(f=+u[2]),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h):[a,c,f]},h.clamp=function(t){return arguments.length?(l=!!t,h):l},h.interpolator=function(t){return arguments.length?(s=t,h):s},h.unknown=function(t){return arguments.length?(u=t,h):u},function(u){return o=u,t=u(a),n=u(c),e=u(f),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h}}function hb(){var t=Fp(lb()(kp));return t.copy=function(){return ib(t,hb())},vp.apply(t,arguments)}function db(){var t=Gp(lb()).domain([.1,1,10]);return t.copy=function(){return ib(t,db()).base(t.base())},vp.apply(t,arguments)}function pb(){var t=$p(lb());return t.copy=function(){return ib(t,pb()).constant(t.constant())},vp.apply(t,arguments)}function vb(){var t=tv(lb());return t.copy=function(){return ib(t,vb()).exponent(t.exponent())},vp.apply(t,arguments)}function gb(){return vb.apply(null,arguments).exponent(.5)}var yb=function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e},bb=yb("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),_b=yb("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),mb=yb("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),xb=yb("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),wb=yb("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Mb=yb("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Sb=yb("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Eb=yb("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),kb=yb("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Ab=function(t){return Fe(t[t.length-1])},Nb=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(yb),Tb=Ab(Nb),Pb=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(yb),Ob=Ab(Pb),Cb=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(yb),Rb=Ab(Cb),Ib=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(yb),Fb=Ab(Ib),jb=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(yb),Lb=Ab(jb),zb=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(yb),Db=Ab(zb),Ub=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(yb),Bb=Ab(Ub),qb=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(yb),Yb=Ab(qb),Wb=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(yb),Gb=Ab(Wb),Vb=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(yb),Hb=Ab(Vb),Xb=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(yb),$b=Ab(Xb),Zb=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(yb),Jb=Ab(Zb),Qb=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(yb),Kb=Ab(Qb),t_=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(yb),n_=Ab(t_),e_=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(yb),r_=Ab(e_),i_=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(yb),o_=Ab(i_),u_=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(yb),a_=Ab(u_),c_=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(yb),f_=Ab(c_),s_=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(yb),l_=Ab(s_),h_=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(yb),d_=Ab(h_),p_=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(yb),v_=Ab(p_),g_=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(yb),y_=Ab(g_),b_=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(yb),__=Ab(b_),m_=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(yb),x_=Ab(m_),w_=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(yb),M_=Ab(w_),S_=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(yb),E_=Ab(S_),k_=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(yb),A_=Ab(k_),N_=gr(Me(300,.5,0),Me(-240,.5,1)),T_=gr(Me(-100,.75,.35),Me(80,1.5,.8)),P_=gr(Me(260,.75,.35),Me(80,1.5,.8)),O_=Me(),C_=function(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return O_.h=360*t-100,O_.s=1.5-1.5*n,O_.l=.8-.9*n,O_+""},R_=Yn(),I_=Math.PI/3,F_=2*Math.PI/3,j_=function(t){var n;return t=(.5-t)*Math.PI,R_.r=255*(n=Math.sin(t))*n,R_.g=255*(n=Math.sin(t+I_))*n,R_.b=255*(n=Math.sin(t+F_))*n,R_+""};function L_(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}var z_=L_(yb("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),D_=L_(yb("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),U_=L_(yb("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),B_=L_(yb("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),q_=function(t){return function(){return t}},Y_=Math.abs,W_=Math.atan2,G_=Math.cos,V_=Math.max,H_=Math.min,X_=Math.sin,$_=Math.sqrt,Z_=1e-12,J_=Math.PI,Q_=J_/2,K_=2*J_;function tm(t){return t>=1?Q_:t<=-1?-Q_:Math.asin(t)}function nm(t){return t.innerRadius}function em(t){return t.outerRadius}function rm(t){return t.startAngle}function im(t){return t.endAngle}function om(t){return t&&t.padAngle}function um(t,n,e,r,i,o,u){var a=t-e,c=n-r,f=(u?o:-o)/$_(a*a+c*c),s=f*c,l=-f*a,h=t+s,d=n+l,p=e+s,v=r+l,g=(h+p)/2,y=(d+v)/2,b=p-h,_=v-d,m=b*b+_*_,x=i-o,w=h*v-p*d,M=(_<0?-1:1)*$_(V_(0,x*x*m-w*w)),S=(w*_-b*M)/m,E=(-w*b-_*M)/m,k=(w*_+b*M)/m,A=(-w*b+_*M)/m,N=S-g,T=E-y,P=k-g,O=A-y;return N*N+T*T>P*P+O*O&&(S=k,E=A),{cx:S,cy:E,x01:-s,y01:-l,x11:S*(i/x-1),y11:E*(i/x-1)}}var am=function(){var t=nm,n=em,e=q_(0),r=null,i=rm,o=im,u=om,a=null;function c(){var c,f,s,l=+t.apply(this,arguments),h=+n.apply(this,arguments),d=i.apply(this,arguments)-Q_,p=o.apply(this,arguments)-Q_,v=Y_(p-d),g=p>d;if(a||(a=c=Bo()),h<l&&(f=h,h=l,l=f),h>Z_)if(v>K_-Z_)a.moveTo(h*G_(d),h*X_(d)),a.arc(0,0,h,d,p,!g),l>Z_&&(a.moveTo(l*G_(p),l*X_(p)),a.arc(0,0,l,p,d,g));else{var y,b,_=d,m=p,x=d,w=p,M=v,S=v,E=u.apply(this,arguments)/2,k=E>Z_&&(r?+r.apply(this,arguments):$_(l*l+h*h)),A=H_(Y_(h-l)/2,+e.apply(this,arguments)),N=A,T=A;if(k>Z_){var P=tm(k/l*X_(E)),O=tm(k/h*X_(E));(M-=2*P)>Z_?(x+=P*=g?1:-1,w-=P):(M=0,x=w=(d+p)/2),(S-=2*O)>Z_?(_+=O*=g?1:-1,m-=O):(S=0,_=m=(d+p)/2)}var C=h*G_(_),R=h*X_(_),I=l*G_(w),F=l*X_(w);if(A>Z_){var j,L=h*G_(m),z=h*X_(m),D=l*G_(x),U=l*X_(x);if(v<J_&&(j=function(t,n,e,r,i,o,u,a){var c=e-t,f=r-n,s=u-i,l=a-o,h=l*c-s*f;if(!(h*h<Z_))return[t+(h=(s*(n-o)-l*(t-i))/h)*c,n+h*f]}(C,R,D,U,L,z,I,F))){var B=C-j[0],q=R-j[1],Y=L-j[0],W=z-j[1],G=1/X_(((s=(B*Y+q*W)/($_(B*B+q*q)*$_(Y*Y+W*W)))>1?0:s<-1?J_:Math.acos(s))/2),V=$_(j[0]*j[0]+j[1]*j[1]);N=H_(A,(l-V)/(G-1)),T=H_(A,(h-V)/(G+1))}}S>Z_?T>Z_?(y=um(D,U,C,R,h,T,g),b=um(L,z,I,F,h,T,g),a.moveTo(y.cx+y.x01,y.cy+y.y01),T<A?a.arc(y.cx,y.cy,T,W_(y.y01,y.x01),W_(b.y01,b.x01),!g):(a.arc(y.cx,y.cy,T,W_(y.y01,y.x01),W_(y.y11,y.x11),!g),a.arc(0,0,h,W_(y.cy+y.y11,y.cx+y.x11),W_(b.cy+b.y11,b.cx+b.x11),!g),a.arc(b.cx,b.cy,T,W_(b.y11,b.x11),W_(b.y01,b.x01),!g))):(a.moveTo(C,R),a.arc(0,0,h,_,m,!g)):a.moveTo(C,R),l>Z_&&M>Z_?N>Z_?(y=um(I,F,L,z,l,-N,g),b=um(C,R,D,U,l,-N,g),a.lineTo(y.cx+y.x01,y.cy+y.y01),N<A?a.arc(y.cx,y.cy,N,W_(y.y01,y.x01),W_(b.y01,b.x01),!g):(a.arc(y.cx,y.cy,N,W_(y.y01,y.x01),W_(y.y11,y.x11),!g),a.arc(0,0,l,W_(y.cy+y.y11,y.cx+y.x11),W_(b.cy+b.y11,b.cx+b.x11),g),a.arc(b.cx,b.cy,N,W_(b.y11,b.x11),W_(b.y01,b.x01),!g))):a.arc(0,0,l,w,x,g):a.lineTo(I,F)}else a.moveTo(0,0);if(a.closePath(),c)return a=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-J_/2;return[G_(r)*e,X_(r)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:q_(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:q_(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:q_(+t),c):e},c.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:q_(+t),c):r},c.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:q_(+t),c):i},c.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:q_(+t),c):o},c.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:q_(+t),c):u},c.context=function(t){return arguments.length?(a=null==t?null:t,c):a},c};function cm(t){this._context=t}cm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var fm=function(t){return new cm(t)};function sm(t){return t[0]}function lm(t){return t[1]}var hm=function(){var t=sm,n=lm,e=q_(!0),r=null,i=fm,o=null;function u(u){var a,c,f,s=u.length,l=!1;for(null==r&&(o=i(f=Bo())),a=0;a<=s;++a)!(a<s&&e(c=u[a],a,u))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(c,a,u),+n(c,a,u));if(f)return o=null,f+""||null}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:q_(+n),u):t},u.y=function(t){return arguments.length?(n="function"==typeof t?t:q_(+t),u):n},u.defined=function(t){return arguments.length?(e="function"==typeof t?t:q_(!!t),u):e},u.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),u):i},u.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),u):r},u},dm=function(){var t=sm,n=null,e=q_(0),r=lm,i=q_(!0),o=null,u=fm,a=null;function c(c){var f,s,l,h,d,p=c.length,v=!1,g=new Array(p),y=new Array(p);for(null==o&&(a=u(d=Bo())),f=0;f<=p;++f){if(!(f<p&&i(h=c[f],f,c))===v)if(v=!v)s=f,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),l=f-1;l>=s;--l)a.point(g[l],y[l]);a.lineEnd(),a.areaEnd()}v&&(g[f]=+t(h,f,c),y[f]=+e(h,f,c),a.point(n?+n(h,f,c):g[f],r?+r(h,f,c):y[f]))}if(d)return a=null,d+""||null}function f(){return hm().defined(i).curve(u).context(o)}return c.x=function(e){return arguments.length?(t="function"==typeof e?e:q_(+e),n=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:q_(+n),c):t},c.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:q_(+t),c):n},c.y=function(t){return arguments.length?(e="function"==typeof t?t:q_(+t),r=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:q_(+t),c):e},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:q_(+t),c):r},c.lineX0=c.lineY0=function(){return f().x(t).y(e)},c.lineY1=function(){return f().x(t).y(r)},c.lineX1=function(){return f().x(n).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:q_(!!t),c):i},c.curve=function(t){return arguments.length?(u=t,null!=o&&(a=u(o)),c):u},c.context=function(t){return arguments.length?(null==t?o=a=null:a=u(o=t),c):o},c},pm=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},vm=function(t){return t},gm=function(){var t=vm,n=pm,e=null,r=q_(0),i=q_(K_),o=q_(0);function u(u){var a,c,f,s,l,h=u.length,d=0,p=new Array(h),v=new Array(h),g=+r.apply(this,arguments),y=Math.min(K_,Math.max(-K_,i.apply(this,arguments)-g)),b=Math.min(Math.abs(y)/h,o.apply(this,arguments)),_=b*(y<0?-1:1);for(a=0;a<h;++a)(l=v[p[a]=a]=+t(u[a],a,u))>0&&(d+=l);for(null!=n?p.sort(function(t,e){return n(v[t],v[e])}):null!=e&&p.sort(function(t,n){return e(u[t],u[n])}),a=0,f=d?(y-h*_)/d:0;a<h;++a,g=s)c=p[a],s=g+((l=v[c])>0?l*f:0)+_,v[c]={data:u[c],index:a,value:l,startAngle:g,endAngle:s,padAngle:b};return v}return u.value=function(n){return arguments.length?(t="function"==typeof n?n:q_(+n),u):t},u.sortValues=function(t){return arguments.length?(n=t,e=null,u):n},u.sort=function(t){return arguments.length?(e=t,n=null,u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:q_(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:q_(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:q_(+t),u):o},u},ym=_m(fm);function bm(t){this._curve=t}function _m(t){function n(n){return new bm(t(n))}return n._curve=t,n}function mm(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(_m(t)):n()._curve},t}bm.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var xm=function(){return mm(hm().curve(ym))},wm=function(){var t=dm().curve(ym),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return mm(e())},delete t.lineX0,t.lineEndAngle=function(){return mm(r())},delete t.lineX1,t.lineInnerRadius=function(){return mm(i())},delete t.lineY0,t.lineOuterRadius=function(){return mm(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(_m(t)):n()._curve},t},Mm=function(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]},Sm=Array.prototype.slice;function Em(t){return t.source}function km(t){return t.target}function Am(t){var n=Em,e=km,r=sm,i=lm,o=null;function u(){var u,a=Sm.call(arguments),c=n.apply(this,a),f=e.apply(this,a);if(o||(o=u=Bo()),t(o,+r.apply(this,(a[0]=c,a)),+i.apply(this,a),+r.apply(this,(a[0]=f,a)),+i.apply(this,a)),u)return o=null,u+""||null}return u.source=function(t){return arguments.length?(n=t,u):n},u.target=function(t){return arguments.length?(e=t,u):e},u.x=function(t){return arguments.length?(r="function"==typeof t?t:q_(+t),u):r},u.y=function(t){return arguments.length?(i="function"==typeof t?t:q_(+t),u):i},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}function Nm(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function Tm(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function Pm(t,n,e,r,i){var o=Mm(n,e),u=Mm(n,e=(e+i)/2),a=Mm(r,e),c=Mm(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(u[0],u[1],a[0],a[1],c[0],c[1])}function Om(){return Am(Nm)}function Cm(){return Am(Tm)}function Rm(){var t=Am(Pm);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var Im={draw:function(t,n){var e=Math.sqrt(n/J_);t.moveTo(e,0),t.arc(0,0,e,0,K_)}},Fm={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},jm=Math.sqrt(1/3),Lm=2*jm,zm={draw:function(t,n){var e=Math.sqrt(n/Lm),r=e*jm;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},Dm=Math.sin(J_/10)/Math.sin(7*J_/10),Um=Math.sin(K_/10)*Dm,Bm=-Math.cos(K_/10)*Dm,qm={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=Um*e,i=Bm*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var u=K_*o/5,a=Math.cos(u),c=Math.sin(u);t.lineTo(c*e,-a*e),t.lineTo(a*r-c*i,c*r+a*i)}t.closePath()}},Ym={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}},Wm=Math.sqrt(3),Gm={draw:function(t,n){var e=-Math.sqrt(n/(3*Wm));t.moveTo(0,2*e),t.lineTo(-Wm*e,-e),t.lineTo(Wm*e,-e),t.closePath()}},Vm=Math.sqrt(3)/2,Hm=1/Math.sqrt(12),Xm=3*(Hm/2+1),$m={draw:function(t,n){var e=Math.sqrt(n/Xm),r=e/2,i=e*Hm,o=r,u=e*Hm+e,a=-o,c=u;t.moveTo(r,i),t.lineTo(o,u),t.lineTo(a,c),t.lineTo(-.5*r-Vm*i,Vm*r+-.5*i),t.lineTo(-.5*o-Vm*u,Vm*o+-.5*u),t.lineTo(-.5*a-Vm*c,Vm*a+-.5*c),t.lineTo(-.5*r+Vm*i,-.5*i-Vm*r),t.lineTo(-.5*o+Vm*u,-.5*u-Vm*o),t.lineTo(-.5*a+Vm*c,-.5*c-Vm*a),t.closePath()}},Zm=[Im,Fm,zm,Ym,qm,Gm,$m],Jm=function(){var t=q_(Im),n=q_(64),e=null;function r(){var r;if(e||(e=r=Bo()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:q_(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:q_(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r},Qm=function(){};function Km(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function tx(t){this._context=t}tx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Km(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Km(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var nx=function(t){return new tx(t)};function ex(t){this._context=t}ex.prototype={areaStart:Qm,areaEnd:Qm,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Km(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var rx=function(t){return new ex(t)};function ix(t){this._context=t}ix.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Km(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var ox=function(t){return new ix(t)};function ux(t,n){this._basis=new tx(t),this._beta=n}ux.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],u=t[e]-i,a=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*u),this._beta*n[c]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var ax=function t(n){function e(t){return 1===n?new tx(t):new ux(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function cx(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function fx(t,n){this._context=t,this._k=(1-n)/6}fx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:cx(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:cx(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var sx=function t(n){function e(t){return new fx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function lx(t,n){this._context=t,this._k=(1-n)/6}lx.prototype={areaStart:Qm,areaEnd:Qm,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:cx(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var hx=function t(n){function e(t){return new lx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function dx(t,n){this._context=t,this._k=(1-n)/6}dx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:cx(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var px=function t(n){function e(t){return new dx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function vx(t,n,e){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>Z_){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>Z_){var f=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*f+t._x1*t._l23_2a-n*t._l12_2a)/s,u=(u*f+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function gx(t,n){this._context=t,this._alpha=n}gx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:vx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var yx=function t(n){function e(t){return n?new gx(t,n):new fx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function bx(t,n){this._context=t,this._alpha=n}bx.prototype={areaStart:Qm,areaEnd:Qm,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:vx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var _x=function t(n){function e(t){return n?new bx(t,n):new lx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function mx(t,n){this._context=t,this._alpha=n}mx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:vx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var xx=function t(n){function e(t){return n?new mx(t,n):new dx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function wx(t){this._context=t}wx.prototype={areaStart:Qm,areaEnd:Qm,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};var Mx=function(t){return new wx(t)};function Sx(t){return t<0?-1:1}function Ex(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(e-t._y1)/(i||r<0&&-0),a=(o*i+u*r)/(r+i);return(Sx(o)+Sx(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(a))||0}function kx(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Ax(t,n,e){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*n,o-a,u-a*e,o,u)}function Nx(t){this._context=t}function Tx(t){this._context=new Px(t)}function Px(t){this._context=t}function Ox(t){return new Nx(t)}function Cx(t){return new Tx(t)}function Rx(t){this._context=t}function Ix(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,u[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,u[n]-=e*u[n-1];for(i[r-1]=u[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(u[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}Nx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Ax(this,this._t0,kx(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Ax(this,kx(this,e=Ex(this,t,n)),e);break;default:Ax(this,this._t0,e=Ex(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Tx.prototype=Object.create(Nx.prototype)).point=function(t,n){Nx.prototype.point.call(this,n,t)},Px.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},Rx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=Ix(t),i=Ix(n),o=0,u=1;u<e;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],n[u]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var Fx=function(t){return new Rx(t)};function jx(t,n){this._context=t,this._t=n}jx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var Lx=function(t){return new jx(t,.5)};function zx(t){return new jx(t,0)}function Dx(t){return new jx(t,1)}var Ux=function(t,n){if((i=t.length)>1)for(var e,r,i,o=1,u=t[n[0]],a=u.length;o<i;++o)for(r=u,u=t[n[o]],e=0;e<a;++e)u[e][1]+=u[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]},Bx=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e};function qx(t,n){return t[n]}var Yx=function(){var t=q_([]),n=Bx,e=Ux,r=qx;function i(i){var o,u,a=t.apply(this,arguments),c=i.length,f=a.length,s=new Array(f);for(o=0;o<f;++o){for(var l,h=a[o],d=s[o]=new Array(c),p=0;p<c;++p)d[p]=l=[0,+r(i[p],h,p,i)],l.data=i[p];d.key=h}for(o=0,u=n(s);o<f;++o)s[u[o]].index=o;return e(s,u),s}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:q_(Sm.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:q_(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?Bx:"function"==typeof t?t:q_(Sm.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?Ux:t,i):e},i},Wx=function(t,n){if((r=t.length)>0){for(var e,r,i,o=0,u=t[0].length;o<u;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}Ux(t,n)}},Gx=function(t,n){if((a=t.length)>1)for(var e,r,i,o,u,a,c=0,f=t[n[0]].length;c<f;++c)for(o=u=0,e=0;e<a;++e)(i=(r=t[n[e]][c])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=u,r[0]=u+=i):r[0]=o},Vx=function(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var u=0,a=0;u<e;++u)a+=t[u][r][1]||0;i[r][1]+=i[r][0]=-a/2}Ux(t,n)}},Hx=function(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,u=1;u<r;++u){for(var a=0,c=0,f=0;a<i;++a){for(var s=t[n[a]],l=s[u][1]||0,h=(l-(s[u-1][1]||0))/2,d=0;d<a;++d){var p=t[n[d]];h+=(p[u][1]||0)-(p[u-1][1]||0)}c+=l,f+=h*l}e[u-1][1]+=e[u-1][0]=o,c&&(o-=f/c)}e[u-1][1]+=e[u-1][0]=o,Ux(t,n)}},Xx=function(t){var n=t.map($x);return Bx(t).sort(function(t,e){return n[t]-n[e]})};function $x(t){for(var n,e=-1,r=0,i=t.length,o=-1/0;++e<i;)(n=+t[e][1])>o&&(o=n,r=e);return r}var Zx=function(t){var n=t.map(Jx);return Bx(t).sort(function(t,e){return n[t]-n[e]})};function Jx(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}var Qx=function(t){return Zx(t).reverse()},Kx=function(t){var n,e,r=t.length,i=t.map(Jx),o=Xx(t),u=0,a=0,c=[],f=[];for(n=0;n<r;++n)e=o[n],u<a?(u+=i[e],c.push(e)):(a+=i[e],f.push(e));return f.reverse().concat(c)},tw=function(t){return Bx(t).reverse()},nw=function(t){return function(){return t}};function ew(t){return t[0]}function rw(t){return t[1]}function iw(){this._=null}function ow(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function uw(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function aw(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function cw(t){for(;t.L;)t=t.L;return t}iw.prototype={constructor:iw,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=cw(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(uw(this,e),e=(t=e).U),e.C=!1,r.C=!0,aw(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(aw(this,e),e=(t=e).U),e.C=!1,r.C=!0,uw(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?cw(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,uw(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,aw(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,uw(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,aw(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,uw(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,aw(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var fw=iw;function sw(t,n,e,r){var i=[null,null],o=Iw.push(i)-1;return i.left=t,i.right=n,e&&hw(i,t,n,e),r&&hw(i,n,t,r),Cw[t.index].halfedges.push(o),Cw[n.index].halfedges.push(o),i}function lw(t,n,e){var r=[n,e];return r.left=t,r}function hw(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function dw(t,n,e,r,i){var o,u=t[0],a=t[1],c=u[0],f=u[1],s=0,l=1,h=a[0]-c,d=a[1]-f;if(o=n-c,h||!(o>0)){if(o/=h,h<0){if(o<s)return;o<l&&(l=o)}else if(h>0){if(o>l)return;o>s&&(s=o)}if(o=r-c,h||!(o<0)){if(o/=h,h<0){if(o>l)return;o>s&&(s=o)}else if(h>0){if(o<s)return;o<l&&(l=o)}if(o=e-f,d||!(o>0)){if(o/=d,d<0){if(o<s)return;o<l&&(l=o)}else if(d>0){if(o>l)return;o>s&&(s=o)}if(o=i-f,d||!(o<0)){if(o/=d,d<0){if(o>l)return;o>s&&(s=o)}else if(d>0){if(o<s)return;o<l&&(l=o)}return!(s>0||l<1)||(s>0&&(t[0]=[c+s*h,f+s*d]),l<1&&(t[1]=[c+l*h,f+l*d]),!0)}}}}}function pw(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,c=t[0],f=t.left,s=t.right,l=f[0],h=f[1],d=s[0],p=s[1],v=(l+d)/2,g=(h+p)/2;if(p===h){if(v<n||v>=r)return;if(l>d){if(c){if(c[1]>=i)return}else c=[v,e];o=[v,i]}else{if(c){if(c[1]<e)return}else c=[v,i];o=[v,e]}}else if(a=g-(u=(l-d)/(p-h))*v,u<-1||u>1)if(l>d){if(c){if(c[1]>=i)return}else c=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(c){if(c[1]<e)return}else c=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<p){if(c){if(c[0]>=r)return}else c=[n,u*n+a];o=[r,u*r+a]}else{if(c){if(c[0]<n)return}else c=[r,u*r+a];o=[n,u*n+a]}return t[0]=c,t[1]=o,!0}function vw(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function gw(t,n){return n[+(n.left!==t.site)]}function yw(t,n){return n[+(n.left===t.site)]}var bw,_w=[];function mw(){ow(this),this.x=this.y=this.arc=this.site=this.cy=null}function xw(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],c=r[0]-u,f=r[1]-a,s=o[0]-u,l=o[1]-a,h=2*(c*l-f*s);if(!(h>=-jw)){var d=c*c+f*f,p=s*s+l*l,v=(l*d-f*p)/h,g=(c*p-s*d)/h,y=_w.pop()||new mw;y.arc=t,y.site=i,y.x=v+u,y.y=(y.cy=g+a)+Math.sqrt(v*v+g*g),t.circle=y;for(var b=null,_=Rw._;_;)if(y.y<_.y||y.y===_.y&&y.x<=_.x){if(!_.L){b=_.P;break}_=_.L}else{if(!_.R){b=_;break}_=_.R}Rw.insert(b,y),b||(bw=y)}}}}function ww(t){var n=t.circle;n&&(n.P||(bw=n.N),Rw.remove(n),_w.push(n),ow(n),t.circle=null)}var Mw=[];function Sw(){ow(this),this.edge=this.site=this.circle=null}function Ew(t){var n=Mw.pop()||new Sw;return n.site=t,n}function kw(t){ww(t),Ow.remove(t),Mw.push(t),ow(t)}function Aw(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];kw(t);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<Fw&&Math.abs(r-c.circle.cy)<Fw;)o=c.P,a.unshift(c),kw(c),c=o;a.unshift(c),ww(c);for(var f=u;f.circle&&Math.abs(e-f.circle.x)<Fw&&Math.abs(r-f.circle.cy)<Fw;)u=f.N,a.push(f),kw(f),f=u;a.push(f),ww(f);var s,l=a.length;for(s=1;s<l;++s)f=a[s],c=a[s-1],hw(f.edge,c.site,f.site,i);c=a[0],(f=a[l-1]).edge=sw(c.site,f.site,null,i),xw(c),xw(f)}function Nw(t){for(var n,e,r,i,o=t[0],u=t[1],a=Ow._;a;)if((r=Tw(a,u)-o)>Fw)a=a.L;else{if(!((i=o-Pw(a,u))>Fw)){r>-Fw?(n=a.P,e=a):i>-Fw?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){Cw[t.index]={site:t,halfedges:[]}}(t);var c=Ew(t);if(Ow.insert(n,c),n||e){if(n===e)return ww(n),e=Ew(n.site),Ow.insert(c,e),c.edge=e.edge=sw(n.site,c.site),xw(n),void xw(e);if(e){ww(n),ww(e);var f=n.site,s=f[0],l=f[1],h=t[0]-s,d=t[1]-l,p=e.site,v=p[0]-s,g=p[1]-l,y=2*(h*g-d*v),b=h*h+d*d,_=v*v+g*g,m=[(g*b-d*_)/y+s,(h*_-v*b)/y+l];hw(e.edge,f,p,m),c.edge=sw(f,t,null,m),e.edge=sw(t,p,null,m),xw(n),xw(e)}else c.edge=sw(n.site,c.site)}}function Tw(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],c=e[1],f=c-n;if(!f)return a;var s=a-r,l=1/o-1/f,h=s/f;return l?(-h+Math.sqrt(h*h-2*l*(s*s/(-2*f)-c+f/2+i-o/2)))/l+r:(r+a)/2}function Pw(t,n){var e=t.N;if(e)return Tw(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var Ow,Cw,Rw,Iw,Fw=1e-6,jw=1e-12;function Lw(t,n){return n[1]-t[1]||n[0]-t[0]}function zw(t,n){var e,r,i,o=t.sort(Lw).pop();for(Iw=[],Cw=new Array(t.length),Ow=new fw,Rw=new fw;;)if(i=bw,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(Nw(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;Aw(i.arc)}if(function(){for(var t,n,e,r,i=0,o=Cw.length;i<o;++i)if((t=Cw[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=vw(t,Iw[n[e]]);for(u.sort(function(t,n){return a[n]-a[t]}),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var u=+n[0][0],a=+n[0][1],c=+n[1][0],f=+n[1][1];!function(t,n,e,r){for(var i,o=Iw.length;o--;)pw(i=Iw[o],t,n,e,r)&&dw(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Fw||Math.abs(i[0][1]-i[1][1])>Fw)||delete Iw[o]}(u,a,c,f),function(t,n,e,r){var i,o,u,a,c,f,s,l,h,d,p,v,g=Cw.length,y=!0;for(i=0;i<g;++i)if(o=Cw[i]){for(u=o.site,a=(c=o.halfedges).length;a--;)Iw[c[a]]||c.splice(a,1);for(a=0,f=c.length;a<f;)p=(d=yw(o,Iw[c[a]]))[0],v=d[1],l=(s=gw(o,Iw[c[++a%f]]))[0],h=s[1],(Math.abs(p-l)>Fw||Math.abs(v-h)>Fw)&&(c.splice(a,0,Iw.push(lw(u,d,Math.abs(p-t)<Fw&&r-v>Fw?[t,Math.abs(l-t)<Fw?h:r]:Math.abs(v-r)<Fw&&e-p>Fw?[Math.abs(h-r)<Fw?l:e,r]:Math.abs(p-e)<Fw&&v-n>Fw?[e,Math.abs(l-e)<Fw?h:n]:Math.abs(v-n)<Fw&&p-t>Fw?[Math.abs(h-n)<Fw?l:t,n]:null))-1),++f);f&&(y=!1)}if(y){var b,_,m,x=1/0;for(i=0,y=null;i<g;++i)(o=Cw[i])&&(m=(b=(u=o.site)[0]-t)*b+(_=u[1]-n)*_)<x&&(x=m,y=o);if(y){var w=[t,n],M=[t,r],S=[e,r],E=[e,n];y.halfedges.push(Iw.push(lw(u=y.site,w,M))-1,Iw.push(lw(u,M,S))-1,Iw.push(lw(u,S,E))-1,Iw.push(lw(u,E,w))-1)}}for(i=0;i<g;++i)(o=Cw[i])&&(o.halfedges.length||delete Cw[i])}(u,a,c,f)}this.edges=Iw,this.cells=Cw,Ow=Rw=Iw=Cw=null}zw.prototype={constructor:zw,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return gw(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a,c,f,s=e.site,l=-1,h=n[i[o-1]],d=h.left===s?h.right:h.left;++l<o;)u=d,d=(h=n[i[l]]).left===s?h.right:h.left,u&&d&&r<u.index&&r<d.index&&(c=u,f=d,((a=s)[0]-f[0])*(c[1]-a[1])-(a[0]-c[0])*(f[1]-a[1])<0)&&t.push([s.data,u.data,d.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var c=t-i.site[0],f=n-i.site[1],s=c*c+f*f;do{i=o.cells[r=u],u=null,i.halfedges.forEach(function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var c=t-a[0],f=n-a[1],l=c*c+f*f;l<s&&(s=l,u=a.index)}})}while(null!==u);return o._found=r,null==e||s<=e*e?i.site:null}};var Dw=function(){var t=ew,n=rw,e=null;function r(r){return new zw(r.map(function(e,i){var o=[Math.round(t(e,i,r)/Fw)*Fw,Math.round(n(e,i,r)/Fw)*Fw];return o.index=i,o.data=e,o}),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:nw(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:nw(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r},Uw=function(t){return function(){return t}};function Bw(t,n,e){this.target=t,this.type=n,this.transform=e}function qw(t,n,e){this.k=t,this.x=n,this.y=e}qw.prototype={constructor:qw,scale:function(t){return 1===t?this:new qw(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new qw(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var Yw=new qw(1,0,0);function Ww(t){return t.__zoom||Yw}function Gw(){Wt.stopImmediatePropagation()}Ww.prototype=qw.prototype;var Vw=function(){Wt.preventDefault(),Wt.stopImmediatePropagation()};function Hw(){return!Wt.button}function Xw(){var t,n,e=this;return e instanceof SVGElement?(t=(e=e.ownerSVGElement||e).width.baseVal.value,n=e.height.baseVal.value):(t=e.clientWidth,n=e.clientHeight),[[0,0],[t,n]]}function $w(){return this.__zoom||Yw}function Zw(){return-Wt.deltaY*(Wt.deltaMode?120:1)/500}function Jw(){return"ontouchstart"in this}function Qw(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],u=t.invertY(n[1][1])-e[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),u>o?(o+u)/2:Math.min(0,o)||Math.max(0,u))}var Kw=function(){var t,n,e=Hw,r=Xw,i=Qw,o=Zw,u=Jw,a=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],f=250,s=ur,l=[],h=ht("start","zoom","end"),d=500,p=150,v=0;function g(t){t.property("__zoom",$w).on("wheel.zoom",M).on("mousedown.zoom",S).on("dblclick.zoom",E).filter(u).on("touchstart.zoom",k).on("touchmove.zoom",A).on("touchend.zoom touchcancel.zoom",N).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function y(t,n){return(n=Math.max(a[0],Math.min(a[1],n)))===t.k?t:new qw(n,t.x,t.y)}function b(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new qw(t.k,r,i)}function _(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function m(t,n,e){t.on("start.zoom",function(){x(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){x(this,arguments).end()}).tween("zoom",function(){var t=arguments,i=x(this,t),o=r.apply(this,t),u=e||_(o),a=Math.max(o[1][0]-o[0][0],o[1][1]-o[0][1]),c=this.__zoom,f="function"==typeof n?n.apply(this,t):n,l=s(c.invert(u).concat(a/c.k),f.invert(u).concat(a/f.k));return function(t){if(1===t)t=f;else{var n=l(t),e=a/n[2];t=new qw(e,u[0]-n[0]*e,u[1]-n[1]*e)}i.zoom(null,t)}})}function x(t,n){for(var e,r=0,i=l.length;r<i;++r)if((e=l[r]).that===t)return e;return new w(t,n)}function w(t,n){this.that=t,this.args=n,this.index=-1,this.active=0,this.extent=r.apply(t,n)}function M(){if(e.apply(this,arguments)){var t=x(this,arguments),n=this.__zoom,r=Math.max(a[0],Math.min(a[1],n.k*Math.pow(2,o.apply(this,arguments)))),u=fn(this);if(t.wheel)t.mouse[0][0]===u[0]&&t.mouse[0][1]===u[1]||(t.mouse[1]=n.invert(t.mouse[0]=u)),clearTimeout(t.wheel);else{if(n.k===r)return;t.mouse=[u,n.invert(u)],Kr(this),t.start()}Vw(),t.wheel=setTimeout(function(){t.wheel=null,t.end()},p),t.zoom("mouse",i(b(y(n,r),t.mouse[0],t.mouse[1]),t.extent,c))}}function S(){if(!n&&e.apply(this,arguments)){var t=x(this,arguments),r=nn(Wt.view).on("mousemove.zoom",function(){if(Vw(),!t.moved){var n=Wt.clientX-u,e=Wt.clientY-a;t.moved=n*n+e*e>v}t.zoom("mouse",i(b(t.that.__zoom,t.mouse[0]=fn(t.that),t.mouse[1]),t.extent,c))},!0).on("mouseup.zoom",function(){r.on("mousemove.zoom mouseup.zoom",null),gn(Wt.view,t.moved),Vw(),t.end()},!0),o=fn(this),u=Wt.clientX,a=Wt.clientY;vn(Wt.view),Gw(),t.mouse=[o,this.__zoom.invert(o)],Kr(this),t.start()}}function E(){if(e.apply(this,arguments)){var t=this.__zoom,n=fn(this),o=t.invert(n),u=t.k*(Wt.shiftKey?.5:2),a=i(b(y(t,u),n,o),r.apply(this,arguments),c);Vw(),f>0?nn(this).transition().duration(f).call(m,a,n):nn(this).call(g.transform,a)}}function k(){if(e.apply(this,arguments)){var n,r,i,o,u=x(this,arguments),a=Wt.changedTouches,c=a.length;for(Gw(),r=0;r<c;++r)i=a[r],o=[o=ln(this,a,i.identifier),this.__zoom.invert(o),i.identifier],u.touch0?u.touch1||(u.touch1=o):(u.touch0=o,n=!0);if(t&&(t=clearTimeout(t),!u.touch1))return u.end(),void((o=nn(this).on("dblclick.zoom"))&&o.apply(this,arguments));n&&(t=setTimeout(function(){t=null},d),Kr(this),u.start())}}function A(){var n,e,r,o,u=x(this,arguments),a=Wt.changedTouches,f=a.length;for(Vw(),t&&(t=clearTimeout(t)),n=0;n<f;++n)e=a[n],r=ln(this,a,e.identifier),u.touch0&&u.touch0[2]===e.identifier?u.touch0[0]=r:u.touch1&&u.touch1[2]===e.identifier&&(u.touch1[0]=r);if(e=u.that.__zoom,u.touch1){var s=u.touch0[0],l=u.touch0[1],h=u.touch1[0],d=u.touch1[1],p=(p=h[0]-s[0])*p+(p=h[1]-s[1])*p,v=(v=d[0]-l[0])*v+(v=d[1]-l[1])*v;e=y(e,Math.sqrt(p/v)),r=[(s[0]+h[0])/2,(s[1]+h[1])/2],o=[(l[0]+d[0])/2,(l[1]+d[1])/2]}else{if(!u.touch0)return;r=u.touch0[0],o=u.touch0[1]}u.zoom("touch",i(b(e,r,o),u.extent,c))}function N(){var t,e,r=x(this,arguments),i=Wt.changedTouches,o=i.length;for(Gw(),n&&clearTimeout(n),n=setTimeout(function(){n=null},d),t=0;t<o;++t)e=i[t],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}return g.transform=function(t,n){var e=t.selection?t.selection():t;e.property("__zoom",$w),t!==e?m(t,n):e.interrupt().each(function(){x(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()})},g.scaleBy=function(t,n){g.scaleTo(t,function(){return this.__zoom.k*("function"==typeof n?n.apply(this,arguments):n)})},g.scaleTo=function(t,n){g.transform(t,function(){var t=r.apply(this,arguments),e=this.__zoom,o=_(t),u=e.invert(o),a="function"==typeof n?n.apply(this,arguments):n;return i(b(y(e,a),o,u),t,c)})},g.translateBy=function(t,n,e){g.transform(t,function(){return i(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),r.apply(this,arguments),c)})},g.translateTo=function(t,n,e){g.transform(t,function(){var t=r.apply(this,arguments),o=this.__zoom,u=_(t);return i(Yw.translate(u[0],u[1]).scale(o.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,c)})},w.prototype={start:function(){return 1==++this.active&&(this.index=l.push(this)-1,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(l.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){$t(new Bw(g,t,this.that.__zoom),h.apply,h,[t,this.that,this.args])}},g.wheelDelta=function(t){return arguments.length?(o="function"==typeof t?t:Uw(+t),g):o},g.filter=function(t){return arguments.length?(e="function"==typeof t?t:Uw(!!t),g):e},g.touchable=function(t){return arguments.length?(u="function"==typeof t?t:Uw(!!t),g):u},g.extent=function(t){return arguments.length?(r="function"==typeof t?t:Uw([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),g):r},g.scaleExtent=function(t){return arguments.length?(a[0]=+t[0],a[1]=+t[1],g):[a[0],a[1]]},g.translateExtent=function(t){return arguments.length?(c[0][0]=+t[0][0],c[1][0]=+t[1][0],c[0][1]=+t[0][1],c[1][1]=+t[1][1],g):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},g.constrain=function(t){return arguments.length?(i=t,g):i},g.duration=function(t){return arguments.length?(f=+t,g):f},g.interpolate=function(t){return arguments.length?(s=t,g):s},g.on=function(){var t=h.on.apply(h,arguments);return t===h?g:t},g.clickDistance=function(t){return arguments.length?(v=(t=+t)*t,g):Math.sqrt(v)},g};e.d(n,"version",function(){return"5.8.2"}),e.d(n,"bisect",function(){return c}),e.d(n,"bisectRight",function(){return u}),e.d(n,"bisectLeft",function(){return a}),e.d(n,"ascending",function(){return r}),e.d(n,"bisector",function(){return i}),e.d(n,"cross",function(){return l}),e.d(n,"descending",function(){return h}),e.d(n,"deviation",function(){return v}),e.d(n,"extent",function(){return g}),e.d(n,"histogram",function(){return P}),e.d(n,"thresholdFreedmanDiaconis",function(){return C}),e.d(n,"thresholdScott",function(){return R}),e.d(n,"thresholdSturges",function(){return T}),e.d(n,"max",function(){return I}),e.d(n,"mean",function(){return F}),e.d(n,"median",function(){return j}),e.d(n,"merge",function(){return L}),e.d(n,"min",function(){return z}),e.d(n,"pairs",function(){return f}),e.d(n,"permute",function(){return D}),e.d(n,"quantile",function(){return O}),e.d(n,"range",function(){return w}),e.d(n,"scan",function(){return U}),e.d(n,"shuffle",function(){return B}),e.d(n,"sum",function(){return q}),e.d(n,"ticks",function(){return k}),e.d(n,"tickIncrement",function(){return A}),e.d(n,"tickStep",function(){return N}),e.d(n,"transpose",function(){return Y}),e.d(n,"variance",function(){return p}),e.d(n,"zip",function(){return G}),e.d(n,"axisTop",function(){return rt}),e.d(n,"axisRight",function(){return it}),e.d(n,"axisBottom",function(){return ot}),e.d(n,"axisLeft",function(){return ut}),e.d(n,"brush",function(){return Eo}),e.d(n,"brushX",function(){return Mo}),e.d(n,"brushY",function(){return So}),e.d(n,"brushSelection",function(){return wo}),e.d(n,"chord",function(){return Ro}),e.d(n,"ribbon",function(){return Ho}),e.d(n,"nest",function(){return Jo}),e.d(n,"set",function(){return ou}),e.d(n,"map",function(){return Zo}),e.d(n,"keys",function(){return uu}),e.d(n,"values",function(){return au}),e.d(n,"entries",function(){return cu}),e.d(n,"color",function(){return Dn}),e.d(n,"rgb",function(){return Yn}),e.d(n,"hsl",function(){return Hn}),e.d(n,"lab",function(){return ae}),e.d(n,"hcl",function(){return ve}),e.d(n,"lch",function(){return pe}),e.d(n,"gray",function(){return ue}),e.d(n,"cubehelix",function(){return Me}),e.d(n,"contours",function(){return bu}),e.d(n,"contourDensity",function(){return Su}),e.d(n,"dispatch",function(){return ht}),e.d(n,"drag",function(){return Mn}),e.d(n,"dragDisable",function(){return vn}),e.d(n,"dragEnable",function(){return gn}),e.d(n,"dsvFormat",function(){return Ou}),e.d(n,"csvParse",function(){return Ru}),e.d(n,"csvParseRows",function(){return Iu}),e.d(n,"csvFormat",function(){return Fu}),e.d(n,"csvFormatRows",function(){return ju}),e.d(n,"tsvParse",function(){return zu}),e.d(n,"tsvParseRows",function(){return Du}),e.d(n,"tsvFormat",function(){return Uu}),e.d(n,"tsvFormatRows",function(){return Bu}),e.d(n,"easeLinear",function(){return fi}),e.d(n,"easeQuad",function(){return hi}),e.d(n,"easeQuadIn",function(){return si}),e.d(n,"easeQuadOut",function(){return li}),e.d(n,"easeQuadInOut",function(){return hi}),e.d(n,"easeCubic",function(){return vi}),e.d(n,"easeCubicIn",function(){return di}),e.d(n,"easeCubicOut",function(){return pi}),e.d(n,"easeCubicInOut",function(){return vi}),e.d(n,"easePoly",function(){return bi}),e.d(n,"easePolyIn",function(){return gi}),e.d(n,"easePolyOut",function(){return yi}),e.d(n,"easePolyInOut",function(){return bi}),e.d(n,"easeSin",function(){return Mi}),e.d(n,"easeSinIn",function(){return xi}),e.d(n,"easeSinOut",function(){return wi}),e.d(n,"easeSinInOut",function(){return Mi}),e.d(n,"easeExp",function(){return ki}),e.d(n,"easeExpIn",function(){return Si}),e.d(n,"easeExpOut",function(){return Ei}),e.d(n,"easeExpInOut",function(){return ki}),e.d(n,"easeCircle",function(){return Ti}),e.d(n,"easeCircleIn",function(){return Ai}),e.d(n,"easeCircleOut",function(){return Ni}),e.d(n,"easeCircleInOut",function(){return Ti}),e.d(n,"easeBounce",function(){return Bi}),e.d(n,"easeBounceIn",function(){return Ui}),e.d(n,"easeBounceOut",function(){return Bi}),e.d(n,"easeBounceInOut",function(){return qi}),e.d(n,"easeBack",function(){return Gi}),e.d(n,"easeBackIn",function(){return Yi}),e.d(n,"easeBackOut",function(){return Wi}),e.d(n,"easeBackInOut",function(){return Gi}),e.d(n,"easeElastic",function(){return Xi}),e.d(n,"easeElasticIn",function(){return Hi}),e.d(n,"easeElasticOut",function(){return Xi}),e.d(n,"easeElasticInOut",function(){return $i}),e.d(n,"blob",function(){return Yu}),e.d(n,"buffer",function(){return Gu}),e.d(n,"dsv",function(){return $u}),e.d(n,"csv",function(){return Zu}),e.d(n,"tsv",function(){return Ju}),e.d(n,"image",function(){return Qu}),e.d(n,"json",function(){return ta}),e.d(n,"text",function(){return Hu}),e.d(n,"xml",function(){return ea}),e.d(n,"html",function(){return ra}),e.d(n,"svg",function(){return ia}),e.d(n,"forceCenter",function(){return oa}),e.d(n,"forceCollide",function(){return ba}),e.d(n,"forceLink",function(){return xa}),e.d(n,"forceManyBody",function(){return Aa}),e.d(n,"forceRadial",function(){return Na}),e.d(n,"forceSimulation",function(){return ka}),e.d(n,"forceX",function(){return Ta}),e.d(n,"forceY",function(){return Pa}),e.d(n,"formatDefaultLocale",function(){return Va}),e.d(n,"format",function(){return za}),e.d(n,"formatPrefix",function(){return Da}),e.d(n,"formatLocale",function(){return Ga}),e.d(n,"formatSpecifier",function(){return Ia}),e.d(n,"precisionFixed",function(){return Ha}),e.d(n,"precisionPrefix",function(){return Xa}),e.d(n,"precisionRound",function(){return $a}),e.d(n,"geoArea",function(){return Bc}),e.d(n,"geoBounds",function(){return If}),e.d(n,"geoCentroid",function(){return Vf}),e.d(n,"geoCircle",function(){return rs}),e.d(n,"geoClipAntimeridian",function(){return ps}),e.d(n,"geoClipCircle",function(){return vs}),e.d(n,"geoClipExtent",function(){return Ms}),e.d(n,"geoClipRectangle",function(){return _s}),e.d(n,"geoContains",function(){return Bs}),e.d(n,"geoDistance",function(){return Cs}),e.d(n,"geoGraticule",function(){return Ws}),e.d(n,"geoGraticule10",function(){return Gs}),e.d(n,"geoInterpolate",function(){return Zs}),e.d(n,"geoLength",function(){return Ts}),e.d(n,"geoPath",function(){return Xl}),e.d(n,"geoAlbers",function(){return dh}),e.d(n,"geoAlbersUsa",function(){return ph}),e.d(n,"geoAzimuthalEqualArea",function(){return bh}),e.d(n,"geoAzimuthalEqualAreaRaw",function(){return yh}),e.d(n,"geoAzimuthalEquidistant",function(){return mh}),e.d(n,"geoAzimuthalEquidistantRaw",function(){return _h}),e.d(n,"geoConicConformal",function(){return kh}),e.d(n,"geoConicConformalRaw",function(){return Eh}),e.d(n,"geoConicEqualArea",function(){return hh}),e.d(n,"geoConicEqualAreaRaw",function(){return lh}),e.d(n,"geoConicEquidistant",function(){return Ph}),e.d(n,"geoConicEquidistantRaw",function(){return Th}),e.d(n,"geoEqualEarth",function(){return Lh}),e.d(n,"geoEqualEarthRaw",function(){return jh}),e.d(n,"geoEquirectangular",function(){return Nh}),e.d(n,"geoEquirectangularRaw",function(){return Ah}),e.d(n,"geoGnomonic",function(){return Dh}),e.d(n,"geoGnomonicRaw",function(){return zh}),e.d(n,"geoIdentity",function(){return Bh}),e.d(n,"geoProjection",function(){return ch}),e.d(n,"geoProjectionMutator",function(){return fh}),e.d(n,"geoMercator",function(){return wh}),e.d(n,"geoMercatorRaw",function(){return xh}),e.d(n,"geoNaturalEarth1",function(){return Yh}),e.d(n,"geoNaturalEarth1Raw",function(){return qh}),e.d(n,"geoOrthographic",function(){return Gh}),e.d(n,"geoOrthographicRaw",function(){return Wh}),e.d(n,"geoStereographic",function(){return Hh}),e.d(n,"geoStereographicRaw",function(){return Vh}),e.d(n,"geoTransverseMercator",function(){return $h}),e.d(n,"geoTransverseMercatorRaw",function(){return Xh}),e.d(n,"geoRotation",function(){return ts}),e.d(n,"geoStream",function(){return Rc}),e.d(n,"geoTransform",function(){return $l}),e.d(n,"cluster",function(){return Kh}),e.d(n,"hierarchy",function(){return nd}),e.d(n,"pack",function(){return Ed}),e.d(n,"packSiblings",function(){return md}),e.d(n,"packEnclose",function(){return ad}),e.d(n,"partition",function(){return Od}),e.d(n,"stratify",function(){return Ld}),e.d(n,"tree",function(){return Wd}),e.d(n,"treemap",function(){return $d}),e.d(n,"treemapBinary",function(){return Zd}),e.d(n,"treemapDice",function(){return Pd}),e.d(n,"treemapSlice",function(){return Gd}),e.d(n,"treemapSliceDice",function(){return Jd}),e.d(n,"treemapSquarify",function(){return Xd}),e.d(n,"treemapResquarify",function(){return Qd}),e.d(n,"interpolate",function(){return Xe}),e.d(n,"interpolateArray",function(){return Le}),e.d(n,"interpolateBasis",function(){return ke}),e.d(n,"interpolateBasisClosed",function(){return Ae}),e.d(n,"interpolateDate",function(){return ze}),e.d(n,"interpolateDiscrete",function(){return $e}),e.d(n,"interpolateHue",function(){return Ze}),e.d(n,"interpolateNumber",function(){return De}),e.d(n,"interpolateObject",function(){return Ue}),e.d(n,"interpolateRound",function(){return Je}),e.d(n,"interpolateString",function(){return He}),e.d(n,"interpolateTransformCss",function(){return er}),e.d(n,"interpolateTransformSvg",function(){return rr}),e.d(n,"interpolateZoom",function(){return ur}),e.d(n,"interpolateRgb",function(){return Re}),e.d(n,"interpolateRgbBasis",function(){return Fe}),e.d(n,"interpolateRgbBasisClosed",function(){return je}),e.d(n,"interpolateHsl",function(){return cr}),e.d(n,"interpolateHslLong",function(){return fr}),e.d(n,"interpolateLab",function(){return sr}),e.d(n,"interpolateHcl",function(){return hr}),e.d(n,"interpolateHclLong",function(){return dr}),e.d(n,"interpolateCubehelix",function(){return vr}),e.d(n,"interpolateCubehelixLong",function(){return gr}),e.d(n,"piecewise",function(){return yr}),e.d(n,"quantize",function(){return mr}),e.d(n,"path",function(){return Bo}),e.d(n,"polygonArea",function(){return Kd}),e.d(n,"polygonCentroid",function(){return tp}),e.d(n,"polygonHull",function(){return ip}),e.d(n,"polygonContains",function(){return op}),e.d(n,"polygonLength",function(){return up}),e.d(n,"quadtree",function(){return ha}),e.d(n,"randomUniform",function(){return cp}),e.d(n,"randomNormal",function(){return fp}),e.d(n,"randomLogNormal",function(){return sp}),e.d(n,"randomBates",function(){return hp}),e.d(n,"randomIrwinHall",function(){return lp}),e.d(n,"randomExponential",function(){return dp}),e.d(n,"scaleBand",function(){return xp}),e.d(n,"scalePoint",function(){return wp}),e.d(n,"scaleIdentity",function(){return Lp}),e.d(n,"scaleLinear",function(){return jp}),e.d(n,"scaleLog",function(){return Vp}),e.d(n,"scaleSymlog",function(){return Zp}),e.d(n,"scaleOrdinal",function(){return mp}),e.d(n,"scaleImplicit",function(){return _p}),e.d(n,"scalePow",function(){return nv}),e.d(n,"scaleSqrt",function(){return ev}),e.d(n,"scaleQuantile",function(){return rv}),e.d(n,"scaleQuantize",function(){return iv}),e.d(n,"scaleThreshold",function(){return ov}),e.d(n,"scaleTime",function(){return nb}),e.d(n,"scaleUtc",function(){return eb}),e.d(n,"scaleSequential",function(){return ob}),e.d(n,"scaleSequentialLog",function(){return ub}),e.d(n,"scaleSequentialPow",function(){return cb}),e.d(n,"scaleSequentialSqrt",function(){return fb}),e.d(n,"scaleSequentialSymlog",function(){return ab}),e.d(n,"scaleSequentialQuantile",function(){return sb}),e.d(n,"scaleDiverging",function(){return hb}),e.d(n,"scaleDivergingLog",function(){return db}),e.d(n,"scaleDivergingPow",function(){return vb}),e.d(n,"scaleDivergingSqrt",function(){return gb}),e.d(n,"scaleDivergingSymlog",function(){return pb}),e.d(n,"tickFormat",function(){return Ip}),e.d(n,"schemeCategory10",function(){return bb}),e.d(n,"schemeAccent",function(){return _b}),e.d(n,"schemeDark2",function(){return mb}),e.d(n,"schemePaired",function(){return xb}),e.d(n,"schemePastel1",function(){return wb}),e.d(n,"schemePastel2",function(){return Mb}),e.d(n,"schemeSet1",function(){return Sb}),e.d(n,"schemeSet2",function(){return Eb}),e.d(n,"schemeSet3",function(){return kb}),e.d(n,"interpolateBrBG",function(){return Tb}),e.d(n,"schemeBrBG",function(){return Nb}),e.d(n,"interpolatePRGn",function(){return Ob}),e.d(n,"schemePRGn",function(){return Pb}),e.d(n,"interpolatePiYG",function(){return Rb}),e.d(n,"schemePiYG",function(){return Cb}),e.d(n,"interpolatePuOr",function(){return Fb}),e.d(n,"schemePuOr",function(){return Ib}),e.d(n,"interpolateRdBu",function(){return Lb}),e.d(n,"schemeRdBu",function(){return jb}),e.d(n,"interpolateRdGy",function(){return Db}),e.d(n,"schemeRdGy",function(){return zb}),e.d(n,"interpolateRdYlBu",function(){return Bb}),e.d(n,"schemeRdYlBu",function(){return Ub}),e.d(n,"interpolateRdYlGn",function(){return Yb}),e.d(n,"schemeRdYlGn",function(){return qb}),e.d(n,"interpolateSpectral",function(){return Gb}),e.d(n,"schemeSpectral",function(){return Wb}),e.d(n,"interpolateBuGn",function(){return Hb}),e.d(n,"schemeBuGn",function(){return Vb}),e.d(n,"interpolateBuPu",function(){return $b}),e.d(n,"schemeBuPu",function(){return Xb}),e.d(n,"interpolateGnBu",function(){return Jb}),e.d(n,"schemeGnBu",function(){return Zb}),e.d(n,"interpolateOrRd",function(){return Kb}),e.d(n,"schemeOrRd",function(){return Qb}),e.d(n,"interpolatePuBuGn",function(){return n_}),e.d(n,"schemePuBuGn",function(){return t_}),e.d(n,"interpolatePuBu",function(){return r_}),e.d(n,"schemePuBu",function(){return e_}),e.d(n,"interpolatePuRd",function(){return o_}),e.d(n,"schemePuRd",function(){return i_}),e.d(n,"interpolateRdPu",function(){return a_}),e.d(n,"schemeRdPu",function(){return u_}),e.d(n,"interpolateYlGnBu",function(){return f_}),e.d(n,"schemeYlGnBu",function(){return c_}),e.d(n,"interpolateYlGn",function(){return l_}),e.d(n,"schemeYlGn",function(){return s_}),e.d(n,"interpolateYlOrBr",function(){return d_}),e.d(n,"schemeYlOrBr",function(){return h_}),e.d(n,"interpolateYlOrRd",function(){return v_}),e.d(n,"schemeYlOrRd",function(){return p_}),e.d(n,"interpolateBlues",function(){return y_}),e.d(n,"schemeBlues",function(){return g_}),e.d(n,"interpolateGreens",function(){return __}),e.d(n,"schemeGreens",function(){return b_}),e.d(n,"interpolateGreys",function(){return x_}),e.d(n,"schemeGreys",function(){return m_}),e.d(n,"interpolatePurples",function(){return M_}),e.d(n,"schemePurples",function(){return w_}),e.d(n,"interpolateReds",function(){return E_}),e.d(n,"schemeReds",function(){return S_}),e.d(n,"interpolateOranges",function(){return A_}),e.d(n,"schemeOranges",function(){return k_}),e.d(n,"interpolateCubehelixDefault",function(){return N_}),e.d(n,"interpolateRainbow",function(){return C_}),e.d(n,"interpolateWarm",function(){return T_}),e.d(n,"interpolateCool",function(){return P_}),e.d(n,"interpolateSinebow",function(){return j_}),e.d(n,"interpolateViridis",function(){return z_}),e.d(n,"interpolateMagma",function(){return D_}),e.d(n,"interpolateInferno",function(){return U_}),e.d(n,"interpolatePlasma",function(){return B_}),e.d(n,"create",function(){return en}),e.d(n,"creator",function(){return gt}),e.d(n,"local",function(){return on}),e.d(n,"matcher",function(){return xt}),e.d(n,"mouse",function(){return fn}),e.d(n,"namespace",function(){return vt}),e.d(n,"namespaces",function(){return pt}),e.d(n,"clientPoint",function(){return cn}),e.d(n,"select",function(){return nn}),e.d(n,"selectAll",function(){return sn}),e.d(n,"selection",function(){return tn}),e.d(n,"selector",function(){return bt}),e.d(n,"selectorAll",function(){return mt}),e.d(n,"style",function(){return Tt}),e.d(n,"touch",function(){return ln}),e.d(n,"touches",function(){return hn}),e.d(n,"window",function(){return Nt}),e.d(n,"event",function(){return Wt}),e.d(n,"customEvent",function(){return $t}),e.d(n,"arc",function(){return am}),e.d(n,"area",function(){return dm}),e.d(n,"line",function(){return hm}),e.d(n,"pie",function(){return gm}),e.d(n,"areaRadial",function(){return wm}),e.d(n,"radialArea",function(){return wm}),e.d(n,"lineRadial",function(){return xm}),e.d(n,"radialLine",function(){return xm}),e.d(n,"pointRadial",function(){return Mm}),e.d(n,"linkHorizontal",function(){return Om}),e.d(n,"linkVertical",function(){return Cm}),e.d(n,"linkRadial",function(){return Rm}),e.d(n,"symbol",function(){return Jm}),e.d(n,"symbols",function(){return Zm}),e.d(n,"symbolCircle",function(){return Im}),e.d(n,"symbolCross",function(){return Fm}),e.d(n,"symbolDiamond",function(){return zm}),e.d(n,"symbolSquare",function(){return Ym}),e.d(n,"symbolStar",function(){return qm}),e.d(n,"symbolTriangle",function(){return Gm}),e.d(n,"symbolWye",function(){return $m}),e.d(n,"curveBasisClosed",function(){return rx}),e.d(n,"curveBasisOpen",function(){return ox}),e.d(n,"curveBasis",function(){return nx}),e.d(n,"curveBundle",function(){return ax}),e.d(n,"curveCardinalClosed",function(){return hx}),e.d(n,"curveCardinalOpen",function(){return px}),e.d(n,"curveCardinal",function(){return sx}),e.d(n,"curveCatmullRomClosed",function(){return _x}),e.d(n,"curveCatmullRomOpen",function(){return xx}),e.d(n,"curveCatmullRom",function(){return yx}),e.d(n,"curveLinearClosed",function(){return Mx}),e.d(n,"curveLinear",function(){return fm}),e.d(n,"curveMonotoneX",function(){return Ox}),e.d(n,"curveMonotoneY",function(){return Cx}),e.d(n,"curveNatural",function(){return Fx}),e.d(n,"curveStep",function(){return Lx}),e.d(n,"curveStepAfter",function(){return Dx}),e.d(n,"curveStepBefore",function(){return zx}),e.d(n,"stack",function(){return Yx}),e.d(n,"stackOffsetExpand",function(){return Wx}),e.d(n,"stackOffsetDiverging",function(){return Gx}),e.d(n,"stackOffsetNone",function(){return Ux}),e.d(n,"stackOffsetSilhouette",function(){return Vx}),e.d(n,"stackOffsetWiggle",function(){return Hx}),e.d(n,"stackOrderAppearance",function(){return Xx}),e.d(n,"stackOrderAscending",function(){return Zx}),e.d(n,"stackOrderDescending",function(){return Qx}),e.d(n,"stackOrderInsideOut",function(){return Kx}),e.d(n,"stackOrderNone",function(){return Bx}),e.d(n,"stackOrderReverse",function(){return tw}),e.d(n,"timeInterval",function(){return cv}),e.d(n,"timeMillisecond",function(){return sv}),e.d(n,"timeMilliseconds",function(){return lv}),e.d(n,"utcMillisecond",function(){return sv}),e.d(n,"utcMilliseconds",function(){return lv}),e.d(n,"timeSecond",function(){return vv}),e.d(n,"timeSeconds",function(){return gv}),e.d(n,"utcSecond",function(){return vv}),e.d(n,"utcSeconds",function(){return gv}),e.d(n,"timeMinute",function(){return bv}),e.d(n,"timeMinutes",function(){return _v}),e.d(n,"timeHour",function(){return xv}),e.d(n,"timeHours",function(){return wv}),e.d(n,"timeDay",function(){return Sv}),e.d(n,"timeDays",function(){return Ev}),e.d(n,"timeWeek",function(){return Av}),e.d(n,"timeWeeks",function(){return Iv}),e.d(n,"timeSunday",function(){return Av}),e.d(n,"timeSundays",function(){return Iv}),e.d(n,"timeMonday",function(){return Nv}),e.d(n,"timeMondays",function(){return Fv}),e.d(n,"timeTuesday",function(){return Tv}),e.d(n,"timeTuesdays",function(){return jv}),e.d(n,"timeWednesday",function(){return Pv}),e.d(n,"timeWednesdays",function(){return Lv}),e.d(n,"timeThursday",function(){return Ov}),e.d(n,"timeThursdays",function(){return zv}),e.d(n,"timeFriday",function(){return Cv}),e.d(n,"timeFridays",function(){return Dv}),e.d(n,"timeSaturday",function(){return Rv}),e.d(n,"timeSaturdays",function(){return Uv}),e.d(n,"timeMonth",function(){return qv}),e.d(n,"timeMonths",function(){return Yv}),e.d(n,"timeYear",function(){return Gv}),e.d(n,"timeYears",function(){return Vv}),e.d(n,"utcMinute",function(){return Xv}),e.d(n,"utcMinutes",function(){return $v}),e.d(n,"utcHour",function(){return Jv}),e.d(n,"utcHours",function(){return Qv}),e.d(n,"utcDay",function(){return tg}),e.d(n,"utcDays",function(){return ng}),e.d(n,"utcWeek",function(){return rg}),e.d(n,"utcWeeks",function(){return sg}),e.d(n,"utcSunday",function(){return rg}),e.d(n,"utcSundays",function(){return sg}),e.d(n,"utcMonday",function(){return ig}),e.d(n,"utcMondays",function(){return lg}),e.d(n,"utcTuesday",function(){return og}),e.d(n,"utcTuesdays",function(){return hg}),e.d(n,"utcWednesday",function(){return ug}),e.d(n,"utcWednesdays",function(){return dg}),e.d(n,"utcThursday",function(){return ag}),e.d(n,"utcThursdays",function(){return pg}),e.d(n,"utcFriday",function(){return cg}),e.d(n,"utcFridays",function(){return vg}),e.d(n,"utcSaturday",function(){return fg}),e.d(n,"utcSaturdays",function(){return gg}),e.d(n,"utcMonth",function(){return bg}),e.d(n,"utcMonths",function(){return _g}),e.d(n,"utcYear",function(){return xg}),e.d(n,"utcYears",function(){return wg}),e.d(n,"timeFormatDefaultLocale",function(){return qy}),e.d(n,"timeFormat",function(){return Ng}),e.d(n,"timeParse",function(){return Tg}),e.d(n,"utcFormat",function(){return Pg}),e.d(n,"utcParse",function(){return Og}),e.d(n,"timeFormatLocale",function(){return kg}),e.d(n,"isoFormat",function(){return Yy}),e.d(n,"isoParse",function(){return Wy}),e.d(n,"now",function(){return Pr}),e.d(n,"timer",function(){return Rr}),e.d(n,"timerFlush",function(){return Ir}),e.d(n,"timeout",function(){return zr}),e.d(n,"interval",function(){return Dr}),e.d(n,"transition",function(){return ui}),e.d(n,"active",function(){return Ki}),e.d(n,"interrupt",function(){return Kr}),e.d(n,"voronoi",function(){return Dw}),e.d(n,"zoom",function(){return Kw}),e.d(n,"zoomTransform",function(){return Ww}),e.d(n,"zoomIdentity",function(){return Yw})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,