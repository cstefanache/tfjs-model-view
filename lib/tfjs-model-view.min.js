!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("tfjs-model-view",[],t):"object"==typeof exports?exports["tfjs-model-view"]=t():e["tfjs-model-view"]=t()}("undefined"!=typeof self?self:this,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(n,a,function(t){return e[t]}.bind(null,a));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(r(1)),a=i(r(2)),o=i(r(4));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=Object.assign({},o.default,r),u=void 0;i.predictCallback=function(e){u&&u.update(t,e)},i.hookCallback=function(e){u&&u.render(e)},(0,n.default)(t,i).then((function(e){u=new a.default(i,e)}))},e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o=(n=i(regeneratorRuntime.mark((function e(t,r){var n,o,s,c,l;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return s=function e(t,r){var a,s=this,c=t.name,l=t.input,f=t.inputs,d=t.shape,p=t.sourceLayer,h=p||{},y=h.getWeights,v=h.setCallHook,g=h.activation,b={previousColumn:[],name:c,shape:d,weights:{},getWeights:u,mapPosition:Object.keys(n.layerMap).length};if(n.layerMap[c]=b,n.layerArr.unshift(b),g){var m=g.getClassName();b.activation={name:m}}return v&&p.setCallHook((a=i(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:b.getWeights(),b.activations=[],r=0;case 3:if(!(r<t.length)){e.next=12;break}return e.t0=b.activations,e.next=7,t[r].dataSync();case 7:e.t1=e.sent,e.t0.push.call(e.t0,e.t1);case 9:r++,e.next=3;break;case 12:o.hookCallback(b);case 13:case"end":return e.stop()}}),e,s)}))),function(e){return a.apply(this,arguments)})),y&&(b.getWeights=i(regeneratorRuntime.mark((function e(){var t,r,n,a,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,p.getWeights();case 2:t=e.sent,r=0;case 4:if(!(r<t.length)){e.next=16;break}return n=t[r],a=n.rankType,o=n.name,b.hasWeights=!0,e.t0=o,e.next=11,t[r].dataSync();case 11:e.t1=e.sent,b.weights[a]={name:e.t0,values:e.t1};case 13:r++,e.next=4;break;case 16:case"end":return e.stop()}}),e,s)}))),b.getWeights()),f?f.forEach((function(t){e(t,b.previousColumn)})):e(l,b.previousColumn),r&&r.push(b),b},n={layerMap:{},layerArr:[]},o=a({predictCallback:u,hookCallback:u},r),c=t.predict,t.predict=function(){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];var a=c.apply(t,r);return t.outputData=a.dataSync(),o.predictCallback(r),a},e.next=7,s(t.layers[t.layers.length-1].output);case 7:return n.model=e.sent,r.printStats&&(l=n.layerArr,console.log(new Array(10).join("-")),l.forEach((function(e){console.log("Layer: "+e.name)}))),e.abrupt("return",n);case 10:case"end":return e.stop()}}),e,this)}))),function(e,t){return n.apply(this,arguments)});function i(e){return function(){var t=e.apply(this,arguments);return new Promise((function(e,r){return function n(a,o){try{var i=t[a](o),u=i.value}catch(e){return void r(e)}if(!i.done)return Promise.resolve(u).then((function(e){n("next",e)}),(function(e){n("throw",e)}));e(u)}("next")}))}}function u(){}t.default=o,e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(3);var i=function(e){function t(e,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r)),a=document.createElement("canvas");return a.setAttribute("width",n.width),a.setAttribute("height",n.height),document.body.appendChild(a),n.renderContext=a.getContext("2d"),n.renderElement=a,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"update",value:function(e,t){var r=this,n=Object.keys(this.layers).filter((function(e){return-1!==e.indexOf("_input")}));if(n.length!==t.length)throw new Error("identified 2 input layers: "+n.join(",")+" and had only "+t.length+" input values");n.forEach((function(e,n){r.render({name:e},t[n].dataSync())})),this.render(this.outputLayer,e.outputData)}},{key:"render",value:function(e,t,r){var n=this,a=e.name,o=e.previousColumn;if(t||r){var i=t||r,u=this.height;try{var s=this.layers[a],c=s.x,l=s.layerWidth,f=s.radius,d=s.nodes,p=s.layerHeight,h=s.domainMax,y=Math.floor((u-p)/2);this.renderContext.clearRect(c-f/2-2,0,l+2,u),d.forEach((function(e,t){var r=e.x,a=e.y;n.renderContext.strokeStyle="#000",n.renderContext.fillStyle="rgba(0,0,0, "+i[t]/h+")",n.renderContext.beginPath(),n.renderContext.arc(r,y+a,f/2,0,2*Math.PI),f>3&&n.renderContext.stroke(),n.renderContext.fill()}))}catch(e){}}else if(o&&o.length>0&&e.activations)for(var v=0;v<e.previousColumn.length;v++)this.render(e.previousColumn[v],e.activations[v])}}]),t}(((n=o)&&n.__esModule?n:{default:n}).default);t.default=i,e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var i,u=e[Symbol.iterator]();!(n=(i=u.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{!n&&u.return&&u.return()}finally{if(a)throw o}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.default=function e(t,r){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var o=t.xPadding,i=t.yPadding,u=t.layer,s=void 0===u?{}:u,c=r.layerArr,l=2*(i||1),f=o||0;this.layers={},c.forEach((function(e){var r=e.name,o=e.shape;e.activation;a.outputLayer=e;var i=s[r]||{},u=Object.assign({},t,i),c=u.radius,d=u.nodePadding,p=u.layerPadding,h=u.groupPadding,y=u.domainMax,v=void 0===y?1:y,g=u.reshape,b=Object.assign([1,1,1],o.slice(1)),m=n(b,3),x=m[0],w=m[1],j=m[2],O=x*w*j;if(g){var P=Object.assign([1,1,1],g),_=n(P,3),C=_[0],k=_[1],M=_[2];if(C*k*M!==O)throw new Error("Unable to reshape from ["+x+", "+w+", "+j+"] to ["+C+", "+k+", "+M+"]");x=C,w=k,j=M}f+=p;for(var E=c+d,S=p+w*E,A=[],W=0,R=0;R<x;R++)for(var T=0;T<w;T++)for(var H=0;H<j;H++){var L=h+c+R*E+H*x*(E+h);A.push({x:f+T*E,y:L}),W=L}W+=h+c,l=Math.max(l,W),a.layers[r]={name:r,x:f,layerWidth:S,layerHeight:W,radius:c,nodes:A,domainMax:v,layer:e},f+=S})),f+=o||0,Object.assign(this,{width:f,height:l})},e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={renderer:"canvas",radius:6,nodePadding:2,layerPadding:20,groupPadding:1,xPadding:10,yPadding:10,plotActivations:!1},e.exports=t.default}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,